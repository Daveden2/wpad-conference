WEBVTT

00:00:01.140 --> 00:00:05.603
 AMBER HINDS: WordPress
Accessibility Day 2023: The Impact

00:00:05.603 --> 00:00:11.720
of Bad ARIA on Web Accessibility
- with Speakers Rashmi Katawar,

00:00:11.720 --> 00:00:14.100
Web Accessibility Consultant.

00:00:14.100 --> 00:00:17.710
This presentation was
recorded September 28th, 2023.

00:00:17.710 --> 00:00:22.720
 RONAK KANAPRA: Welcome to
WordPress Accessibility Day 2023.

00:00:22.720 --> 00:00:27.520
My name is Ronak Kanapra and I am
a WordPress Engineer at Multidots.

00:00:28.580 --> 00:00:34.250
Thank you for joining us for this
session, the Impact of Bad ARIA

00:00:34.250 --> 00:00:38.560
on Web Accessibility
with Rashmi Katawar.

00:00:38.560 --> 00:00:41.190
Rashmi is a passionate
accessibility enthusiast,

00:00:41.190 --> 00:00:43.520
and freelance web
accessibility consultant.

00:00:43.520 --> 00:00:48.840
She is also an invited expert
at W3C and actively contributes

00:00:48.840 --> 00:00:52.500
to the cognitive and learning
visibility accessibility.

00:00:52.500 --> 00:00:57.200
Rashmi is deeply committed to
ensuring equal access to technology

00:00:57.200 --> 00:00:58.630
for all individuals.

00:00:58.630 --> 00:01:02.960
Her enthusiasm for accessibility
is driven by her unwavering belief

00:01:02.960 --> 00:01:07.250
in the power of technology to
create a more inclusive society.

00:01:09.810 --> 00:01:13.410
Please feel free to add your
questions in the Zoom Q&A section,

00:01:13.410 --> 00:01:16.360
and we will answer them
at the end of the session.

00:01:16.360 --> 00:01:18.800
Use the chat to connect
with other attendees.

00:01:20.260 --> 00:01:22.540
Now I think Rashmi,
the stage is yours.

00:01:22.540 --> 00:01:23.340
You can start.

00:01:23.340 --> 00:01:23.870
Thank you.

00:01:24.733 --> 00:01:26.140
 RASHMI KATAWAR: Hello everyone.

00:01:26.140 --> 00:01:28.180
Thanks for the wonderful
introduction, again.

00:01:28.180 --> 00:01:29.710
So, hi, this is Rashmi Katakwar.

00:01:30.800 --> 00:01:31.890
I am from India.

00:01:31.890 --> 00:01:36.200
I'm a Freelance Web Accessibility
Consultant and W3C invited Expert.

00:01:37.580 --> 00:01:42.710
I'm also actively contributing
towards the work of Koga Task Force

00:01:42.710 --> 00:01:44.020
as part of W3C.

00:01:48.600 --> 00:01:51.390
And I'm also acting as Social
Media Manager at [Inaudible 01:52]

00:01:51.390 --> 00:01:53.220
by LinkedIn community.

00:01:53.220 --> 00:01:57.000
So I welcome you all to my
presentation on the topic impact

00:01:57.000 --> 00:01:58.710
of bad ARIA on Web Accessibility.

00:02:01.120 --> 00:02:03.690
Let me start with giving you
a brief introduction about

00:02:03.690 --> 00:02:04.970
why I chose this topic.

00:02:06.000 --> 00:02:09.800
So during accessibility audits,
I found that many accessibility

00:02:09.800 --> 00:02:14.240
and usability issues were coming
due to wrong usages of ARIA in code.

00:02:14.240 --> 00:02:17.410
These wrong usages of ARIA were
posing significant challenges

00:02:17.410 --> 00:02:22.340
for people who use assistive
technologies to navigate the web.

00:02:23.780 --> 00:02:28.780
It is appreciable that developers
are using ARIA with good intention,

00:02:28.780 --> 00:02:33.180
but without sufficient knowledge,
they may fall in trap of bad ARIA

00:02:33.180 --> 00:02:35.700
and may end up in creating
inaccessible solutions.

00:02:37.180 --> 00:02:42.100
ARIA is a very powerful tool to
enhance accessibility for people

00:02:42.100 --> 00:02:45.760
who use assistive technologies
if used adequately.

00:02:45.760 --> 00:02:48.210
On the other hand, its misuse
creates more harm than good.

00:02:49.320 --> 00:02:51.575
So today with help
of my presentation,

00:02:51.576 --> 00:02:53.020
with real-life examples,

00:02:53.020 --> 00:02:57.850
I will share how misuse of
ARIA creates hurdles for users

00:02:57.850 --> 00:03:00.630
and how you can remove those
hurdles by using correct ARIA,

00:03:00.630 --> 00:03:01.880
and following best practices.

00:03:03.410 --> 00:03:05.900
I assure you,
by the end of this session,

00:03:05.900 --> 00:03:10.070
you will have a better
understanding of all ARIA concepts.

00:03:10.070 --> 00:03:12.620
This will also help you
align your intent effort

00:03:12.620 --> 00:03:14.670
and impact towards
improving web accessibility.

00:03:16.190 --> 00:03:19.950
Following ARIA best practices,
and using a proactive approach

00:03:19.950 --> 00:03:23.570
will also help to reduce burden
on developers and businesses

00:03:23.570 --> 00:03:25.190
in terms of time,
effort, and money.

00:03:26.960 --> 00:03:29.445
This will also improve
user experiences

00:03:29.446 --> 00:03:31.370
as well as reduce legal risks.

00:03:33.670 --> 00:03:36.230
I'm sure you all must have
heard about the famous quote

00:03:36.230 --> 00:03:38.900
from the movie Spider -Man,
that "With great power

00:03:38.900 --> 00:03:40.980
comes great responsibility".

00:03:40.980 --> 00:03:43.410
This is also applicable
in case when we use ARIA.

00:03:45.730 --> 00:03:49.050
ARIA gives us power to
improve accessibility.

00:03:49.050 --> 00:03:53.210
So when we use ARIA, it is our
responsibility to use it judiciously

00:03:54.880 --> 00:03:57.250
because misuse of ARIA
creates more harm than good.

00:03:59.340 --> 00:04:03.130
Bad ARIA is like a faulty ramp that
doesn't serve its intended purpose.

00:04:05.540 --> 00:04:08.070
Imagine a ramp that is installed
at the height of one foot

00:04:08.070 --> 00:04:08.870
from the landing surface.

00:04:08.870 --> 00:04:11.740
Does this ramp really
help future users?

00:04:11.740 --> 00:04:13.150
Of course not.

00:04:13.150 --> 00:04:17.260
After all, it is not meant for
skateboarders to show their strength.

00:04:19.000 --> 00:04:22.980
The architect had good
intentions while he installed it,

00:04:22.980 --> 00:04:26.334
but without following
the proper guidelines

00:04:26.335 --> 00:04:28.620
and understanding user needs,

00:04:28.620 --> 00:04:34.660
he failed to understand all
the users' needs and failed

00:04:34.660 --> 00:04:36.410
to help wheelchair users.

00:04:36.410 --> 00:04:40.080
Similarly, if developers use
ARIA without understanding it,

00:04:40.080 --> 00:04:44.100
and implement it in the code,
they fail to help users as intended.

00:04:45.890 --> 00:04:49.600
The data from the latest WebAIM
survey also supports my concerns.

00:04:50.870 --> 00:04:54.530
The 2023 WebAIM million
survey data tells, the usage

00:04:54.530 --> 00:04:57.360
of ARIA has increased
by 29% in just one year.

00:04:58.770 --> 00:05:01.000
And it has increased
[Inaudible 04:49]

00:05:01.000 --> 00:05:02.560
since 2019.

00:05:02.560 --> 00:05:03.980
So what is the point of concern?

00:05:05.270 --> 00:05:07.700
The point of concern
is that it also states

00:05:07.700 --> 00:05:13.160
that 68.6% more detected errors
are found on pages with ARIA.

00:05:14.730 --> 00:05:16.940
The more ARIA attributes
that are present,

00:05:16.940 --> 00:05:18.810
the more accessibility
errors were expected.

00:05:20.140 --> 00:05:23.750
The bottom line is,
if you use ARIA incorrectly,

00:05:23.750 --> 00:05:25.720
you can make your
sites less accessible.

00:05:26.950 --> 00:05:30.230
So why not understand this with
the help of one real-life example?

00:05:34.690 --> 00:05:36.010
Let's meet Bob.

00:05:36.010 --> 00:05:37.990
[Screen Reader Voice]

00:05:40.930 --> 00:05:42.700
Bob is a non-sighted
screen reader user.

00:05:44.010 --> 00:05:47.910
He wanted to surprise his beloved
wife, Sara, on their anniversary

00:05:49.430 --> 00:05:51.710
by gifting her some
personalized items.

00:05:54.490 --> 00:05:59.900
With great excitement, he opened
the website to search for gifts.

00:05:59.900 --> 00:06:03.720
But to his dismay, as soon as
he started exploring the site

00:06:03.720 --> 00:06:09.060
with keyboard and screen reader,
he was showered with sudden

00:06:09.060 --> 00:06:10.720
and unexpected announcements.

00:06:12.940 --> 00:06:17.940
This left him disoriented and
interrupted his screen reader's flow.

00:06:17.940 --> 00:06:23.030
He could hardly focus on his content
amidst continuous interruptions.

00:06:23.030 --> 00:06:25.240
I have recorded his
experience in a video.

00:06:26.600 --> 00:06:31.130
The video shows a user using the
screen reader NVDA with keyboard.

00:06:32.340 --> 00:06:35.890
And the speech reader window shows
the text read by the screen reader

00:06:35.890 --> 00:06:36.890
in linear order.

00:06:39.010 --> 00:06:40.640
So let's listen to
the audio together

00:06:40.640 --> 00:06:43.250
to understand Bob's
experience better.

00:06:45.212 --> 00:07:38.637
[Screen Reader Voice]

00:07:40.633 --> 00:07:41.602
Sounds annoying.

00:07:43.567 --> 00:07:46.349
So what happened to
Bob's search for gifts?

00:07:46.350 --> 00:07:49.730
After a few minutes of
struggle, he closed the site

00:07:49.730 --> 00:07:51.890
and dropped the idea of
online gifting to his wife.

00:07:52.990 --> 00:07:55.200
So what was the reason behind this?

00:07:55.200 --> 00:07:58.340
This was happening due to misuse
of ARIA attribute, aria-live equal

00:07:58.340 --> 00:08:01.480
to polite on auto
rotating carousels.

00:08:01.480 --> 00:08:04.410
We will discuss that
later, but for the moment,

00:08:04.410 --> 00:08:08.010
the author has used the
ARIA under the impression

00:08:08.010 --> 00:08:11.420
that it will help the users,
the screen reader users.

00:08:11.420 --> 00:08:12.870
But what happened in reality?

00:08:12.870 --> 00:08:15.930
In reality,
it badly broke users' experience.

00:08:15.930 --> 00:08:20.040
So this is what happens when
websites are built with bad ARIA.

00:08:22.830 --> 00:08:25.300
From Bob's experience,
we got an understanding that

00:08:25.300 --> 00:08:28.140
instead of helping
assistive technology users,

00:08:28.141 --> 00:08:30.590
bad ARIA poses barriers
for them.

00:08:31.020 --> 00:08:33.460
It leaves the user
misguided, frustrated,

00:08:33.460 --> 00:08:36.100
sometimes creating false
expectations for them.

00:08:36.100 --> 00:08:38.590
It bars them from having
full digital experiences.

00:08:39.650 --> 00:08:43.730
And such experiences may compel users
to either leave their task midway

00:08:43.730 --> 00:08:46.310
or depend on others
to finish their task.

00:08:46.310 --> 00:08:47.740
This defeats the purpose of ARIA.

00:08:50.580 --> 00:08:52.650
So let's know what
ARIA is all about.

00:08:52.650 --> 00:08:55.960
Because understanding it and
using it wisely is very crucial.

00:08:56.990 --> 00:08:59.500
In modern times,
the web pages are behaving

00:08:59.500 --> 00:09:02.810
more like rich
internet applications.

00:09:02.810 --> 00:09:06.010
They are having rich user
interfaces, advanced user interfaces,

00:09:06.010 --> 00:09:07.330
and dynamic contents.

00:09:08.600 --> 00:09:12.610
Unfortunately, HTML does not
have all that english semantics

00:09:12.610 --> 00:09:17.310
to convey the semantics for all
these rich controls, like tabs,

00:09:17.310 --> 00:09:19.970
tab lists, pre-menu, et cetera.

00:09:19.970 --> 00:09:22.270
Sighted users can perceive
these controls with the help

00:09:22.270 --> 00:09:24.950
of visual design patterns.

00:09:24.950 --> 00:09:27.440
But without semantics,
the assisted users

00:09:27.440 --> 00:09:30.300
may not be knowing the complete
functionality and behavior

00:09:30.300 --> 00:09:31.720
of these elements.

00:09:31.720 --> 00:09:33.970
So here, ARIA acts as a
bridge to fill that gap.

00:09:35.950 --> 00:09:37.509
Web accessibility initiative,

00:09:37.510 --> 00:09:39.660
Accessible Rich
Internet Applications,

00:09:39.660 --> 00:09:43.230
all by ARIA,
or ARIA as we say in short.

00:09:43.230 --> 00:09:45.800
ARIA is a W3C specification.

00:09:45.800 --> 00:09:50.150
It includes a set of roles and
attributes that authors can add

00:09:50.150 --> 00:09:54.540
to HTML to improve web
accessibility of web content

00:09:54.540 --> 00:09:59.220
and web application for users who
use assistive technologies, primarily

00:09:59.220 --> 00:10:00.220
for screen readers.

00:10:02.950 --> 00:10:06.910
Suppose you are reading a storybook
and somebody has added little notes

00:10:06.910 --> 00:10:08.830
to help you understand
the story better.

00:10:08.830 --> 00:10:11.420
So ARIA is like those
notes in simple terms.

00:10:11.420 --> 00:10:15.620
The power of ARIA is immense.

00:10:15.620 --> 00:10:17.220
It has lots of features inside it.

00:10:18.610 --> 00:10:21.120
We have limited time,
so let's cover some of them today.

00:10:22.160 --> 00:10:23.160
Indeed.

00:10:23.700 --> 00:10:29.520
So ARIA helps Authors to describe
the type of widgets with the help

00:10:29.520 --> 00:10:32.540
of roles such as tab lists,
tab, menu, tree, et cetera.

00:10:33.800 --> 00:10:37.570
They can define state with the help
of attributes like ARIA selected,

00:10:37.570 --> 00:10:39.090
ARIA controls, et cetera.

00:10:42.260 --> 00:10:45.060
They can define relationships
among elements with ARIA owns,

00:10:45.060 --> 00:10:46.140
ARIA controls, et cetera.

00:10:47.710 --> 00:10:50.990
Authors can provide accessible
names, using ARIA label

00:10:50.990 --> 00:10:52.510
or ARIA label by Author.

00:10:52.510 --> 00:10:54.730
Authors can provide accessible
description with the help

00:10:54.730 --> 00:10:58.060
of ARIA describe button.

00:10:58.060 --> 00:11:01.107
To convey the dynamic
content changes,

00:11:01.108 --> 00:11:03.450
Authors can use live regions.

00:11:03.450 --> 00:11:07.010
For example, success messages,
error messages, warnings,

00:11:07.010 --> 00:11:08.390
or sports score updates, et cetera.

00:11:10.050 --> 00:11:13.110
They can use ARIA hidden attributes
to hide the decorative contents.

00:11:14.350 --> 00:11:18.710
Now the question comes, how ARIA
helps assistive technologies?

00:11:21.510 --> 00:11:25.560
ARIA helps in adding role
name, state, et cetera,

00:11:25.560 --> 00:11:29.270
to the accessibility tree created
from document object model.

00:11:31.340 --> 00:11:34.800
This in turn helps accessibility
API to pass that information

00:11:34.800 --> 00:11:36.150
to assistive technologies.

00:11:40.360 --> 00:11:42.050
Now we know what ARIA can do.

00:11:43.470 --> 00:11:45.660
So let's also understand
what ARIA cannot do.

00:11:47.120 --> 00:11:49.120
ARIA cannot add
behavior to an element.

00:11:50.390 --> 00:11:52.940
It cannot change the
appearance of an element,

00:11:52.940 --> 00:11:57.130
neither can it add focusability,
nor it can add keyboard functionality

00:11:57.130 --> 00:11:58.460
to the elements.

00:11:59.500 --> 00:12:03.667
For adding these features, the
author has to use scripts and CSS.

00:12:05.100 --> 00:12:07.133
To make optimal use of ARIA,

00:12:07.133 --> 00:12:10.820
the author should follow
five rules of ARIA.

00:12:10.820 --> 00:12:12.360
So what are they?

00:12:12.360 --> 00:12:15.050
Let's explore them one by one.

00:12:15.050 --> 00:12:20.130
Rule one says, do not use ARIA if the
same semantic is available in HTML.

00:12:20.130 --> 00:12:24.250
So if you have to create a
Checkbox, use native input elements

00:12:24.250 --> 00:12:28.650
with type as Checkbox instead
of using role as Checkbox

00:12:28.650 --> 00:12:29.650
on the div element.

00:12:33.130 --> 00:12:36.170
Most of the HTML elements have
native semantics that they convey

00:12:36.170 --> 00:12:38.100
to the screen readers.

00:12:38.100 --> 00:12:40.750
So the rule two says,
do not change the native semantics

00:12:40.750 --> 00:12:41.780
unless you really have to.

00:12:42.970 --> 00:12:47.050
Because ARIA may change the
semantics, and the meanings

00:12:47.050 --> 00:12:48.310
for the screen reader users.

00:12:49.930 --> 00:12:52.653
Rule three says, all interactive
controls must be usable

00:12:52.654 --> 00:12:53.560
with a keyboard.

00:12:53.560 --> 00:12:55.280
What does that mean?

00:12:55.280 --> 00:12:57.220
ARIA rules add only semantics.

00:12:57.220 --> 00:13:02.290
To make it navigable and operable,
it is the author's responsibility.

00:13:02.290 --> 00:13:05.420
So if you are using role
equal to button on an element,

00:13:05.420 --> 00:13:08.440
you have to make it
focusable with the keyboard.

00:13:08.440 --> 00:13:12.800
And the user should be able
to activate it with the help

00:13:12.800 --> 00:13:14.750
of Enter key and
Spacebar in Windows.

00:13:16.720 --> 00:13:20.500
The rule four says, do not
add role equal to presentation

00:13:20.500 --> 00:13:23.020
or aria-hidden equal true
on focusable elements.

00:13:24.480 --> 00:13:27.392
Because using either
of these will result

00:13:27.393 --> 00:13:29.680
in the user focusing on nothing.

00:13:34.740 --> 00:13:38.970
Accessible names are names
used by assistive technology,

00:13:38.970 --> 00:13:42.360
or text used by assistive
technologies to identify the element.

00:13:42.360 --> 00:13:45.286
So rule five says,
all interactive elements must have

00:13:45.287 --> 00:13:46.370
an accessible name.

00:13:47.930 --> 00:13:51.920
If authors don't follow these rules,
ARIA does more harm than good.

00:13:51.920 --> 00:13:56.440
That's why it is very common saying,
No ARIA is better than bad ARIA.

00:13:58.250 --> 00:14:02.432
Let's understand this with
an interesting example

00:14:02.433 --> 00:14:04.440
from my personal audit.

00:14:05.480 --> 00:14:10.180
Let's understand this
with a volume slider.

00:14:10.180 --> 00:14:13.190
That is the volume slider
control which is created

00:14:13.190 --> 00:14:17.880
with native input element
having type role role as range.

00:14:17.880 --> 00:14:25.880
The author has used a label
element to bind it with the slider,

00:14:26.310 --> 00:14:28.010
with for id attribute.

00:14:28.010 --> 00:14:33.120
The author has also added a label
element with aria-label equal

00:14:33.120 --> 00:14:35.770
to volume control,
and aria-hidden equal to true.

00:14:35.770 --> 00:14:39.630
I would repeat, Author has also
added aria-label equal to volume,

00:14:39.630 --> 00:14:42.910
control and aria-hidden equal to
true on the label element itself.

00:14:45.150 --> 00:14:48.260
Now take a few moments and
let me know through the chat.

00:14:48.260 --> 00:14:50.220
What will be the accessible
name for the slider?

00:14:56.040 --> 00:14:59.640
Unfortunately, there will be no
accessible name for the slider

00:14:59.640 --> 00:15:04.630
and the screen reader users
will not hear any name about,

00:15:04.630 --> 00:15:06.830
and they will not know the
purpose of the element.

00:15:08.350 --> 00:15:09.350
So what went wrong?

00:15:10.390 --> 00:15:12.890
Due to aria-hidden equal to
true on the label element,

00:15:14.570 --> 00:15:18.080
it has hidden the visible
label as well as aria-abel.

00:15:18.080 --> 00:15:22.340
So screen readers do not know
the purpose of the element.

00:15:22.340 --> 00:15:28.900
The author had added unnecessary
ARIA attributes on the elements,

00:15:28.900 --> 00:15:32.850
unnecessarily without
understanding them properly,

00:15:32.850 --> 00:15:36.800
and eventually ended up in
creating inaccessible interfaces.

00:15:36.800 --> 00:15:38.760
In short,
ARIA serves no purpose here

00:15:38.760 --> 00:15:41.490
because the label element
itself was sufficient

00:15:41.490 --> 00:15:42.640
to provide an accessible name.

00:15:44.040 --> 00:15:47.370
The bottom line is use
ARIA only and only when

00:15:47.370 --> 00:15:48.770
it is enhancing accessibility.

00:15:50.290 --> 00:15:51.670
No ARIA is better than bad ARIA.

00:15:52.800 --> 00:15:54.820
Let's move to another
example of Emily.

00:15:56.820 --> 00:15:59.680
Emily is a speech user input.

00:15:59.680 --> 00:16:04.120
She has lost all her core
limbs in a tragic accident.

00:16:04.120 --> 00:16:07.100
So she uses speech input software
to interact with the digital world.

00:16:08.250 --> 00:16:10.970
She is very fond of reading books.

00:16:12.480 --> 00:16:14.690
She wants to follow her
favorite author on Facebook.

00:16:15.720 --> 00:16:20.230
The visible link on the author's
website is Follow me on Facebook.

00:16:22.080 --> 00:16:26.210
If you were in place of Emily, what
voice command would you have given

00:16:26.210 --> 00:16:27.210
to access the link?

00:16:28.560 --> 00:16:29.700
Let me know through the chat.

00:16:35.080 --> 00:16:40.820
I'm sure you all must have used,
follow me on... click follow me

00:16:40.820 --> 00:16:41.910
on Facebook.

00:16:41.910 --> 00:16:44.980
Emily tried the same,
but it didn't work.

00:16:47.100 --> 00:16:49.223
Because the author has
used aria-label equal

00:16:49.224 --> 00:16:50.450
to opens in a new window,

00:16:51.700 --> 00:16:55.950
to help screen reader users to
explain the behavior of the link

00:16:55.950 --> 00:16:58.290
that it will be opening
in a new window.

00:16:58.290 --> 00:17:04.520
But unfortunately, he was not aware
that the native text inside the link

00:17:04.520 --> 00:17:06.180
will be overwritten by aria-label.

00:17:07.730 --> 00:17:10.720
And the mismatch of visible
label, and the aria-label

00:17:10.720 --> 00:17:13.710
or accessible name will
create challenges for users.

00:17:17.250 --> 00:17:20.360
One correct way is to
append the text opens

00:17:20.360 --> 00:17:23.080
in a new window inside
the link text itself.

00:17:23.080 --> 00:17:24.120
This will help users.

00:17:26.030 --> 00:17:29.350
Now, how can developers avoid these
mistakes and use correct ARIA?

00:17:30.720 --> 00:17:33.600
Let's break all ARIA
concepts one by one to know

00:17:33.600 --> 00:17:34.730
how to use them correctly.

00:17:43.820 --> 00:17:46.650
First, let's explore the key
points to provide accessible names

00:17:46.650 --> 00:17:47.650
using ARIA.

00:17:48.860 --> 00:17:52.750
So always remember, ARIA
mechanisms always take precedence

00:17:52.750 --> 00:17:54.580
over native HTML techniques.

00:17:54.580 --> 00:17:55.640
So choose them carefully.

00:17:56.710 --> 00:18:00.650
Start an accessible name with the
visible label as a best practice.

00:18:02.250 --> 00:18:06.920
aria-label or aria-labelledby,
do not work on generic elements

00:18:06.920 --> 00:18:09.580
if they are not given proper roles.

00:18:09.580 --> 00:18:12.940
So suppose you are having
aria-label equal to cookie banner

00:18:14.360 --> 00:18:16.950
on div element,
and you forget to define the role,

00:18:18.020 --> 00:18:22.690
so the screen reader will not
read the label, cookie banner.

00:18:24.120 --> 00:18:28.470
So always take these points in mind
while providing accessible names.

00:18:30.300 --> 00:18:35.630
There are multiple ways to provide
accessible names except ARIA also.

00:18:37.110 --> 00:18:42.260
So, suppose you want to add
a name to the button or link,

00:18:42.260 --> 00:18:46.270
you can put text-inside-link
or button, or you can add alt

00:18:46.270 --> 00:18:50.950
to the images or you
can use for id attribute

00:18:50.950 --> 00:18:53.870
to bind the label
elements with form fields.

00:18:53.870 --> 00:18:57.800
But if you think that ARIA is the
right solution, what should you do?

00:18:57.800 --> 00:18:59.614
If you think ARIA is
the right solution

00:18:59.615 --> 00:19:01.020
to provide an accessible name,

00:19:01.020 --> 00:19:03.790
check if the text already
exists in the document,

00:19:03.790 --> 00:19:05.740
then use aria-labelledby.

00:19:05.740 --> 00:19:08.150
And if the text is not
already in the document,

00:19:08.150 --> 00:19:09.420
then you can use aria-label.

00:19:11.250 --> 00:19:14.530
Here the other point to consider
is, aria-describedby is

00:19:14.530 --> 00:19:16.480
for providing
accessible description.

00:19:16.480 --> 00:19:18.340
It's not for providing
accessible names.

00:19:20.590 --> 00:19:23.690
For example, to programmatically
associate error description

00:19:23.690 --> 00:19:25.050
with the corresponding form field.

00:19:26.500 --> 00:19:29.420
Authors sometimes get confused
between aria-described-by,

00:19:29.420 --> 00:19:30.420
and aria-labelledby.

00:19:32.050 --> 00:19:33.890
So always keep
remembering these points.

00:19:36.410 --> 00:19:40.370
Now the next slide covers role which
require Parent-Child attributes,

00:19:40.370 --> 00:19:41.570
Parent-Child relationships.

00:19:42.890 --> 00:19:46.690
There are certain roles that require
a certain Parent-Child relationship

00:19:46.690 --> 00:19:51.320
among them like tabless-tab or
list box option, radio-group radio,

00:19:51.320 --> 00:19:54.410
menu-menu item, menu item,
radio check-box, et cetera.

00:19:55.810 --> 00:19:58.125
Providing clear Parent-Child
relationships help

00:19:58.126 --> 00:20:00.700
screen reader users
in easy navigation.

00:20:00.700 --> 00:20:03.870
And it helps them in conveying
structure and relationship properly.

00:20:05.670 --> 00:20:08.290
So if the relationship
is conveyed properly,

00:20:09.510 --> 00:20:11.950
the screen reader will
communicate the information

00:20:11.950 --> 00:20:15.650
to the user like item position
insider, list or menu,

00:20:15.650 --> 00:20:18.260
or item level in a
tree structure height.

00:20:20.950 --> 00:20:25.670
Some others provide parent
role on the parent element,

00:20:25.670 --> 00:20:29.300
and they forget to define...
They provide parent element,

00:20:29.300 --> 00:20:32.470
parent role,
but forget to define the child role.

00:20:32.470 --> 00:20:35.620
And they sometimes provide child role
and forget to define parent role.

00:20:37.050 --> 00:20:40.400
For example, they provide role
equal to menu on the parent element,

00:20:40.400 --> 00:20:43.650
but forget to define role
equal to menu item radio

00:20:43.650 --> 00:20:47.950
or menu item check-box on
the descendant element.

00:20:47.950 --> 00:20:52.640
Similarly, they provide role
equal to tab on the Child element,

00:20:52.640 --> 00:20:56.040
but forget to define role equal
to tab list on the parent element.

00:20:57.690 --> 00:21:00.100
It's still possible
that screen reader

00:21:00.100 --> 00:21:05.230
and browser combination can weather
information, but others may not,

00:21:05.230 --> 00:21:07.100
so make it unreliable solutions.

00:21:08.500 --> 00:21:12.300
Not defining a proper relationship
leaves the user with partial context.

00:21:13.610 --> 00:21:17.040
So the question comes, how can
you check these relationships?

00:21:17.040 --> 00:21:21.870
So to find the issues related
with parent child relationships,

00:21:21.870 --> 00:21:24.490
you can either inspect
the code manually

00:21:24.490 --> 00:21:27.320
or you can use accessibility
linters as you code,

00:21:27.320 --> 00:21:31.760
or you can use automated testing
tools like axe dev tool, etc.

00:21:35.010 --> 00:21:38.660
Similarly, there are some roles
with certain ARIA attributes.

00:21:40.730 --> 00:21:43.990
There are certain roles which
require ARIA attributes associated

00:21:43.990 --> 00:21:44.770
with them.

00:21:44.770 --> 00:21:47.490
For example, role equal to
heading should be associated

00:21:47.490 --> 00:21:49.600
with appropriate ARIA
level, role equal

00:21:49.601 --> 00:21:54.210
to checkbox should be associated
with attribute ARIA check.

00:21:54.210 --> 00:21:57.690
Role equal to slider should be
associated with ARIA value now.

00:21:57.690 --> 00:22:01.250
Without those attributes, they will
fail to convey proper semantics

00:22:01.250 --> 00:22:02.760
to the screen reader users.

00:22:04.010 --> 00:22:06.440
But authors often
forget to convey this.

00:22:07.640 --> 00:22:10.400
Suppose you are using role equal
to heading on a div element,

00:22:11.930 --> 00:22:15.810
and you have not provided the
correct aria-label attribute.

00:22:15.810 --> 00:22:18.430
So the screen reader may
not convey the exact label

00:22:18.430 --> 00:22:20.310
that should be conveyed
for the element.

00:22:22.070 --> 00:22:25.650
So always refer to the latest
ARIA specification for checking

00:22:25.650 --> 00:22:27.260
with the roles and
attribute association.

00:22:30.670 --> 00:22:32.930
The other mis-used feature
is ARIA live region.

00:22:35.760 --> 00:22:39.290
The dynamic content changes,
those are not focusable.

00:22:39.290 --> 00:22:42.610
They don't receive focus, and are
not obvious to screen reader users.

00:22:44.530 --> 00:22:48.720
For example, warning messages,
success messages, status updates

00:22:48.720 --> 00:22:53.720
or periodic score
updates, et cetera.

00:22:53.720 --> 00:22:57.030
This region should be marked
with ARIA live region.

00:22:57.030 --> 00:22:58.777
So some key points to consider

00:22:58.778 --> 00:23:01.280
by using ARIA live
regions are role equal

00:23:01.280 --> 00:23:04.970
to alert should be used for time
sensitive or critical information.

00:23:04.970 --> 00:23:07.140
Whereas aria-live equal to
collide, should be used

00:23:07.140 --> 00:23:09.200
for low priority
messages, or updates.

00:23:11.410 --> 00:23:14.130
Sometimes authors mistakenly
use role equal to alert

00:23:14.130 --> 00:23:17.230
or aria-live equal to assertive
on low priority message;

00:23:17.230 --> 00:23:18.230
that is wrong use.

00:23:20.060 --> 00:23:23.820
We have already seen one misuse
of aria-live equal to collide

00:23:23.820 --> 00:23:26.052
on our auto rotating
carousel example,

00:23:26.053 --> 00:23:27.940
in the case of Bob's experience.

00:23:29.980 --> 00:23:34.990
So for auto rotating carousels,
aria-live equal to off should be used

00:23:34.990 --> 00:23:36.370
to suppress the announcements.

00:23:38.940 --> 00:23:43.460
If you want the entire region of
the ARIA live region to be read

00:23:43.460 --> 00:23:47.340
by the screen reader, then you
should use ARIA atomic equal

00:23:47.340 --> 00:23:48.550
to true with aria-live.

00:23:49.880 --> 00:23:52.800
Because the default value
of aria-atomic is false.

00:23:54.860 --> 00:24:00.440
Sometimes the author add ARIA live
regions on the content update itself.

00:24:00.440 --> 00:24:01.430
This doesn't work.

00:24:01.430 --> 00:24:01.890
Why?

00:24:01.890 --> 00:24:04.190
Because the aria-live
comes into picture

00:24:04.190 --> 00:24:08.780
only when the content actually
changes, not on the initial load.

00:24:09.980 --> 00:24:14.080
So the element with aria-live must
be present in the DOM structure

00:24:14.080 --> 00:24:17.930
on page load so that screen
reader may pick it up and monitor

00:24:17.930 --> 00:24:18.930
for changes.

00:24:22.420 --> 00:24:24.150
Now come to roles.

00:24:25.180 --> 00:24:26.930
ARIA roles set some expectations.

00:24:26.930 --> 00:24:28.390
So choosing a role is very crucial.

00:24:30.280 --> 00:24:32.666
The roles menu bar,
and menu are appropriate

00:24:32.667 --> 00:24:34.150
to offer a list of choices.

00:24:34.150 --> 00:24:38.120
Those are similar to a menu
in a desktop application.

00:24:38.120 --> 00:24:42.130
For example, to provide a list of
actions or functions, like add,

00:24:42.130 --> 00:24:43.380
edit, save, etc.

00:24:45.080 --> 00:24:47.950
If you create a site navigation
with the help of role equal

00:24:47.950 --> 00:24:50.290
to menu bar,
the screen reader user will

00:24:50.290 --> 00:24:55.390
expect that you should be able
to navigate the menu and submenus

00:24:55.390 --> 00:24:56.940
with the help of arrow keys.

00:24:58.070 --> 00:25:02.210
But when this doesn't happen,
they feel confused and disoriented.

00:25:03.490 --> 00:25:06.460
So for the typical site navigations
with an expandable group

00:25:06.460 --> 00:25:09.280
of links,
disclosure patterns should be used.

00:25:11.760 --> 00:25:14.940
Similarly, role equal to presentation
are also often misinterpreted.

00:25:16.410 --> 00:25:18.770
Contrary to common
belief, the role equal

00:25:18.770 --> 00:25:22.510
to presentation does not hide
content from screen readers

00:25:22.510 --> 00:25:23.520
or assistive technologies.

00:25:24.950 --> 00:25:29.030
It only removes implicit ARIA
semantics from being exposed

00:25:29.030 --> 00:25:30.160
to accessibility tree.

00:25:32.170 --> 00:25:34.560
The content of the element
still remains available

00:25:34.560 --> 00:25:36.490
to the assistive technologies.

00:25:36.490 --> 00:25:38.650
So roles sometimes act as a cloak.

00:25:38.650 --> 00:25:39.720
So choose them wisely.

00:25:47.230 --> 00:25:50.530
Now let's discuss incorrect
use of some ARIA attributes.

00:25:55.350 --> 00:25:58.160
Authors misunderstand
some ARIA attributes.

00:25:58.160 --> 00:26:01.460
They fail to find the
difference between selected,

00:26:01.460 --> 00:26:02.680
pressed and checked state.

00:26:06.560 --> 00:26:11.390
Sometimes they use ARIA select
to simulate the toggle buttons

00:26:11.390 --> 00:26:13.540
or to indicate that a
check-box is checked.

00:26:16.040 --> 00:26:18.560
But for toggle buttons,
aria-press should be used.

00:26:19.650 --> 00:26:21.770
And for the check-boxes,
or radio buttons,

00:26:21.770 --> 00:26:23.590
aria-check is the right attribute.

00:26:24.770 --> 00:26:29.068
aria-selected should be used
to indicate selected option

00:26:29.069 --> 00:26:31.680
inside a listbox
or a tab in tab list etc.

00:26:33.850 --> 00:26:36.120
The other misused
feature is aria-expanded.

00:26:38.950 --> 00:26:42.150
aria-expanded should be
used on links or buttons

00:26:42.150 --> 00:26:45.320
that cause the content
to expand or collapse.

00:26:47.150 --> 00:26:49.618
But often what happens
is that authors use them

00:26:49.619 --> 00:26:50.800
on the content itself.

00:26:50.800 --> 00:26:52.880
That is the wrong
use of aria-expanded.

00:26:53.970 --> 00:26:57.810
And surprisingly sometimes
Authors use aria-expanded

00:26:57.810 --> 00:27:00.000
on the last level
of menu hierarchy.

00:27:02.100 --> 00:27:05.660
So it conveys the
user's wrong semantics.

00:27:05.660 --> 00:27:10.050
The screen reader users
think that the last level

00:27:10.050 --> 00:27:12.350
of menu hierarchy
item can be expanded.

00:27:12.350 --> 00:27:13.710
But in reality it cannot.

00:27:15.220 --> 00:27:17.060
So it leaves users disoriented.

00:27:19.250 --> 00:27:22.260
So always choose your
attribute with caution.

00:27:25.220 --> 00:27:28.590
Now we have explored many
theoretical concepts about ARIA,

00:27:28.590 --> 00:27:32.870
but true accessibility goes
beyond theory and guidelines.

00:27:32.870 --> 00:27:34.400
Accessibility can't be assumed.

00:27:35.670 --> 00:27:38.760
Do you remember the faulty ramp
from the start of our session?

00:27:39.990 --> 00:27:43.970
If the architect tested the
ramp with wheelchair users,

00:27:43.970 --> 00:27:45.440
it would have served
its purpose better.

00:27:47.070 --> 00:27:50.480
Visually everything may
seem fine and perfect,

00:27:50.480 --> 00:27:53.630
but the actual challenges come
forth only when you test them

00:27:53.630 --> 00:27:57.890
with real users, real devices
and assistive technologies.

00:27:59.330 --> 00:28:03.140
It is also worth mentioning here
that automation testing doesn't cover

00:28:03.140 --> 00:28:04.440
all the accessibility issues.

00:28:06.350 --> 00:28:09.960
Let's understand the importance of
manual and screen reader testing

00:28:09.960 --> 00:28:13.200
with the help of one example
from a personal experience.

00:28:17.230 --> 00:28:21.840
So I was following a popular example
to create accessible tablets.

00:28:21.840 --> 00:28:25.600
I copied the code and
tested it in the browser.

00:28:27.050 --> 00:28:31.000
There are three tabs, namely HTML,
CSS and JavaScript in the tab list.

00:28:32.210 --> 00:28:34.830
All the three tabs were
working fine visually

00:28:34.830 --> 00:28:36.170
until I started the screen reader.

00:28:38.590 --> 00:28:41.590
Let's check this video
to know what went wrong

00:28:41.590 --> 00:28:49.590
when I started the screen reader.

00:28:54.030 --> 00:28:59.440
[Screen Reader Voice]

00:29:06.610 --> 00:29:14.610
So even with screen readers,
everything was working fine.

00:29:17.740 --> 00:29:20.700
But when we switched
to tab 2 and tab 3,

00:29:20.700 --> 00:29:24.020
the screen reader was not reading
the content of tab panel 2

00:29:24.020 --> 00:29:25.740
and tab panel 3.

00:29:26.950 --> 00:29:34.950
When I observed the code, I realized
that the author has updated the value

00:29:36.380 --> 00:29:41.240
of native hidden attribute on
tab panel 2 and tab panel 3.

00:29:41.240 --> 00:29:44.100
But he forgot to update the
value of the ARIA attribute

00:29:44.100 --> 00:29:48.170
that says aria-hidden equal
to true on the tab panel 2

00:29:48.170 --> 00:29:49.170
and tab panel 3.

00:29:50.320 --> 00:29:55.780
So due to mishandling of aria-hidden
on tab panels, the content

00:29:55.780 --> 00:29:58.643
of tab panel 2 and tab
panel 3 remains unavailable

00:29:58.644 --> 00:29:59.990
to screen reader users.

00:30:01.210 --> 00:30:04.340
This example emphasizes the
importance of manual testing.

00:30:05.880 --> 00:30:12.190
It is imperative to check your
code with screen readers to check

00:30:12.190 --> 00:30:14.890
for correct implementation
of ARIA inside your code.

00:30:16.690 --> 00:30:20.250
Here the use of ARIA
hidden is repetitive.

00:30:20.250 --> 00:30:23.610
It's redundant because the
value of hidden attribute

00:30:23.610 --> 00:30:27.870
was already taking care of the state
of the tab panel 2 and tab panel 3.

00:30:29.310 --> 00:30:32.830
So it also iterates that do not
use ARIA, unless you have to.

00:30:34.680 --> 00:30:38.800
Now we have covered important core
concepts about some attributes.

00:30:40.020 --> 00:30:42.700
Let's move to know about
keyboard usability.

00:30:44.590 --> 00:30:47.650
So the purpose of ARIA
is to help web developers

00:30:47.650 --> 00:30:50.140
create rich web experiences.

00:30:50.140 --> 00:30:54.440
Those are usable like native
software applications.

00:30:54.440 --> 00:30:57.250
So in native software
applications, the user tabs

00:30:57.250 --> 00:31:00.760
to the complex user
interfaces or widgets

00:31:00.760 --> 00:31:03.920
and then uses arrow keys to
navigate inside that widget.

00:31:06.040 --> 00:31:10.170
So when developers use ARIA to
create rich internet applications,

00:31:10.170 --> 00:31:13.940
they should follow the primary
keyboard navigation conventions.

00:31:15.160 --> 00:31:17.380
Those are common across
all the platforms.

00:31:18.410 --> 00:31:21.980
So for composite widgets,
tabs should move focus to the widget

00:31:21.980 --> 00:31:25.090
and primarily the arrow
keys should be used

00:31:25.090 --> 00:31:29.790
to move inside the widgets that have
multiple focusable items inside it,

00:31:29.790 --> 00:31:32.090
like list boxes, tree,
menu grid, et cetera.

00:31:34.750 --> 00:31:38.605
Not following the
usability convention

00:31:38.606 --> 00:31:41.670
will leave users disorientated

00:31:41.670 --> 00:31:44.310
and it will drastically
reduce the usability.

00:31:46.750 --> 00:31:51.310
Let's jump to improper management
of focus inside composite widgets

00:31:51.310 --> 00:31:52.770
with ARIA active descendant.

00:31:55.080 --> 00:31:58.920
So there are two methods to manage
focus inside composite widgets.

00:32:00.040 --> 00:32:03.440
The first one is Roving
tabindex, and the other one

00:32:03.440 --> 00:32:07.290
is using ARIA active descendant
on the container element.

00:32:09.060 --> 00:32:12.620
Each technique gives us the ability
to navigate inside the widget

00:32:12.620 --> 00:32:13.620
with arrow keys.

00:32:15.600 --> 00:32:17.230
We will talk about
the second method.

00:32:18.390 --> 00:32:21.500
So the ARIA active descendant
on the container element

00:32:21.500 --> 00:32:26.190
tells the screen reader which item is
currently active inside the widget.

00:32:27.750 --> 00:32:30.200
It works as a spotlight
for screen reader users.

00:32:31.300 --> 00:32:33.870
So when the value of ARIA
active descendant is changed,

00:32:33.870 --> 00:32:36.540
the screen reader receives
focus change events,

00:32:36.540 --> 00:32:38.960
like if the focus has
actually been moved.

00:32:41.190 --> 00:32:44.330
Authors provide reactive descendant
on the container element,

00:32:44.330 --> 00:32:47.640
but they forgot to
update it dynamically

00:32:47.640 --> 00:32:53.470
when the user places navigation
keys like up or down arrow keys.

00:32:54.620 --> 00:32:57.310
So here as we can see in
our combo box for example,

00:32:57.310 --> 00:32:59.277
to choose a favorite food item,

00:32:59.278 --> 00:33:02.070
the currently active
item is visually seen

00:33:02.070 --> 00:33:04.240
as burger, that is option three.

00:33:05.790 --> 00:33:07.610
But the value of ARIA
active descendant

00:33:07.610 --> 00:33:13.290
on the container element says
that it is one, that it is pizza.

00:33:13.290 --> 00:33:14.600
So it has not been updated.

00:33:16.000 --> 00:33:19.270
So if the author forgets
to update it dynamically,

00:33:19.270 --> 00:33:22.690
the user will struggle to
choose the currently active item

00:33:22.690 --> 00:33:26.310
and they won't know
which item to select,

00:33:26.310 --> 00:33:28.760
because they will not
get the full information

00:33:28.760 --> 00:33:32.230
as the screen reader will
not read that information.

00:33:33.510 --> 00:33:36.310
So whenever you choose this
method for focus management,

00:33:36.310 --> 00:33:40.690
this ARIA active descendant on the
container element, use it with care.

00:33:44.620 --> 00:33:47.920
Now what can we do to
make best use of ARIA?

00:33:47.920 --> 00:33:48.920
Let's summarize.

00:33:50.610 --> 00:33:53.870
First and foremost,
never use ARIA unless you have to.

00:33:55.930 --> 00:34:00.330
Upskill yourself with the latest ARIA
specification that is currently 1.2.

00:34:01.640 --> 00:34:05.000
And use the ARIA Authoring practice
guide to learn how to use ARIA right.

00:34:06.320 --> 00:34:08.270
Use accessibility linters.

00:34:08.270 --> 00:34:11.271
Accessibility linters
are the plug-ins

00:34:11.272 --> 00:34:14.580
that report bugs in real time
when you write the code.

00:34:16.210 --> 00:34:20.590
Use automated accessibility
checkers like axe dev tool, Wave,

00:34:20.590 --> 00:34:22.920
et cetera, when you run
your code in the browser.

00:34:26.620 --> 00:34:30.570
Always test your code with
keyboard screen readers like NVDA,

00:34:30.570 --> 00:34:33.770
JAWS, talk-back,
voiceover and speech input software.

00:34:36.190 --> 00:34:39.640
While choosing themes, plug-ins,
components, libraries, frameworks,

00:34:39.640 --> 00:34:40.640
et cetera.

00:34:41.480 --> 00:34:45.500
Always take care that you check
them for their accessibility support

00:34:45.500 --> 00:34:46.500
before using them.

00:34:47.890 --> 00:34:52.420
Document the use of ARIA in your
code to make it easier for others

00:34:52.420 --> 00:34:53.960
to understand and
maintain it better.

00:34:56.070 --> 00:34:58.880
The best way to ensure
accessibility is always

00:34:58.880 --> 00:35:02.020
to involve assistive technology
users during testing.

00:35:04.970 --> 00:35:11.780
When we follow best ARIA practices
using proactive approach,

00:35:11.780 --> 00:35:16.200
we not only make our websites more
accessible, but we also save lots

00:35:16.200 --> 00:35:17.200
of resources.

00:35:19.300 --> 00:35:25.990
On the other hand, when we use
bad ARIA without understanding it,

00:35:25.990 --> 00:35:31.160
and without thoroughly testing it,
and if we ship inaccessible code

00:35:31.160 --> 00:35:33.600
in a hurry,
we accrue accessibility debt.

00:35:35.220 --> 00:35:40.990
Because fixing accessibility at
later stages may incur time, effort,

00:35:40.990 --> 00:35:41.990
and financial cost.

00:35:44.930 --> 00:35:52.930
If you are integrating open source
components, frames, plug-ins,

00:35:53.150 --> 00:35:56.680
content management systems,
or learning management systems,

00:35:56.680 --> 00:36:03.190
authoring tools, et cetera, just
imagine the difference you can make

00:36:03.190 --> 00:36:08.250
in the long run to save the cost,
time, and effort exponentially,

00:36:08.250 --> 00:36:10.400
if accessibility is
considered from day one.

00:36:12.000 --> 00:36:14.840
So let's make accessibility a
priority, not an afterthought.

00:36:14.840 --> 00:36:19.230
And do not pass over this
debt to the latest sprints.

00:36:21.660 --> 00:36:25.930
And last I would like to
say, ARIA is created

00:36:25.930 --> 00:36:28.180
to help Assisted Technology users.

00:36:28.180 --> 00:36:31.440
So ARIA should not be treated
as near code decoration,

00:36:31.440 --> 00:36:35.310
but rather as a powerful tool to
empower people with disabilities.

00:36:37.450 --> 00:36:41.720
To harness the full potential
of ARIA, use ARIA judiciously

00:36:41.720 --> 00:36:44.130
and only when necessary.

00:36:44.130 --> 00:36:47.420
Because misuse of ARIA
does more harm than good.

00:36:50.080 --> 00:36:52.540
Accessibility is a
shared responsibility.

00:36:52.540 --> 00:36:54.150
It's not one person's job.

00:36:56.740 --> 00:37:00.410
So let's join our efforts together
to make the world more inclusive

00:37:00.410 --> 00:37:01.500
and accessible for all.

00:37:02.760 --> 00:37:03.810
Because the web is for all.

00:37:05.300 --> 00:37:06.300
Thank you.

00:37:08.410 --> 00:37:09.990
Thank you for joining
me in this session.

00:37:12.780 --> 00:37:15.420
And if you have any questions,
you can ask me through chat.

00:37:16.530 --> 00:37:19.240
Or you can connect with
me later through my mail

00:37:19.240 --> 00:37:20.790
or social media connections.

00:37:22.540 --> 00:37:23.490
Thank you everyone.

00:37:26.967 --> 00:37:29.950
 RONAK: Thank you Rashmi
for the wonderful session.

00:37:29.950 --> 00:37:34.410
It was very informative to me
as well as being the developer.

00:37:37.010 --> 00:37:41.960
We have some questions and most of
them are asking for the slide text.

00:37:41.960 --> 00:37:45.330
So yes, you can post it
once you have it ready.

00:37:45.330 --> 00:37:48.520
But let us see some
other questions.

00:37:48.520 --> 00:37:53.650
So one question from the video
says, do you think the statement,

00:37:53.650 --> 00:37:58.430
the rule in using ARIA is not to
use ARIA, is still true today?

00:38:01.829 --> 00:38:04.430
 RASHMI: Sorry,
I didn't listen to you properly.

00:38:04.430 --> 00:38:08.120
 RONAK: You see in the Q&A section,
you will be able to read as well.

00:38:08.120 --> 00:38:14.050
Do you think that meant the rule
in using ARIA is not to use ARIA,

00:38:14.050 --> 00:38:15.040
is still true today?

00:38:17.333 --> 00:38:19.940
 RASHMI: Yeah,
it depends on the context, actually,

00:38:19.940 --> 00:38:23.110
if you are not having
dynamic components

00:38:23.110 --> 00:38:25.530
or you are not having
some interactive controls,

00:38:25.530 --> 00:38:28.760
then of course you can
do it without ARIA.

00:38:28.760 --> 00:38:31.870
If you are having limited
content on your pages.

00:38:33.230 --> 00:38:36.840
But if you are having rich interfaces
and having interactive controls

00:38:36.840 --> 00:38:39.690
and dynamic content, definitely
you will have to go for ARIA.

00:38:40.600 --> 00:38:41.070
 RONAK: Ok.

00:38:41.070 --> 00:38:43.940
 RASHMI: But during design
time, we can also check

00:38:43.940 --> 00:38:47.420
what components we should use, so
that we can use the minimum of ARIA.

00:38:51.433 --> 00:38:53.300
 RONAK: Thank you, Rashmi.

00:38:53.300 --> 00:38:54.300
One more question.

00:38:56.250 --> 00:39:00.620
Is it okay to still use ARIA
if alt is already available?

00:39:00.620 --> 00:39:03.550
Can they go hand in
hand or an overuse?

00:39:12.718 --> 00:39:15.469
 RASHMI: So,
if it is serving the purpose,

00:39:15.470 --> 00:39:18.060
if it's not having extra
description, then it's okay

00:39:18.060 --> 00:39:19.740
to give the alt text only.

00:39:19.740 --> 00:39:23.790
If the image is having some extra
content that you need to describe,

00:39:23.790 --> 00:39:28.420
then you can use aria-describedby
attribute with giving the details.

00:39:31.270 --> 00:39:32.233
 RONAK: Thank you.

00:39:35.170 --> 00:39:38.170
A question from Rajat
is, hello, Rashmi,

00:39:38.170 --> 00:39:41.360
is there similar content
available for Android based apps?

00:39:43.267 --> 00:39:47.090
 RASHMI: So it's basically
for supporting HTML.

00:39:47.090 --> 00:39:50.010
It's not for the native apps.

00:39:50.010 --> 00:39:53.630
So it is for supporting the web
pages that are based with HTML.

00:39:55.900 --> 00:39:56.890
 RONAK: Thank you.

00:39:56.890 --> 00:40:00.780
Let us go towards the conclusion.

00:40:00.780 --> 00:40:04.300
Let us have the last
question, Rashmi.

00:40:04.300 --> 00:40:07.170
Is there any ARIA attribute
you would absolutely not use

00:40:07.170 --> 00:40:08.710
because of poor support?

00:40:12.333 --> 00:40:16.600
 RASHMI: I think currently the
ARIA graph has been deprecated.

00:40:16.600 --> 00:40:21.600
So ARIA is looking
for another attribute

00:40:21.600 --> 00:40:23.720
to make that thing more better.

00:40:26.870 --> 00:40:31.280
 RONAK: Thank you everyone for
attending this session with Rashmi.

00:40:31.280 --> 00:40:33.440
You can continue the
conversation in the chat

00:40:33.440 --> 00:40:40.250
or on social media using
#WPA11yday and #WPAD2023.

00:40:42.000 --> 00:40:45.307
We also appreciate it if you go

00:40:45.308 --> 00:40:50.000
to the
2023.wpaccessibility.day/creditbit.

00:40:50.400 --> 00:40:54.420
I will forward the link in the
chat as well to [Inaudible 40:53]

00:40:54.420 --> 00:40:57.480
our speakers on the
presentation and you can enter

00:40:57.480 --> 00:40:59.420
to win a T-shirt
while you are there.

00:41:00.450 --> 00:41:02.861
Stay tuned for the next session,

00:41:02.862 --> 00:41:08.633
which will be sponsored
Lightning talks

00:41:08.633 --> 00:41:10.850
and you are [Inaudible 41:10]

00:41:10.850 --> 00:41:15.520
to be able to visit our sponsor
stages to grab virtual swags

00:41:15.520 --> 00:41:18.660
and enter for a chance
to win great prizes.

00:41:18.660 --> 00:41:21.240
See you right here after the break.

00:41:21.240 --> 00:41:21.560
Thank you.

00:41:22.267 --> 00:41:27.000
 AMBER: Thank you to WordPress
Accessibility Day 2023 Sponsors.

00:41:27.000 --> 00:41:29.860
Platinum Sponsor -
Equalize Digital.

00:41:29.860 --> 00:41:32.610
Equalize Digital's
accessibility checker plugin

00:41:32.610 --> 00:41:35.360
is an automated
accessibility scanning tool

00:41:35.360 --> 00:41:38.510
that helps WordPress websites
become and stay accessible.

00:41:39.810 --> 00:41:42.670
Platinum Sponsor - Gravity Forms.

00:41:42.670 --> 00:41:46.280
Gravity Forms is the professional
form builder that you need

00:41:46.280 --> 00:41:51.000
to create beautiful,
powerful and accessible forms.

00:41:51.000 --> 00:41:58.000
Gold sponsors - 20i, Deque,
Empire Caption Solutions, Pressable,

00:41:58.000 --> 00:41:59.080
and WP Engine.

00:42:00.650 --> 00:42:07.520
Silver sponsors - Code Geek, Drake
Cooper, GoDaddy, LoneRock Point,

00:42:07.520 --> 00:42:12.740
NerdPress, Overnight website by
Kinetic Iris, Rihola Networks,

00:42:14.030 --> 00:42:17.030
A11Y Collective, and The Blogsmith.

00:42:18.900 --> 00:42:24.250
Bronze sponsors - ExcessaCart,
GreenGeeks Web Hosting,

00:42:24.250 --> 00:42:32.250
Hall Analysis SEO Consulting,
HDC, ITX, Ivy Cat, Medabots,

00:42:36.070 --> 00:42:40.975
Pixel Chefs, Simply Schedule
Appointments, SiteGround,

00:42:40.976 --> 00:42:46.170
Termageddon, Underrepresented
in Tech, Weglot, and Yoast.
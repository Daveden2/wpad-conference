WEBVTT

00:00:00.984 --> 00:00:05.690
Hari Kebolehcapaian WordPress
2023, panduan munasabah

00:00:05.690 --> 00:00:09.930
kepada kebolehaksesan automatik
dengan Mark Steadman, Pengarah,

00:00:09.930 --> 00:00:13.220
Kebolehcapaian Mudah Alih di
Fidelity Investments.

00:00:13.220 --> 00:00:17.210
Pembentangan ini
dirakam pada 28 September 2023.

00:00:17.210 --> 00:00:22.500
<v Joost de Valk> Sukacita saya
memperkenalkan penceramah kami yang seterusnya,

00:00:22.500 --> 00:00:25.750
Mark Steadman, yang akan bercakap
dengan kami tentang panduan praktikal

00:00:25.750 --> 00:00:27.500
kepada kebolehcapaian automatik.

00:00:29.170 --> 00:00:32.130
Mark ialah Pengarah
Kejuruteraan Perisian untuk Kebolehcapaian Mudah Alih

00:00:32.130 --> 00:00:33.870
di Fidelity Investments.

00:00:33.870 --> 00:00:38.410
Dan dengan semangat untuk
automasi kebolehaksesan dan sokongan yang kuat

00:00:38.410 --> 00:00:42.960
untuk pembangun mengutamakan
kebolehaksesan, misi Mark sekarang adalah

00:00:42.960 --> 00:00:47.170
untuk menjadikan web dan
kandungan mudah alih boleh diakses oleh semua.

00:00:47.170 --> 00:00:51.340
Hanya misi kecil,
bukan usaha besar.

00:00:51.340 --> 00:00:55.240
Fokus utamanya bersekitaran kerjasama dengan pasukan pembangunan

00:00:55.240 --> 00:00:57.470
untuk menyepadukan kebolehcapaian,
dan ia sangat bagus.

00:00:57.470 --> 00:01:00.100
Ia seperti
penceramah ketiga yang saya perkenalkan.

00:01:00.100 --> 00:01:02.140
Kesemua mereka bekerjasama
dengan pasukan pembangunan.

00:01:02.140 --> 00:01:05.580
Saya sangat suka melihatnya.

00:01:05.580 --> 00:01:08.910
Dia menganggap itu sebagai
komponen penting dalam pembangunan berterusan

00:01:08.911 --> 00:01:13.840
Bukan sahaja dia menjadi
pelopor dalam mencipta

00:01:13.840 --> 00:01:17.850
penyelesaian kebolehaksesan automatik,
tetapi dia juga memainkan peranan penting

00:01:17.850 --> 00:01:20.600
dalam membenamkan
penyelesaian ini ke dalam fabrik

00:01:20.600 --> 00:01:23.960
para pasukan pembangunan dan
organisasi tempat dia bekerja.

00:01:23.960 --> 00:01:28.120
Sila sertai saya dalam memberi sambutan hangat kepada Mark Steadman.

00:01:28.120 --> 00:01:29.910
Mark, bawa pergi.

00:01:29.910 --> 00:01:30.960
<v Mark Steadman> Hebat.

00:01:30.960 --> 00:01:31.280
Bagus.

00:01:31.280 --> 00:01:33.600
Baiklah, bagi saya,
ia adalah pagi yang baik untuk semua orang.

00:01:33.600 --> 00:01:37.650
Sekarang pukul 6 pagi dan saya telah minum kopi, jadi
semua orang lebih baik berhati-hati sekarang

00:01:37.650 --> 00:01:42.220
kerana enjin saya berfungsi baik sebab saya mengambil jus dan kopi

00:01:42.220 --> 00:01:42.670
pada kopi.

00:01:42.670 --> 00:01:46.390
Jadi selamat pagi, selamat tengah hari, selamat
petang, apa pun tempoh masanya.

00:01:46.390 --> 00:01:47.600
Ini hebat.

00:01:47.600 --> 00:01:50.414
Bagi saya, di AS,
ini memulakan hari anda

00:01:50.415 --> 00:01:52.290
dengan kebolehcapaian automatik.

00:01:52.290 --> 00:01:56.610
Jadi saya tidak boleh lebih teruja untuk
melakukan perbincangan ini dengan anda semua hari ini.

00:01:56.610 --> 00:01:59.710
Dan semacam membuat diri kita pergi kerana terdapat banyak

00:01:59.710 --> 00:02:01.820
untuk menampung dalam masa yang singkat, yang biasanya

00:02:01.820 --> 00:02:02.680
bagaimana saya melakukan semua ceramah saya.

00:02:02.680 --> 00:02:05.880
Jadi sekali lagi, cepat sahaja,
Mark Steadman, saya hanya mahu

00:02:05.880 --> 00:02:07.350
untuk menambahkan perkara ini
ke sini dengan pantas.

00:02:07.350 --> 00:02:10.070
Jika anda mahu mengikuti saya di
Twitter atau X atau apa sahaja

00:02:10.070 --> 00:02:15.120
pada kadar ini, saya
@steady, STEADY 5063.

00:02:15.120 --> 00:02:18.630
Dan kemudian anda boleh mencari saya di
LinkedIn dengan Mark Steadman

00:02:18.630 --> 00:02:20.470
atau mark_steady sahaja jika
anda mahu mencari saya.

00:02:21.490 --> 00:02:25.370
Jadi objektif pembelajaran
untuk ceramah ini.

00:02:25.370 --> 00:02:28.350
Saya suka melakukan ini kerana
perbualan ini adalah salah satu daripada perbualan itu

00:02:28.350 --> 00:02:30.540
yang saya sangat minati.

00:02:30.540 --> 00:02:33.920
Mengapa automasi kebolehcapaian
penting dalam membina asas

00:02:33.920 --> 00:02:37.220
kebolehcapaian dalam
kitaran hayat pembangunan?

00:02:37.220 --> 00:02:38.830
Mengapa ia meningkat dalam populariti?

00:02:38.830 --> 00:02:42.210
Dan masalah yang timbul
dengan populariti itu sendiri.

00:02:42.210 --> 00:02:45.900
Cara menggunakan LinkedIn
sebagai langkah pertama dengan berkesan.

00:02:45.900 --> 00:02:47.240
Dan mengapa ia
titik permulaan yang hebat?

00:02:47.240 --> 00:02:49.692
Dan kemudian cara menggunakan perpustakaan ujian dengan berkesan

00:02:49.693 --> 00:02:50.820
dan ujian regresi

00:02:50.820 --> 00:02:53.030
untuk memastikan
kandungan boleh diakses keluar dari pintu.

00:02:53.030 --> 00:02:55.570
Sekarang, ini kelihatan seperti banyak,
tetapi apabila kita melalui ini,

00:02:55.570 --> 00:02:57.020
Saya akan terangkan
perkara ini semasa kita pergi

00:02:57.020 --> 00:03:00.460
untuk menjadikannya lebih ringkas dan mudah untuk difahami

00:03:00.460 --> 00:03:02.790
bagi mereka yang tidak
biasa dengan pasukan pembangunan,

00:03:02.790 --> 00:03:04.290
proses pembangunan.

00:03:04.290 --> 00:03:06.820
Dan juga bagi mereka yang merupakan
pemaju, mereka seperti,

00:03:06.820 --> 00:03:10.420
bagaimana saya boleh membawa ini dengan betul
untuk memasukkan kebolehaksesan

00:03:10.420 --> 00:03:11.710
sebagai sebahagian daripada
kitaran hayat pembangunan saya?

00:03:13.070 --> 00:03:16.130
Jadi kebolehcapaian dan beralih ke kiri.

00:03:16.130 --> 00:03:20.820
Untuk memahami cara automasi untuk
kebolehcapaian mencapai itu,

00:03:20.820 --> 00:03:23.160
anda perlu memahami jenis
ke mana industri itu pergi.

00:03:23.160 --> 00:03:26.240
Oleh itu, kebanyakan orang mungkin
biasa dengan ini, tetapi ia baik

00:03:26.240 --> 00:03:27.470
konteks yang baik
untuk semua orang di sini.

00:03:27.470 --> 00:03:32.440
Jadi anjakan ke kiri adalah idea
yang dipopularkan oleh industri DevOps,

00:03:32.440 --> 00:03:37.550
di mana kami berkata, Hei, lebih murah
ralatencari dan membetulkan ralat lebih awal

00:03:37.550 --> 00:03:40.370
dalam kitaran hayat pembangunan
Akal sehat.

00:03:40.370 --> 00:03:44.450
Walau bagaimanapun, untuk masa yang paling lama,
itu tidak selalu berlaku.

00:03:44.450 --> 00:03:47.260
Apa kesnya kami akan
melakukan jenis modul air terjun

00:03:47.260 --> 00:03:52.800
atau model di mana kami akan
mencipta, menolak, pergi ke pengeluaran,

00:03:52.800 --> 00:03:54.200
kemudian betulkan kandungannya selepas itu.

00:03:54.200 --> 00:03:58.280
Baiklah, industri DevOps berkata,
tidak, mari kita alihkan konteks ini ke kiri

00:03:58.280 --> 00:04:00.600
jadi kami sebenarnya boleh membetulkan
ralat lebih awal dan kos lebih murah.

00:04:00.600 --> 00:04:03.320
Jadi apa yang saya ada pada
skrin ialah imej

00:04:03.320 --> 00:04:07.470
yang pada asasnya mengatakan anda mencipta,
anda merancang, anda memantau, mengkonfigurasi,

00:04:07.470 --> 00:04:10.100
keluarkan, pakej, sahkan,
dan kemudian ia hanya gelung

00:04:10.100 --> 00:04:10.860
dalam gelung tak terhingga.

00:04:10.860 --> 00:04:12.650
Kerana pada asasnya itulah
anjakan kiri.

00:04:12.650 --> 00:04:16.180
Anda sentiasa membetulkan ralat,
sentiasa mencipta kandungan,

00:04:16.180 --> 00:04:18.840
dan ia membantu dari
sudut pandangan yang tangkas.

00:04:18.840 --> 00:04:22.900
Jadi, apabila ini mula menjadi
sangat popular, idea itu tercetus,

00:04:22.900 --> 00:04:25.980
bagaimanakah kebolehcapaian boleh
dimuatkan ke dalam model ini?

00:04:25.980 --> 00:04:29.520
Oleh kerana kebolehaksesan untuk
masa yang paling lama selalu ada,

00:04:29.520 --> 00:04:32.790
atau telah berlaku,
mari kita betulkan selepas fakta itu.

00:04:32.790 --> 00:04:35.850
Saya pasti semua orang di sini sekarang
, ia mungkin tidak begitu baik.

00:04:35.850 --> 00:04:37.180
Saya mendengarnya seribu kali.

00:04:37.180 --> 00:04:37.680
Memang benar.

00:04:37.680 --> 00:04:39.990
Sudah menjadi kenyataan
, kami akan membetulkannya kemudian.

00:04:41.220 --> 00:04:46.460
Tetapi dengan perubahan ini, kami fikir,
Hei bolehkah kami menyesuaikan diri dengan ini?

00:04:46.460 --> 00:04:49.830
Maka muncullah kebangkitan
kebolehcapaian automatik.

00:04:49.830 --> 00:04:51.650
Dan saya peminat tegar Star Wars.

00:04:51.650 --> 00:04:53.520
Saya tahu saya mempunyai perkara WordPress
di sini, tetapi jika anda boleh lihat.

00:04:53.520 --> 00:04:54.980
Saya mempunyai seribu
lightsabers di belakang saya,

00:04:54.980 --> 00:04:56.790
sekumpulan
barangan Star Wars yang berbeza.

00:04:56.790 --> 00:05:00.450
Jadi saya membuat logo ini berkata,
perang lorong, kebangkitan automasi

00:05:00.450 --> 00:05:03.770
dalam fon Star Wars, kerana
itu pada asasnya.

00:05:03.770 --> 00:05:06.640
Automasi kebolehcapaian
melonjak untuk muat dengan model ini.

00:05:06.640 --> 00:05:12.270
Segala-galanya daripada
perpustakaan kebolehaksesan, sambungan, kegunaan pembantu,

00:05:14.790 --> 00:05:17.120
anda namakannya, ada perkara tersendiri.

00:05:17.120 --> 00:05:20.522
Jadi dengan
perkara ini, kami cuba

00:05:20.523 --> 00:05:23.400
untuk membetulkan seberapa banyak jurang yang mungkin.

00:05:23.400 --> 00:05:26.230
Jadi dengan semua
bahasa pembangunan yang berbeza, rangka kerja,

00:05:26.230 --> 00:05:29.500
semua itu, kami cuba menyesuaikan
model ini supaya kami dapat

00:05:29.500 --> 00:05:32.850
sebanyak
mungkin kebolehcapaian automatik ke dalam proses tersebut.

00:05:32.850 --> 00:05:36.390
Dan di atas kertas, ia kelihatan hebat.

00:05:36.390 --> 00:05:39.070
Jadi terdapat
faedah besar untuk ini.

00:05:39.070 --> 00:05:41.520
yang mudah dan pantas

00:05:41.520 --> 00:05:42.720
ke dalam kitaran hayat pembangunan.

00:05:42.720 --> 00:05:43.940
Adakah ia sempurna?

00:05:43.940 --> 00:05:44.930
Sama sekali tidak.

00:05:44.930 --> 00:05:47.610
Tidak, ia hanya
jumlah minimum atau jumlah kecil,

00:05:47.610 --> 00:05:49.460
mungkin sepertiga bawah
isu boleh diakses.

00:05:49.460 --> 00:05:53.460
Walau bagaimanapun, ia sangat sesuai
dengan apa jua perkara proses yang tangkas

00:05:53.460 --> 00:05:55.080
yang kami lakukan untuk kebolehaksesan.

00:05:55.080 --> 00:05:58.360
Jadi ia adalah kemenangan yang mudah
kerana tiada hujah

00:05:58.360 --> 00:05:59.840
dari pihak pembangun.

00:05:59.840 --> 00:06:02.560
Saya cuma cakap, Hei, kita kena
tambah ini, dan ia sesuai

00:06:02.560 --> 00:06:04.310
ke dalam sistem yang kami lakukan.

00:06:04.310 --> 00:06:06.970
Ia membantu membina
pengetahuan pembangun tentang kebolehaksesan.

00:06:06.970 --> 00:06:09.440
Jadi kebanyakan alatan automatik datang
dengan item pengetahuan mereka sendiri

00:06:09.440 --> 00:06:11.520
atau pautkan anda kepada item pengetahuan
untuk membantu anda menyelesaikannya.

00:06:12.540 --> 00:06:15.310
Percaya atau tidak, ia menguatkuasakan
amalan pengekodan UI yang baik.

00:06:15.310 --> 00:06:19.970
Jika saya dapat melihat semua orang di sini dan
melihat anda semua di skrin sekarang,

00:06:19.970 --> 00:06:22.690
semua orang akan menundukkan
kepala apabila saya berkata, "beri sup

00:06:22.690 --> 00:06:23.690
tidak bagus."

00:06:24.650 --> 00:06:27.720
Jadi ini sebenarnya membantu menguatkuasakan
amalan pengekodan UI yang baik.

00:06:29.100 --> 00:06:30.950
Ia membenarkan
penguatkuasaan yang boleh diakses supaya anda boleh menggunakan

00:06:30.950 --> 00:06:36.370
Saluran paip GitHub Actions,
dan ia mula membina budaya

00:06:36.370 --> 00:06:37.560
yang termasuk kebolehaksesan.

00:06:37.560 --> 00:06:40.480
Anda akan mendengar saya mengatakan ini
berulang kali dalam ceramah ini.

00:06:40.480 --> 00:06:42.026
Itulah bahagian terbesar

00:06:42.027 --> 00:06:44.810
dengan mendapatkan
kebolehaksesan automatik dengan betul.

00:06:44.810 --> 00:06:48.220
Anda silap, anda kehilangan orang
dengan cepat, tetapi apabila anda melakukannya dengan betul,

00:06:48.220 --> 00:06:51.160
ia membantu menetapkan asas itu
untuk membina budaya

00:06:51.160 --> 00:06:53.840
kebolehaksesan dari semasa ke semasa.

00:06:53.840 --> 00:06:54.850
Itulah matlamat utama.

00:06:54.850 --> 00:06:58.380
Ya, automasi adalah
titik permulaan, tetapi anda boleh membantu menyemai itu

00:06:58.380 --> 00:07:00.900
ke dalam budaya anda dari
sisi pembangunan perkara dengan mudah

00:07:00.900 --> 00:07:02.440
jika anda melakukannya dengan betul.

00:07:02.440 --> 00:07:05.080
Jika anda melakukan kesalahan, anda boleh
kehilangan orang dengan cepat,

00:07:05.080 --> 00:07:07.690
tetapi itulah faedah besar
daripada kebolehcapaian automatik.

00:07:07.690 --> 00:07:09.700
Jadi anda berkata kepada
diri sendiri, Mark, itu bagus.

00:07:09.700 --> 00:07:10.380
Apa masalahnya?

00:07:10.380 --> 00:07:13.410
Kenapa saya di sini bercakap dengan awak
semua sekarang? Apa masalahnya?

00:07:14.800 --> 00:07:15.650
Nah, ini masalah besar.

00:07:15.650 --> 00:07:17.980
Ia menjadi beban automasi.

00:07:17.980 --> 00:07:20.320
Apa yang saya ada pada skrin hanyalah
sekumpulan logo yang berbeza

00:07:20.320 --> 00:07:22.820
untuk sekumpulan sambungan berbeza
yang melakukan banyak perkara berbeza,

00:07:22.820 --> 00:07:25.490
tetapi secara holistik
mereka melakukan perkara yang sama.

00:07:25.490 --> 00:07:28.740
Mereka menyemak
isu kebolehaksesan secara automatik.

00:07:30.450 --> 00:07:31.610
Inilah yang berlaku.

00:07:31.610 --> 00:07:36.960
Kami terlalu teruja untuk membuat
banyak automasi,

00:07:36.960 --> 00:07:38.970
sesuai dengan kitaran hayat ini,
sesuai dengan produk ini,

00:07:38.970 --> 00:07:43.170
dan apa yang akhirnya berlaku
ialah kami mengalami lebihan beban.

00:07:43.170 --> 00:07:46.010
Dan pembangun di mana-mana yang
saya akan bercakap dengan, setiap pasukan

00:07:46.010 --> 00:07:50.080
yang saya cakap akan pergi,
Dari mana saya nak mulakan?

00:07:50.080 --> 00:07:51.560
Kerana saya tidak tahu.

00:07:51.560 --> 00:07:52.770
Terdapat banyak perkara di luar sana.

00:07:52.770 --> 00:07:53.760
Saya tidak tahu apa yang hendak digunakan.

00:07:53.760 --> 00:07:54.530
Apa yang terbaik?

00:07:54.530 --> 00:07:56.930
Bagaimanakah ia sesuai dengan pasukan saya?
Walauapapun.

00:07:56.930 --> 00:07:59.580
Jadi, kami mempunyai beberapa
perpustakaan kebolehcapaian sumber terbuka,

00:07:59.580 --> 00:08:03.360
sebahagian yang boleh diingati, axe-core,
PA11y, sambungan pelayar, WAVE,

00:08:03.360 --> 00:08:06.740
Lighthouse, Microsoft Insights,
perkakasan kebolehcapaian, betul?

00:08:06.740 --> 00:08:10.710
Terdapat banyak "linter",
yang mula menambah peraturan kebolehaksesan

00:08:10.710 --> 00:08:14.610
dan semua orang berkata, ada
ESLint, Axe-linter, ada ASLint,

00:08:14.610 --> 00:08:16.190
terdapat pelbagai
yang berbeza di luar sana.

00:08:16.190 --> 00:08:20.750
Dan sebagai pembangun,
semua orang melihat ini dan pergi,

00:08:20.750 --> 00:08:22.030
Mengapa ada begitu banyak?

00:08:22.030 --> 00:08:24.070
Saya pun tak tahu nak mula dari mana.

00:08:24.070 --> 00:08:27.060
Kerana walaupun bagi
kebanyakan kita yang mendengar

00:08:27.060 --> 00:08:29.490
pada masa ini mungkin
penyokong kebolehaksesan dan pergi,

00:08:29.490 --> 00:08:32.130
sudah jelas, pilih sahaja
yang sesuai dengan barangan anda dan pergi.

00:08:32.130 --> 00:08:33.900
Ia tidak begitu jelas bagi
seseorang yang tidak tahu banyak

00:08:33.900 --> 00:08:34.730
tentang kebolehcapaian.

00:08:34.730 --> 00:08:38.140
Jadi mereka akan melihatnya dan berkata,
Ini terlalu banyak, saya keluar.

00:08:38.140 --> 00:08:40.720
Berapa kali saya mendengar
seseorang berkata, "Ini terlalu banyak?

00:08:40.720 --> 00:08:43.190
Saya pun tak tahu nak
mula dari mana, saya hanya berputus asa.

00:08:43.190 --> 00:08:45.320
Memang banyak, percaya atau tidak.

00:08:45.320 --> 00:08:50.110
Jadi kita perlu mengambil
pendekatan yang berbeza untuk dapat

00:08:50.110 --> 00:08:55.920
untuk menangani bebanan dan
pandangan keruh yang kita ada di luar sana

00:08:55.920 --> 00:08:59.200
untuk pembangun bahawa
kebolehaksesan adalah terlalu banyak.

00:08:59.200 --> 00:09:01.250
Kebolehcapaian automatik
terlalu banyak.

00:09:01.250 --> 00:09:03.840
Jadi apakah penyelesaiannya?

00:09:03.841 --> 00:09:05.100
Betul?

00:09:05.100 --> 00:09:06.990
Anda berada dalam pendekatan praktikal
untuk kebolehcapaian automatik

00:09:06.990 --> 00:09:08.220
jadi Mark beritahu saya penyelesaiannya.

00:09:09.370 --> 00:09:10.560
Ia sedang berperingkat automasi.

00:09:11.770 --> 00:09:16.170
Saya bertuah banyak kerana melakukan ini,

00:09:16.170 --> 00:09:19.370
dan mempunyai beberapa kes penggunaan yang sangat baik
untuk melakukan ini dan memastikan

00:09:19.370 --> 00:09:20.480
yang kita dapat.

00:09:20.480 --> 00:09:26.160
Perkara yang paling penting ialah
meningkatkan automasi yang betul.

00:09:26.160 --> 00:09:31.450
serta berjalan lancar melakukannya dengan betul dan bunyinya agak kelakar,

00:09:31.450 --> 00:09:35.700
tetapi apabila ia melibatkan fasa
automasi, anda mungkin melihat perkara ini

00:09:35.700 --> 00:09:38.140
dan katakan, Mark, ini mengambil masa terlalu lama.

00:09:38.140 --> 00:09:39.150
Ya, awak betul.

00:09:39.150 --> 00:09:40.410
Ia mengambil sedikit masa.

00:09:40.410 --> 00:09:44.950
Tetapi jika anda melakukannya dengan betul, ia kekal dan kekal dalam organisasi anda, betul?

00:09:44.950 --> 00:09:46.550
dalam pasukan pembangun anda.

00:09:46.550 --> 00:09:50.310
Jadi fasa masuk memastikan bahawa
beban pembangun tidak berlaku

00:09:50.311 --> 00:09:51.450
Betul?

00:09:51.450 --> 00:09:55.340
dan kami membina strategi di sekeliling
yang merupakan sebahagian daripada bahagian berperingkat

00:09:55.340 --> 00:09:56.190
juga.

00:09:56.190 --> 00:10:00.170
Jadi ia pada asasnya tiga
fasa dengan fasa sifar.

00:10:00.170 --> 00:10:03.310
Fasa satu adalah linting, fasa dua
ialah perkakasan ujian automatik,

00:10:03.310 --> 00:10:07.880
fasa tiga ialah ujian regresi automatik
dan fasa sifar ialah sambungan.

00:10:07.880 --> 00:10:10.710
Sekarang saya akan sampai ke fasa sifar itu dan mengapa saya memanggilnya fasa sifar menjelang penghujung

00:10:10.710 --> 00:10:14.200
semasa kita pergi, tetapi mari kita
selami kerana ini

00:10:14.200 --> 00:10:18.100
di mana ia menjadi sangat berisi dan hebat.

00:10:18.100 --> 00:10:20.120
Fasa satu, Linting.

00:10:20.120 --> 00:10:22.400
Bagi anda yang tidak
tahu, linter adalah alat

00:10:22.400 --> 00:10:27.440
yang menganalisis kod sumber secara statik untuk menandakan ralat pengaturcaraan dan ralat.

00:10:27.440 --> 00:10:31.360
Jadi semasa saya membangunkan kandungan
Ia akan menunjukkan kepada saya ralat

00:10:31.360 --> 00:10:35.020
yang saya buat
secara statik dalam HTML saya.

00:10:35.020 --> 00:10:37.880
Sesetengah orang menggunakannya untuk
JavaScript, Java,

00:10:37.880 --> 00:10:39.890
terdapat pelbagai
alat linting berbeza yang ada di luar sana

00:10:39.890 --> 00:10:41.410
untuk pelbagai perkara.

00:10:41.410 --> 00:10:44.260
Tetapi ia adalah
penganalisis statik untuk kod.

00:10:44.261 --> 00:10:45.460
Betul?

00:10:45.460 --> 00:10:47.880
Faedah linting yang boleh diakses.

00:10:47.880 --> 00:10:50.510
Anda boleh mengetahui
isu kebolehaksesan lebih awal.

00:10:51.550 --> 00:10:54.200
Anda membina
pengetahuan kebolehaksesan untuk pembangun anda

00:10:54.200 --> 00:10:56.440
semasa mereka berkembang,
bukannya kemudian.

00:10:56.440 --> 00:10:59.520
Ia membenarkan pasukan membina
pintu boleh diakses atas komitmen.

00:10:59.520 --> 00:11:03.950
Apa yang saya maksudkan dengan itu ialah, katakan
saya sedang membangun bersama rakan sepasukan saya,

00:11:03.950 --> 00:11:07.890
Saya membangunkan kod, saya menolaknya, saya dapat melihat ralat Linting saya

00:11:07.890 --> 00:11:10.720
dan saya perlu kembali dan membetulkannya, sebelum saya dibenarkan

00:11:10.720 --> 00:11:12.740
untuk menolak kod itu di sana.

00:11:12.740 --> 00:11:17.030
Dan bahagian yang sangat menyebalkan tentang
"linting" ialah ia boleh disesuaikan

00:11:17.030 --> 00:11:19.090
kepada rangka kerja
yang sedang anda bangunkan.

00:11:19.090 --> 00:11:20.800
Itulah
sebab nombor satu mengapa ia berfungsi.

00:11:20.800 --> 00:11:25.120
Sekarang, yang terbesar ialah
bahagian terakhir di sana, menyesuaikan

00:11:25.120 --> 00:11:27.440
kepada rangka kerja
yang sedang anda bangunkan.

00:11:27.440 --> 00:11:28.670
Itulah bahagian yang sangat menarik.

00:11:28.670 --> 00:11:30.650
Apabila anda mula menyusun ini, anda boleh memikirkan

00:11:30.650 --> 00:11:37.140
apa yang pasukan anda gunakan,
jika mereka menggunakan React, Angular, Vue? Betul?

00:11:37.140 --> 00:11:40.290
Atau mana-mana jenis bahagian lain,
anda boleh menggunakan ini sepanjang perjalanan.

00:11:40.290 --> 00:11:44.000
Dan apa yang mengagumkan ialah
semasa saya membina dengan "Linting",

00:11:44.000 --> 00:11:45.730
Saya dapat mencari "Linter"
yang sesuai dengan itu,

00:11:45.730 --> 00:11:47.550
dan saya jamin anda
mempunyai peraturan kebolehaksesan.

00:11:47.550 --> 00:11:52.050
Saya akan demonstrasikan kepada anda
semua kerana ini bahagiannya

00:11:52.050 --> 00:11:52.710
yang paling saya suka.

00:11:52.710 --> 00:11:57.840
Saya akan pergi ke
demo "Linting" kami di sini secara pantas.

00:11:57.840 --> 00:12:03.060
Biar saya ke sini, itulah.

00:12:03.060 --> 00:12:04.060
Baiklah.

00:12:04.061 --> 00:12:04.970
Jadi.

00:12:04.970 --> 00:12:08.750
Apa yang saya ada di sini ialah saya mempunyai
projek React saya yang indah.

00:12:08.750 --> 00:12:11.160
Saya perlu memberikan latar belakangnya
kerana ini projek kegemaran saya

00:12:11.160 --> 00:12:12.190
sepanjang masa.

00:12:12.190 --> 00:12:14.160
Ini ialah emporium lightsaber.

00:12:14.160 --> 00:12:16.260
Jadi anda membeli lightsabers dari laman.

00:12:16.260 --> 00:12:19.390
Jadi projek React ini
saya gunakan untuk semua orang

00:12:19.390 --> 00:12:21.330
pembentangan saya
yang saya buat beberapa tahun lalu.

00:12:21.330 --> 00:12:22.700
Ia bagus di sini.

00:12:22.700 --> 00:12:27.590
Tetapi dalam projek ini, saya mempunyai satu
komponen, iaitu barang troli.

00:12:27.590 --> 00:12:30.740
Jadi ia hanyalah item yang
pada asasnya mempunyai imej.

00:12:30.740 --> 00:12:34.210
Ia mempunyai tajuk untuk menerangkan
apakah produk sebenar,

00:12:34.210 --> 00:12:35.110
sedikit penerangan.

00:12:35.110 --> 00:12:39.680
Dan kemudian bolehkah saya menambah pautan butiran atau bolehkah saya membelinya semula? Betul?

00:12:39.680 --> 00:12:40.480
Itu sahaja.

00:12:40.480 --> 00:12:41.170
Pautan mudah.

00:12:41.170 --> 00:12:43.820
Fikir seperti barang troli Amazon
di mana dari kiri ke kanan,

00:12:43.820 --> 00:12:48.750
ia adalah perihalan imej dan kemudian
butang di bahagian paling kanan.

00:12:48.750 --> 00:12:55.630
Dalam ini, sekarang, ini menggunakan React, saya sebenarnya menggunakan JSX a11y Linter.

00:12:55.631 --> 00:12:57.110
Okey?

00:12:57.110 --> 00:13:00.560
Linter ini secara khusus mempunyai
peraturan kebolehaksesan untuk ESLint.

00:13:01.680 --> 00:13:04.580
ESLint mungkin salah satu
Linters paling terkenal

00:13:04.580 --> 00:13:06.760
yang wujud di luar sana sekarang.

00:13:06.760 --> 00:13:09.990
Dalam hal ini, ia mempunyai subset
peraturan untuk kebolehaksesan.

00:13:09.990 --> 00:13:13.740
Jadi katakan saya pembangun
pada komponen item troli ini,

00:13:13.740 --> 00:13:16.600
jika saya melihat skrin ini sekarang, apa yang saya ada ialah,

00:13:16.600 --> 00:13:21.120
Saya mempunyai beberapa
garisan berlekuk merah di beberapa tempat yang berbeza.

00:13:21.120 --> 00:13:25.270
Jadi pada baris 11 di sini, saya mempunyai div
yang merupakan bekas imej yang

00:13:25.270 --> 00:13:28.060
atas sebab tertentu pembangun ini
mahu menyembunyikan sesuatu.

00:13:28.060 --> 00:13:29.180
Tetapi mereka tidak kelihatan begitu baik.

00:13:29.180 --> 00:13:31.720
Jadi mereka berkata aria-sembunyi sama dengan benar.

00:13:31.720 --> 00:13:33.060
Ya, aria-hide tidak benar.

00:13:33.060 --> 00:13:36.810
Jadi jika saya benar-benar berlegar di atas
ini, ia akan berkata aria-hide.

00:13:36.810 --> 00:13:38.030
Ini bukan atribut.

00:13:38.030 --> 00:13:39.360
Ini ialah atribut aria yang sah.

00:13:39.360 --> 00:13:41.500
Adakah anda bermaksud menggunakan
"aria-hidden" atau "aria-live"?

00:13:41.500 --> 00:13:43.060
Dan ia akan memberitahu anda perkara itu.

00:13:43.060 --> 00:13:45.230
Jadi apa yang menarik ialah,
sekarang jika saya seorang pemaju

00:13:45.230 --> 00:13:48.030
yang tidak benar-benar tahu apa-apa, dan
katakan saya melakukan limpahan timbunan yang buruk

00:13:48.030 --> 00:13:53.340
carian, saya boleh menukar ini
kepada aria-tersembunyi dan voila,

00:13:53.340 --> 00:13:54.340
talian berlekuk-lekuk hilang.

00:13:55.400 --> 00:13:57.600
Itu adalah linting semasa saya melakukannya.

00:13:57.600 --> 00:14:00.540
Imej ini,
saya kehilangan atribut alt.

00:14:00.540 --> 00:14:02.960
Ini akan memberitahu saya imej mesti
mempunyai atribut alt yang betul

00:14:02.960 --> 00:14:05.460
dengan teks yang bermakna atau aliran kosong
untuk imej hiasan.

00:14:05.460 --> 00:14:08.970
Jadi, dalam kes ini di sini, saya akan
meneka maksud orang ini

00:14:08.970 --> 00:14:10.700
untuk menyembunyikan ini sebagai alt imej.

00:14:10.700 --> 00:14:13.200
Jadi kami hanya akan memberikan alt dan
semua, garisan berlekuk-lekuk sudah tiada.

00:14:14.300 --> 00:14:17.370
Malah seperti yang saya katakan
menguatkuasakan amalan pengekodan yang baik.

00:14:18.660 --> 00:14:19.780
Saya menggunakan sauh.

00:14:19.780 --> 00:14:23.270
Atribut href diperlukan agar
sauh boleh diakses papan kekunci.

00:14:23.270 --> 00:14:26.300
Hai, berapa banyak sauh yang wujud
di alam liar sekarang

00:14:26.300 --> 00:14:29.490
yang pada asasnya adalah sauh
yang tidak mempunyai href padanya.

00:14:29.490 --> 00:14:32.430
Jadi ia tidak boleh diakses papan kekunci
atas sebab tertentu untuk mengklik acara

00:14:32.430 --> 00:14:32.880
daripada href.

00:14:32.880 --> 00:14:33.070
Mengapa?

00:14:33.070 --> 00:14:34.560
Saya tidak tahu.

00:14:35.760 --> 00:14:39.230
Saya hanya boleh menambah href itu
sendiri ke mana ia perlu pergi. Betul?

00:14:40.520 --> 00:14:43.400
Jadi di sini href adalah sama dan kemudian
saya hanya boleh mengatakan butiran.

00:14:47.680 --> 00:14:49.330
Dan voila, selesai.

00:14:50.540 --> 00:14:51.330
Itu sahaja.

00:14:51.330 --> 00:14:52.730
Itu merupakan "linting".

00:14:52.730 --> 00:14:55.000
Semudah itu.

00:14:55.000 --> 00:14:59.410
Ia adalah yang paling mudah apabila anda
boleh dapatkan untuk pasukan pembangunan.

00:14:59.410 --> 00:15:01.670
Dan sememangnya ia semudah itu.

00:15:01.670 --> 00:15:02.030
Ya.

00:15:02.030 --> 00:15:03.170
Anda mungkin melihat dan
berkata, Mark,

00:15:03.170 --> 00:15:04.870
Ini adalah isu yang sangat mudah.

00:15:04.870 --> 00:15:05.660
Biar saya beritahu anda ini.

00:15:05.660 --> 00:15:09.530
Tinjauan juta WebAIM
memberitahu saya bahawa semua perkara

00:15:09.530 --> 00:15:12.830
yang kita bincangkan, setakat
kesederhanaan, rasa apa?

00:15:12.830 --> 00:15:15.900
Terdapat banyak isu mudah
yang keluar dalam pengeluaran sekarang.

00:15:15.900 --> 00:15:17.690
Ia wujud di halaman utama
di merata-rata tempat.

00:15:17.690 --> 00:15:19.020
Jadi teka apa?

00:15:19.020 --> 00:15:20.790
"Linting" boleh membetulkan
isu mudah itu.

00:15:20.790 --> 00:15:23.040
Jika kita mendapatkan yang betul
, ia boleh membetulkan isu tersebut.

00:15:23.040 --> 00:15:25.770
Dan jadi itu benar-benar
"linting" secara ringkas.

00:15:25.770 --> 00:15:27.699
Sangat-sangat mudah, secara terus

00:15:27.700 --> 00:15:28.820
untuk digabungkan dengannya.

00:15:29.830 --> 00:15:32.980
Dan terdapat banyak
perkara yang baik untuk dilakukan bersamanya.

00:15:32.980 --> 00:15:35.090
Terdapat beberapa amalan terbaik
yang berkaitan dengan linting juga.

00:15:35.090 --> 00:15:38.150
Jadi mencari perpustakaan yang
berfungsi dengan timbunan teknologi anda,

00:15:38.150 --> 00:15:41.320
seperti yang saya katakan sebelum ini ESLint
adalah yang paling popular.

00:15:41.320 --> 00:15:44.660
Ia mempunyai paling banyak integrasi
yang wujud di sana.

00:15:44.660 --> 00:15:45.610
Jadi anda boleh tarik mereka masuk.

00:15:45.610 --> 00:15:47.280
Ia mempunyai
perpustakaan kebolehaksesan secara khusus

00:15:47.280 --> 00:15:49.530
untuk sebarang rangka kerja
yang anda gunakan.

00:15:49.530 --> 00:15:51.550
Cari set peraturan yang konsisten.

00:15:51.550 --> 00:15:55.440
Apa yang menarik tentang ini ialah kebanyakan
perpustakaan sumber terbuka berpasangan

00:15:55.440 --> 00:15:58.320
teras kapak kerana ia adalah
perpustakaan paling popular di luar sana.

00:15:58.320 --> 00:16:00.550
Jadi jika pasukan anda
memutuskan untuk menggunakan teras kapak,

00:16:00.550 --> 00:16:02.900
anda boleh menggunakan linter kapak juga.

00:16:02.900 --> 00:16:04.190
Tiada masalah
dengan itu.

00:16:04.190 --> 00:16:04.540
Cemerlang.

00:16:04.540 --> 00:16:05.440
Memang hebat.

00:16:05.440 --> 00:16:09.280
Tetapi JSX a11y menggunakan beberapa
peraturan teras kapak dengannya juga.

00:16:09.280 --> 00:16:11.420
Jadi konsistensi adalah kunci
kerana anda tidak mahu

00:16:11.420 --> 00:16:13.850
untuk
menjalankan beberapa set peraturan yang berbeza

00:16:13.850 --> 00:16:15.390
ke tempat pembangun, saya tidak faham

00:16:15.390 --> 00:16:18.960
mengapa ini menjadi isu di sini
dan bukan isu di sini. Betul?

00:16:18.960 --> 00:16:21.430
Jadi konsistensi adalah kuncinya.

00:16:21.430 --> 00:16:23.140
Satu lagi amalan terbaik adalah

00:16:23.140 --> 00:16:24.800
paksa "linting" atas komitmen.

00:16:24.800 --> 00:16:25.910
Dan kemudian bina peraturan anda sendiri.

00:16:25.910 --> 00:16:26.940
Saya tidak boleh menekankan perkara ini cukup.

00:16:26.940 --> 00:16:29.340
Anda boleh membina peraturan anda sendiri, percaya atau tidak.

00:16:29.340 --> 00:16:32.500
Anda boleh membina peraturan anda sendiri,
menambahnya ke dalam "linting" dan semak

00:16:32.500 --> 00:16:36.060
untuk perkara yang pasukan pembangun anda
atau organisasi anda ingin periksa.

00:16:36.060 --> 00:16:37.840
Ia sangat, sangat mudah.

00:16:37.840 --> 00:16:41.180
Jadi anda boleh pergi lebih jauh dengan itu. Betul?

00:16:41.180 --> 00:16:42.370
Jadi itu "linting".

00:16:42.370 --> 00:16:43.480
Fasa satu.

00:16:43.480 --> 00:16:48.340
Dan sekali lagi, izinkan saya mengulangi semua
fasa ini mengambil masa yang lama.

00:16:48.340 --> 00:16:52.420
Ini tidak bermakna, fasa
pertama ialah pecut. Sama sekali tidak.

00:16:52.420 --> 00:16:55.720
Boleh jadi, fasa satu
mengambil masa tiga bulan untuk bangun

00:16:55.720 --> 00:16:58.150
dan berjalan dengan baik dengan semua
perkara yang kita bincangkan di sini

00:16:58.150 --> 00:17:00.010
untuk amalan terbaik dan
mungkin beberapa perkara berbeza

00:17:00.010 --> 00:17:02.810
organisasi atau pasukan pembangun anda .

00:17:02.810 --> 00:17:04.290
Ia mungkin mengambil masa.

00:17:04.290 --> 00:17:05.540
Tidak mengapa.

00:17:05.540 --> 00:17:06.900
Biarkan ia mengambil masa.

00:17:06.900 --> 00:17:10.860
Kami mahu ia mengambil masa kerana
kami perlu memperbaikinya, OK?

00:17:10.860 --> 00:17:14.360
Jadi apabila fasa satu selesai,
kita melompat ke fasa dua,

00:17:14.360 --> 00:17:16.310
iaitu
perpustakaan kebolehaksesan automatik.

00:17:16.310 --> 00:17:19.480
Dan kebanyakan orang yang di sini
mungkin pembangun

00:17:19.480 --> 00:17:22.700
atau sedang melakukan beberapa ujian sebenar
atau membina perpustakaan ujian

00:17:22.700 --> 00:17:25.300
mungkin biasa dengan beberapa
perpustakaan kebolehcapaian automatik

00:17:25.300 --> 00:17:26.300
yang memang wujud.

00:17:27.560 --> 00:17:30.560
kebolehcapaian automatik
telah dibina dalam semakan

00:17:30.560 --> 00:17:33.760
yang mengimbas kandungan UI anda
untuk isu kebolehaksesan.

00:17:33.760 --> 00:17:38.590
Jadi sebagai contoh, jika saya mempunyai
projek pemacu web Selenium

00:17:38.590 --> 00:17:41.260
atau projek Puppeteer – anda boleh menamakan sebarang jenis

00:17:41.260 --> 00:17:45.310
pemacu berbeza yang anda gunakan – saya boleh menambah perpustakaan itu.

00:17:45.310 --> 00:17:47.180
Ia dikaitkan dengan
rangka kerja ujian yang saya gunakan.

00:17:47.180 --> 00:17:51.980
Dan saya membuat kes ujian yang menyemak
untuk melihat sama ada terdapat sebarang isu

00:17:51.980 --> 00:17:54.980
dalam halaman atau
kandungan yang saya imbas.

00:17:54.980 --> 00:17:56.770
Sekali lagi, ini pemeriksaan secara umum.

00:17:56.770 --> 00:17:59.490
Ia bukan apa-apa yang
secara khusus akan masuk

00:17:59.490 --> 00:18:02.670
dan tukar kandungan anda,
seperti buka, kembang, dan kuncupkan bahagian,

00:18:02.670 --> 00:18:04.830
lakukan sebarang jenis tindakan yang boleh diakses.

00:18:04.830 --> 00:18:06.250
Ia hanya akan
mengimbas kandungan anda secara umum.

00:18:06.250 --> 00:18:09.590
Kini, ia menjadi lebih daripada
linting kerana ia boleh melakukan lebih banyak

00:18:09.590 --> 00:18:12.420
daripada sekadar analisis statik
kerana halaman yang diberikan sepenuhnya

00:18:12.420 --> 00:18:15.560
atau komponen yang diberikan sepenuhnya
akan berlaku pada masa itu.

00:18:15.560 --> 00:18:20.230
Tetapi faedah perpustakaan ini
ialah set peraturan yang konsisten.

00:18:20.230 --> 00:18:21.220
Itulah perkara yang paling besar.

00:18:21.220 --> 00:18:24.800
Ia adalah satu set
peraturan yang konsisten berulang kali

00:18:24.800 --> 00:18:25.840
pada kandungan itu.

00:18:25.840 --> 00:18:31.290
Jadi jika saya membuat kes ujian atau dua
kes ujian, satu untuk halaman utama saya

00:18:31.290 --> 00:18:34.780
dan satu untuk halaman log masuk saya,
set peraturan yang sama sedang dijalankan

00:18:34.780 --> 00:18:35.420
pada kedua-duanya.

00:18:35.420 --> 00:18:39.240
Jadi saya mendapat hasil yang konsisten
dan imbasan yang konsisten dengan itu.

00:18:39.240 --> 00:18:42.160
Saya boleh membina pintu pagar semula,
yang bagus apabila saya sebut pintu pagar,

00:18:42.160 --> 00:18:46.940
apabila saya menolak kod,
katakan PR ke dalam GitHub

00:18:46.940 --> 00:18:51.510
atau saya menghantar kod untuk semakan kod
atau saya menghantarnya ke pengeluaran.

00:18:51.510 --> 00:18:53.100
Saya boleh meletakkan pintu pagar di atasnya
dan mengatakan saya menjangka di sana

00:18:53.100 --> 00:18:55.030
menjadi tiada pelanggaran kebolehaksesan.

00:18:55.030 --> 00:18:59.600
Dan ia cepat dan mudah untuk ditambahkan ke dalam
struktur ujian UI semasa.

00:19:00.940 --> 00:19:02.680
Anda mungkin berkata, Baiklah,
Mark, awak kata ia cepat dan mudah

00:19:02.680 --> 00:19:04.630
kerana linting terlalu
linting adalah lebih pantas.

00:19:04.630 --> 00:19:11.290
Ini masih mudah untuk ditambahkan
ke dalam proses ujian UI.

00:19:11.290 --> 00:19:14.150
Perbezaannya ialah apabila anda
melakukan ini, ia memerlukan sedikit masa.

00:19:14.150 --> 00:19:15.890
kerja untuk menetapkan ini
pada mulanya, iaitu

00:19:15.890 --> 00:19:19.140
di mana beberapa penolakan akan
berlaku, jika anda semua pernah sampai ke perkara ini.

00:19:19.140 --> 00:19:20.370
Nah, ini akan mengambil masa.

00:19:20.370 --> 00:19:21.340
Ia akan.

00:19:21.340 --> 00:19:25.440
Tetapi saya akan menunjukkan kepada anda betapa
mudahnya untuk menyediakan ini

00:19:25.440 --> 00:19:28.760
dengan cara yang boleh diulang
dan ia agak mudah

00:19:28.760 --> 00:19:29.290
untuk dibina.

00:19:29.290 --> 00:19:30.060
OK.

00:19:30.060 --> 00:19:36.690
Jadi saya akan kembali ke
bahagian emporium lightsaber saya yang cantik.

00:19:36.690 --> 00:19:42.223
Dan apa yang saya akan lakukan
ialah saya sebenarnya akan pergi

00:19:42.224 --> 00:19:44.520
ke dalam salah satu spesifikasi saya.

00:19:44.520 --> 00:19:45.910
Jadi spesifikasi ini ialah kes ujian saya di sini.

00:19:46.970 --> 00:19:51.550
Spesifikasi pertama saya yang ada di sini sebenarnya
hanya menguji... Sebenarnya, kita pergi

00:19:51.550 --> 00:19:55.880
dalam spesifikasi pengaki saya Ia sebenarnya
hanya menguji komponen pengaki saya

00:19:55.880 --> 00:19:57.680
untuk permohonan saya. Betul?

00:19:57.680 --> 00:20:00.210
Kebolehcapaian ini boleh berfungsi

00:20:00.210 --> 00:20:01.030
pada pelbagai peringkat.

00:20:01.030 --> 00:20:04.420
Ia boleh berfungsi dalam ujian unit,
yang akan menjadi seperti setiap komponen,

00:20:04.420 --> 00:20:06.106
atau boleh bekerja dalam
ujian tahap integrasi,

00:20:06.107 --> 00:20:08.740
iaitu segala-galanya disatukan
pada skrin. Betul?

00:20:08.740 --> 00:20:11.840
Walau apa pun cara yang berkesan untuk
pasukan anda, itulah cara anda boleh melakukannya. Betul?

00:20:11.840 --> 00:20:14.840
Itulah bahagian yang menarik tentang
perpustakaan kebolehcapaian automatik.

00:20:14.840 --> 00:20:21.310
Jadi dengan spesifikasi pengaki ini, apa yang saya ada
ialah saya menggunakan perpustakaan ujian React

00:20:21.310 --> 00:20:24.830
untuk ini, dan dalam hal ini, saya telah menyediakan
berbilang kes ujian hanya untuk menyemak.

00:20:24.830 --> 00:20:27.470
Jadi sebagai contoh, saya mempunyai
ujian yang hanya menyemak untuk melihat

00:20:27.470 --> 00:20:29.870
jika komponen dimuatkan,
saya mempunyai cek untuk mengatakan,

00:20:29.870 --> 00:20:32.120
mesti ada beberapa senarai barangan

00:20:32.120 --> 00:20:33.790
yang terdapat dalam pengaki,
jadi saya mempunyai seperti senarai pautan

00:20:33.790 --> 00:20:34.790
di bahagian bawah. Betul?

00:20:35.610 --> 00:20:40.380
Selain itu,
saya menambah satu ujian.

00:20:40.380 --> 00:20:42.763
Anda boleh menghubungi
semakan kebolehaksesan ini,

00:20:42.764 --> 00:20:44.840
anda boleh panggil ini Boleh Dicapai,

00:20:44.840 --> 00:20:46.360
anda boleh memanggilnya
apa sahaja yang anda mahu.

00:20:46.360 --> 00:20:48.470
Menamakannya secara konsisten adalah kuncinya.

00:20:48.470 --> 00:20:50.280
Kerana apabila saya menamakan
barang saya, saya akan berkata

00:20:50.280 --> 00:20:53.130
komponen pengaki.

00:20:53.130 --> 00:20:56.870
Jadi apa yang menarik ialah, kerana saya sedang membina
ini dengan perpustakaan kebolehaksesan,

00:20:56.870 --> 00:20:59.780
yang ini di sini saya menggunakan teras kapak
untuk kedua-dua contoh saya.

00:20:59.780 --> 00:21:01.520
Ia mungkin yang
paling mudah untuk disepadukan

00:21:01.520 --> 00:21:04.140
dan ia mempunyai integrasi yang paling banyak.

00:21:04.140 --> 00:21:11.000
Tetapi semasa saya membina ini,
saya hanya boleh melakukan kes ujian yang sama

00:21:11.000 --> 00:21:13.950
merentasi pelbagai spesifikasi.

00:21:13.950 --> 00:21:15.470
Itulah
bahagian yang indah tentang ini.

00:21:15.470 --> 00:21:18.470
Saya sebenarnya boleh menciptanya dan
menjadikannya konsisten di mana

00:21:18.470 --> 00:21:23.860
apabila saya menyepadukan ini,
ia betul-betul salin dan tampal.

00:21:23.860 --> 00:21:24.450
Semudah itu.

00:21:24.450 --> 00:21:26.050
Saya akan tunjukkan caranya.

00:21:26.050 --> 00:21:28.710
Jadi semakan kebolehcapaian ini
yang saya ada di sini.

00:21:28.710 --> 00:21:30.510
Ini khusus untuk
perpustakaan ujian React,

00:21:30.510 --> 00:21:33.790
tetapi pada asasnya saya mengambil
bekas yang mempunyai komponen,

00:21:33.790 --> 00:21:37.500
Saya memberikan footer saya,
saya kemudian lari "axe.run",

00:21:37.500 --> 00:21:40.400
yang merupakan cara biasa untuk benar-benar
menjalankan "Axe" terhadap bekas.

00:21:40.400 --> 00:21:43.710
Jadi sekarang saya akan menjalankan
peraturan teras kapak itu menentangnya.

00:21:43.710 --> 00:21:45.810
Saya mempunyai penglapor buatan sendiri
yang ada di sini, tetapi jika anda mahu

00:21:45.810 --> 00:21:48.630
untuk mempunyai penglapor yang anda
boleh, tidak diperlukan.

00:21:48.630 --> 00:21:53.640
Dan kemudian saya jangka... sebenarnya kes ujian

00:21:53.640 --> 00:21:56.360
keputusan. pelanggaran, yang akan
menjadi pelanggaran komponen,

00:21:56.360 --> 00:21:59.130
Saya jangka panjangnya
adalah sifar.

00:22:00.370 --> 00:22:01.710
Itu sahaja.

00:22:01.710 --> 00:22:03.050
Dan itu sahaja.

00:22:03.050 --> 00:22:08.610
Apa yang menarik tentang ini ialah
saya kini boleh mengambil ini, menyalinnya,

00:22:08.610 --> 00:22:09.570
dan kemudian teka apa?

00:22:09.570 --> 00:22:11.070
Biar saya tarik
satu lagi dengan cepat

00:22:11.070 --> 00:22:12.250
supaya anda semua boleh melihatnya.

00:22:12.250 --> 00:22:13.600
Jika saya menarik komponen pengepala saya.

00:22:15.220 --> 00:22:16.560
Lihat itu.

00:22:16.560 --> 00:22:18.390
Secara harfiahnya sama.

00:22:18.390 --> 00:22:21.020
Satu-satunya perbezaan mungkin ialah
kita menukar penamaan

00:22:21.020 --> 00:22:23.260
jika anda mempunyai rakaman
atau perkara seperti itu.

00:22:23.260 --> 00:22:24.190
Tetapi itu sahaja.

00:22:24.190 --> 00:22:26.050
Semudah itu.

00:22:26.050 --> 00:22:30.110
Salinan dan tampal
kes ujian itu jika kami menyediakannya dengan betul.

00:22:30.110 --> 00:22:32.960
Jika kes ujian anda disediakan
dengan betul, ia semudah itu.

00:22:32.960 --> 00:22:35.730
Banyak kali apabila pasukan menyediakan
perpustakaan yang berjaya menguji ini

00:22:35.730 --> 00:22:38.670
mereka berkata, Mark,
ini banyak kerja yang perlu dilakukan.

00:22:38.670 --> 00:22:40.050
Memang tidak.

00:22:40.050 --> 00:22:42.270
Ia semudah hanya menyediakan
kes ujian anda dengan betul

00:22:42.270 --> 00:22:45.960
pada satu perkara, memastikan ia
berfungsi dan kemudian menjalankannya. Betul?

00:22:45.960 --> 00:22:46.760
Semudah itu.

00:22:46.760 --> 00:22:50.330
Jadi saya sebenarnya boleh menjalankan ini
dengan cepat juga, hanya spesifikasi pengaki.

00:22:50.330 --> 00:22:53.530
Biar saya jalankan ini.

00:22:53.530 --> 00:22:57.340
Sekarang, amaran yang adil, kerana setiap kali
saya akhirnya menjalankan sesuatu seperti ini

00:22:57.340 --> 00:22:59.170
pada tunjuk cara langsung,
terutamanya pada awal pagi,

00:22:59.170 --> 00:23:00.920
komputer saya masih
belum mendapat kopinya.

00:23:00.920 --> 00:23:02.740
Jadi saya pasti ia
mungkin akan menjadi seperti,

00:23:02.740 --> 00:23:05.110
Saya tidak rasa mahu bekerja sekarang, itu tidak mengapa.

00:23:05.110 --> 00:23:08.310
Saya boleh pergi ke
bahagian seterusnya selepas ini jika perlu.

00:23:08.310 --> 00:23:12.980
Tetapi semasa ini berjalan, apa yang saya ingin
tunjukkan ialah betapa mudahnya

00:23:12.980 --> 00:23:15.960
untuk melihat keputusan yang
kembali daripada ini juga.

00:23:15.960 --> 00:23:19.390
Jadi jika saya selesai dengan
komponen itu, katakan saya selesai

00:23:19.390 --> 00:23:21.780
dengan peraturan "linting" saya, saya katakan bahawa
ini bagus untuk dilakukan, dan saya berkata,

00:23:21.780 --> 00:23:24.450
ya, saya akan menjalankan
kes ujian saya terhadap perkara ini.

00:23:24.450 --> 00:23:27.650
Jadi, apa yang boleh saya lakukan sekarang ialah
sama ada mempunyai pengelapor atau memilikinya

00:23:27.650 --> 00:23:29.760
dalam konsol,
yang hanya disertakan dengan kebanyakan

00:23:29.760 --> 00:23:33.280
daripada perpustakaan ujian yang anda ada, untuk
mengatakan, di manakah isu saya wujud?

00:23:33.280 --> 00:23:35.380
Jadi saya akan mencari pengaki saya.

00:23:35.380 --> 00:23:36.620
Oh, ya,
kami mendapat banyak isu di sini.

00:23:37.650 --> 00:23:40.190
Juga, nampaknya, Mark harus mengemas kini
barangannya kerana ia sudah lapuk.

00:23:40.190 --> 00:23:41.380
Ada kaki saya.

00:23:41.380 --> 00:23:42.820
Ada kes ujian saya.

00:23:42.820 --> 00:23:45.880
Saya menjangkakan pelanggaran keputusan panjangnya
menjadi sifar.

00:23:45.880 --> 00:23:47.570
Saya menemui dua isu kebolehaksesan.

00:23:47.570 --> 00:23:50.060
Oleh kerana saya mempunyai
pengelapor buatan sendiri, saya boleh pergi

00:23:50.060 --> 00:23:51.400
di sini dengan cepat dan
ketahui apa itu.

00:23:51.400 --> 00:23:52.820
Oh, lihat itu.

00:23:52.820 --> 00:23:54.730
Elemen bentuk tidak mempunyai label.

00:23:54.730 --> 00:23:56.110
Hebat.

00:23:56.110 --> 00:23:56.690
Perkara yang sama.

00:23:56.690 --> 00:23:58.170
Dua elemen bentuk
tidak mempunyai label.

00:23:58.170 --> 00:24:02.110
Dan, oh, senarai saya termasuk
dalam HR di tengah-tengah senarai saya. Betul?

00:24:02.110 --> 00:24:04.390
Semudah itu.

00:24:04.390 --> 00:24:06.150
Jadi perkara itu boleh
ditangkap sepanjang perjalanan.

00:24:06.150 --> 00:24:08.100
Dan sekarang saya boleh mengambil
kes ujian yang sama

00:24:08.101 --> 00:24:09.850
dan ulanginya di merata tempat.

00:24:11.170 --> 00:24:12.170
Semudah itu.

00:24:12.860 --> 00:24:14.630
Jika anda melihatnya
dari tahap integrasi,

00:24:14.630 --> 00:24:19.770
hanya sebagai pameran pantas, saya juga
mempunyai contoh di sini dengan Selenium.

00:24:19.770 --> 00:24:23.140
Jadi sekali lagi, anda hanya mencari
integrasi kapak yang anda mahukan.

00:24:23.140 --> 00:24:24.830
axe-webdriverjs.

00:24:24.830 --> 00:24:27.480
Ia sesuai dengan apa sahaja yang anda
gunakan pemandu itu sendiri

00:24:27.480 --> 00:24:29.030
untuk arahan persediaan.

00:24:29.030 --> 00:24:31.620
Saya mempunyai semua kes ujian saya,
jumlah penyenaraian,

00:24:31.620 --> 00:24:32.780
butang penyenaraian diberikan.

00:24:32.780 --> 00:24:36.110
Dan kemudian saya menguji, sebagai
contoh, ia boleh diakses.

00:24:36.110 --> 00:24:37.230
Cuba teka?

00:24:37.230 --> 00:24:40.150
Di sini adalah
kes ujian yang sama

00:24:40.150 --> 00:24:43.840
merentasi semua ujian penyepaduan saya
kerana kes ujian saya disediakan

00:24:43.840 --> 00:24:48.680
dengan cara untuk mengatakan apabila mereka membuat persembahan, ia akan berkata,

00:24:48.680 --> 00:24:55.010
halaman tangkapan boleh diakses dalam
larian ujian. Semudah itu.

00:24:55.010 --> 00:24:59.560
Jadi menggunakan perpustakaan ujian automatik
mungkin kelihatan seperti tugas yang sukar,

00:24:59.560 --> 00:25:00.420
tetapi sebenarnya tidak.

00:25:00.420 --> 00:25:04.100
Sebaik sahaja anda menyediakan dan menjalankannya,
ia akan mengulangi ujian yang sama

00:25:04.100 --> 00:25:06.180
dalam struktur dengan cara
yang sesuai dengan apa yang anda lakukan.

00:25:06.180 --> 00:25:08.110
Contoh saya sangat mudah.

00:25:08.110 --> 00:25:09.320
Difahami betul-betul

00:25:09.320 --> 00:25:11.430
tetapi untuk sebahagian besar,
ini adalah cara ia berfungsi,

00:25:11.430 --> 00:25:13.830
ialah anda boleh
mengambil kes ujian yang sama secara mudah

00:25:13.830 --> 00:25:15.870
dan berlari berulang kali.

00:25:15.870 --> 00:25:17.540
Dan ia memberikan anda keputusan
berdasarkan cara anda

00:25:17.540 --> 00:25:18.490
kes ujian anda berstruktur.

00:25:18.490 --> 00:25:23.170
Dan itu pada
tahap unit atau integrasi, yang hebat.

00:25:23.170 --> 00:25:27.700
Jadi, kembali ke
faedah indah saya untuk ini.

00:25:29.390 --> 00:25:33.610
Amalan terbaik untuk ini ialah,
cari integrasi yang sesuai

00:25:33.610 --> 00:25:35.380
pembangunan anda. Betul?

00:25:35.380 --> 00:25:37.260
Pastikan set peraturan
adalah konsisten.

00:25:37.260 --> 00:25:41.500
Anda tidak mahu menggunakan linting yang
menggunakan perpustakaan yang sama sekali berbeza

00:25:41.500 --> 00:25:44.230
daripada kapak, atau anda tidak mahu
menggunakan a11y pada satu ketika

00:25:44.230 --> 00:25:47.580
atau set
ujian integrasi yang berbeza dengannya.

00:25:47.580 --> 00:25:50.340
Kebanyakan
penyepaduan sumber terbuka menggunakan teras kapak,

00:25:50.340 --> 00:25:54.030
jadi ia bukanlah satu ujian yang sukar untuk
dilakukan, tetapi pastikan kami menggunakan satu

00:25:54.030 --> 00:25:58.160
yang sesuai dengan struktur ujian UI
yang kami lakukan. Betul?

00:25:58.160 --> 00:26:00.760
Satu lagi amalan terbaik ialah membina
prinsip satu dengan satu.

00:26:00.760 --> 00:26:04.210
Terdapat prinsip satu dengan satu dalam
ujian UI yang menyatakan untuk setiap bahagian

00:26:04.210 --> 00:26:08.440
UI, terdapat
kes ujian kebolehcapaian berpasangan dengannya.

00:26:08.440 --> 00:26:11.090
Jadi sama ada itu komponen,
sama ada itu halaman,

00:26:11.090 --> 00:26:15.230
"mano e mano" kita pastikan
cebisan kod itu, secebis itu

00:26:15.230 --> 00:26:17.940
UI mempunyai
ujian kebolehaksesan yang terikat dengannya.

00:26:17.940 --> 00:26:20.420
Dan juga menguji pada
pelbagai peringkat ujian.

00:26:20.420 --> 00:26:23.980
Saya baru sahaja menunjukkan kepada anda semua
ini, tetapi jika anda boleh menguji

00:26:23.980 --> 00:26:27.590
dengan perpustakaan kebolehaksesan pada
satu unit dan tahap penyepaduan,

00:26:27.590 --> 00:26:28.680
ia hebat.

00:26:28.680 --> 00:26:30.990
Ia menang-menang secara menyeluruh.

00:26:30.990 --> 00:26:32.120
Anda mendapat semua
faedah dan segala-galanya.

00:26:32.120 --> 00:26:34.850
Jadi, jika anda boleh,
uji pada pelbagai peringkat ujian.

00:26:35.930 --> 00:26:40.580
Jadi fasa satu, Linting, fasa
dua, perpustakaan kebolehcapaian.

00:26:40.580 --> 00:26:41.900
Anda akan menjadi seperti,
Mark, apakah fasa tiga?

00:26:41.900 --> 00:26:44.570
Kerana nampaknya kita telah mencapai
semua automasi kebolehaksesan

00:26:44.570 --> 00:26:45.570
kita boleh lakukan.

00:26:45.990 --> 00:26:47.050
Tada.

00:26:47.050 --> 00:26:48.050
Ujian regresi.

00:26:49.030 --> 00:26:52.740
Jadi saya selalu cenderung untuk mengambil
bantahan untuk ini banyak kali

00:26:52.740 --> 00:26:56.010
kerana setiap kali sesiapa mendengar
bahawa anda boleh mengautomasikan lebih daripada

00:26:56.010 --> 00:26:59.050
apa yang dilakukan oleh perpustakaan kebolehcapaian linting, orang ramai cenderung untuk berbuat baik

00:26:59.050 --> 00:27:02.740
melompat ke atasnya dengan segera dan
berkata, oh, seperti, tidak, anda tidak boleh.

00:27:02.740 --> 00:27:04.970
Anda bercakap tentang
mengautomasikan segala-galanya dengan itu.

00:27:04.970 --> 00:27:06.030
Saya tidak.

00:27:06.030 --> 00:27:08.900
Apa yang saya cakapkan ialah,
anda boleh membina kes ujian UI

00:27:08.900 --> 00:27:13.150
yang melampaui
perpustakaan kebolehcapaian generik sahaja.

00:27:13.150 --> 00:27:17.040
Anda boleh membina kes ujian automatik
yang memastikan kefungsian

00:27:17.040 --> 00:27:19.580
kandungan anda boleh diakses.

00:27:19.580 --> 00:27:21.780
Jadi sebagai contoh, bahagian runtuhan kembangkan.

00:27:22.860 --> 00:27:25.640
Menggunakan sesuatu seperti "linting" teras kapak, ia hanya akan memastikan

00:27:25.640 --> 00:27:30.830
bahawa anda menpunyai "aria-expanded = false" atau benar yang dinyatakan dengan betul

00:27:30.830 --> 00:27:32.920
dan letakkan di sana sebagai atribut.

00:27:32.920 --> 00:27:37.990
Ia tidak boleh menguji kefungsian yang
keadaan itu ditetapkan dengan betul,

00:27:37.990 --> 00:27:40.810
yang "aria-hidden = true" bersamaan dengan
benar sedang ditetapkan dengan betul

00:27:40.810 --> 00:27:42.950
apabila anda membuka, kuncup dan kembang bahagian.

00:27:42.950 --> 00:27:44.390
Ia tidak boleh berbuat demikian.

00:27:44.390 --> 00:27:47.340
Jadi faedah melakukan
ujian regresi ialah,

00:27:47.340 --> 00:27:49.450
lebih mudah untuk menyahralat
isu kebolehaksesan.

00:27:54.090 --> 00:27:58.200
Lebih mudah untuk melakukannya.

00:27:58.200 --> 00:28:00.860
Ia termasuk ujian kebolehcapaian
sebagai sebahagian daripada takrifan anda untuk selesai.

00:28:00.860 --> 00:28:05.360
Jadi sebagai contoh, kami sebenarnya sedang
membina audit manual dengan ini.

00:28:05.360 --> 00:28:09.030
Jadi jika saya mendapat audit manual yang
mengatakan, Hei, saya boleh

00:28:09.030 --> 00:28:12.590
kepada kandungan itu dalam
bahagian runtuhan kembangkan apabila ia disembunyikan,

00:28:12.590 --> 00:28:13.260
teka apa yang boleh saya lakukan?

00:28:13.260 --> 00:28:16.200
Saya boleh menulis ujian regresi yang
mengatakan, saya perlu memastikan keadaan

00:28:16.200 --> 00:28:19.420
daripada atribut itu berfungsi
seperti yang saya jangkakan.

00:28:19.420 --> 00:28:21.587
Adakah ia menyemak untuk
memastikan ia mengumumkan dengan betul

00:28:21.588 --> 00:28:22.540
dengan pembaca skrin?

00:28:22.540 --> 00:28:25.760
Tidak, ia hanya memastikan
kandungan yang boleh diakses

00:28:25.760 --> 00:28:28.810
atau kefungsian boleh diakses
komponen itu berfungsi dengan betul.

00:28:28.810 --> 00:28:30.980
Terdapat perbezaan
antara keduanya.

00:28:30.980 --> 00:28:33.260
Kerana ya,
mungkin ada ralat yang wujud

00:28:33.260 --> 00:28:35.500
dalam pembaca skrin itu
sendiri.

00:28:35.500 --> 00:28:37.870
Mungkin terdapat ralat yang wujud
dalam kod kita sendiri.

00:28:37.870 --> 00:28:41.030
Tetapi kita boleh nyahralat semudah itu.

00:28:41.030 --> 00:28:43.360
Jadi kami memastikan
kandungan boleh diakses sepenuhnya

00:28:43.360 --> 00:28:44.460
dari segi fungsi.

00:28:45.500 --> 00:28:47.860
Biar saya berikan anda semua demo
kerana setiap kali saya merawat

00:28:47.860 --> 00:28:49.610
untuk melakukan ini, semua orang cenderung
untuk duduk di situ sahaja

00:28:49.610 --> 00:28:51.690
dan jadilah, saya tidak percaya apa yang
Mark beritahu saya sekarang.

00:28:51.690 --> 00:28:52.690
Dan tidak mengapa.

00:28:54.300 --> 00:28:55.590
Biar saya beri contoh.

00:28:56.640 --> 00:28:59.200
Jadi ini adalah projek Cypress
yang saya ada.

00:28:59.200 --> 00:29:02.450
Cypress hanyalah salah satu
perpustakaan ujian UI yang paling popular.

00:29:02.450 --> 00:29:03.620
Berfungsi dengan cara yang sama.

00:29:03.620 --> 00:29:04.600
Ia adalah penguji integrasi. Betul?

00:29:04.600 --> 00:29:08.840
Tetapi saya ingin mempamerkan beberapa
contoh kes ujian yang boleh kita lakukan

00:29:08.840 --> 00:29:10.110
dari sudut regresi.

00:29:10.110 --> 00:29:14.550
Jadi, katakan saya mendapat audit manual
yang mengatakan, keadaan lumpuh

00:29:14.550 --> 00:29:17.220
butang anda tiada.

00:29:17.220 --> 00:29:19.650
Ia bertukar warna,
tetapi ia tiada.

00:29:19.650 --> 00:29:21.670
Seperti
atribut yang dilumpuhkan tiada di sana.

00:29:21.670 --> 00:29:23.730
Saya boleh menulis ujian regresi
untuk itu.

00:29:23.730 --> 00:29:26.030
Jadi saya mempunyai kes ujian
pada skrin yang mengatakan,

00:29:26.030 --> 00:29:29.010
Merupakan keadaan dilumpuhkan yang betul
bagi butang tawaran.

00:29:30.190 --> 00:29:35.790
Jadi saya semak untuk melihat sebelum saya memasukkan
sebarang maklumat ke dalam medan ini,

00:29:35.790 --> 00:29:37.080
adakah butang itu dilumpuhkan?

00:29:37.080 --> 00:29:38.160
Dan adakah ia perlu wujud?

00:29:38.160 --> 00:29:39.160
Ya atau tidak?

00:29:39.990 --> 00:29:41.290
Hebat.

00:29:41.290 --> 00:29:42.210
Kemudian saya tunggu.

00:29:42.210 --> 00:29:45.150
Saya menaip beberapa kandungan ke dalam input.

00:29:45.150 --> 00:29:47.740
Dalam kes ini, saya menaip,
saya suka kebolehaksesan.

00:29:47.740 --> 00:29:51.720
Saya kemudian kembali ke
butang dilumpuhkan itu, gunakan atribut dilumpuhkan

00:29:51.720 --> 00:29:53.350
dan katakan ia tidak sepatutnya wujud.

00:29:53.350 --> 00:29:55.990
Syabas, selesai,
fungsi yang boleh diakses tersedia. Betul?

00:29:57.180 --> 00:29:58.180
Sangat mudah.

00:29:58.950 --> 00:30:02.790
Perkara yang sama yang kita bincangkan sebelum ini,
memeriksa keruntuhan aria-expanded.

00:30:02.790 --> 00:30:05.570
Saya suka menggunakan yang ini
kerana ia merupakan bekas yang bagus.

00:30:05.570 --> 00:30:06.990
Saya ada togol.

00:30:06.990 --> 00:30:10.790
Saya menyemak sama ada aria dikembangkan secara
lalai apabila ia ditutup adalah sama

00:30:10.790 --> 00:30:12.230
kepada palsu.

00:30:12.230 --> 00:30:13.630
Saya kemudian pergi ke kes ujian.

00:30:13.630 --> 00:30:17.950
Saya katakan, Hei, togol, picu, klik
atau ketik. Saya tahu ia ada pada yang ini.

00:30:17.950 --> 00:30:20.320
Ia tidak mempunyai papan kekunci
tetapi saya mencetuskannya.

00:30:21.420 --> 00:30:24.540
Saya pergi ke dalamnya dan saya memohon untuk melihat
bahawa aria-dikembangkan harus sama benar.

00:30:24.540 --> 00:30:25.860
Tidak.

00:30:25.860 --> 00:30:29.040
Saya kemudian menutupnya semula dan
menyemak sama ada ia berkata palsu.

00:30:29.040 --> 00:30:31.600
Ujian regresi, agak
mudah dan ringkas.

00:30:33.260 --> 00:30:36.740
Saya boleh menyemak sama ada terdapat
penunjuk fokus pada elemen sebenar.

00:30:36.740 --> 00:30:38.430
Ya, anda boleh lakukan ini.

00:30:38.430 --> 00:30:40.870
Saya akan kaveat dengan ini.

00:30:40.870 --> 00:30:45.650
Anda perlu tahu apakah
warna garis besar penunjuk fokus, walaupun,

00:30:45.650 --> 00:30:46.230
untuk berbuat demikian.

00:30:46.230 --> 00:30:47.630
Anda tidak boleh
menyemaknya secara umum.

00:30:47.630 --> 00:30:48.950
Jadi anda perlu tahu apa itu.

00:30:48.950 --> 00:30:53.200
Oleh itu, pada asasnya saya pergi ke setiap
butang ini yang terdapat dalam senarai menu

00:30:53.200 --> 00:30:56.550
dan saya memberi tumpuan kepada mereka,
saya dapat melihat garis besar CSS.

00:30:56.550 --> 00:30:58.970
Jika saya tahu bahawa
warna latar belakang sepatutnya

00:30:58.970 --> 00:31:01.070
untuk memadankan warna tertentu, rasa apa?

00:31:01.070 --> 00:31:02.370
Ia mempunyai penunjuk fokus.

00:31:02.370 --> 00:31:04.700
Berapa banyak tapak yang
anda tahu bahawa regresi

00:31:04.700 --> 00:31:07.820
dan tarik keluar penunjuk fokus mereka
kerana mereka tidak tahu?

00:31:07.820 --> 00:31:08.560
Terlalu banyak.

00:31:08.560 --> 00:31:09.910
Ini boleh membetulkannya.

00:31:09.910 --> 00:31:13.560
Jika anda mengetahuinya, pastikan semua
kandungan sebenar anda mempunyai penunjuk fokus.

00:31:14.630 --> 00:31:15.900
"A11y" memfokuskan pada modal.

00:31:15.900 --> 00:31:19.940
Berapa banyak modal yang anda semua tahu
yang tidak menetapkan fokus dengan betul

00:31:19.940 --> 00:31:22.830
ke dalam tan modal.

00:31:22.830 --> 00:31:24.270
Ini boleh membetulkannya.

00:31:24.270 --> 00:31:26.960
Jika saya mempunyai modal, saya boleh menulis
ujian regresi yang memastikan bahawa

00:31:26.960 --> 00:31:31.480
apabila saya mencetuskan acara klik,
tumpuan akan pergi ke atau ke dalam modal.

00:31:31.480 --> 00:31:33.850
Dalam kes ini, saya hanya menyemaknya untuk
memastikan ia pergi ke tajuk.

00:31:33.850 --> 00:31:38.330
Apabila saya menutupnya, fokus
kembali kepada pencetus yang melakukannya.

00:31:38.330 --> 00:31:39.040
Anda boleh melakukannya.

00:31:39.040 --> 00:31:40.610
Anda boleh menulis
ujian regresi untuk mereka.

00:31:41.940 --> 00:31:44.910
Itulah keindahan
ujian regresi yang boleh diakses.

00:31:44.910 --> 00:31:47.820
Ya, untuk sampai ke
negeri ini akan mengambil sedikit masa.

00:31:47.820 --> 00:31:51.020
Fasa satu, fasa dua, anda boleh sampai ke
sana dengan mudah.

00:31:51.020 --> 00:31:52.280
Ia mungkin mengambil sedikit masa.

00:31:52.280 --> 00:31:53.510
Fasa tiga mungkin mengambil sedikit masa.

00:31:53.510 --> 00:31:58.650
Tetapi saya boleh memberitahu anda semua sekarang
bahawa saya telah melihat beberapa pasukan mendapat

00:31:58.650 --> 00:31:59.570
ke fasa tiga ini.

00:31:59.570 --> 00:32:03.200
Dan apabila mereka melakukannya,
jika ada yang mundur,

00:32:03.200 --> 00:32:05.980
jika apa-apa ditarik balik,
sesuatu tidak disengajakan tercabut

00:32:05.980 --> 00:32:06.800
daripada kod.

00:32:06.800 --> 00:32:10.930
Mereka melihatnya serta-merta dan
mereka mengelakkan banyak aduan

00:32:10.930 --> 00:32:13.500
daripada pelanggan yang berkata, Hei,
kandungan anda tidak boleh diakses.

00:32:13.500 --> 00:32:16.030
Mereka mengelakkan banyak
peluang manual yang datang dengan berkata seperti,

00:32:16.030 --> 00:32:18.960
Hei, kandungan ini terus
pecah, kenapa tidak ada?

00:32:18.960 --> 00:32:20.610
Ini boleh membantu menyelesaikannya.

00:32:20.610 --> 00:32:23.490
Ya, kami tidak menyemak apakah
output pembaca skrin.

00:32:23.490 --> 00:32:25.590
Kami hanya menyemak untuk
memastikan kandungan

00:32:25.590 --> 00:32:27.790
boleh diakses dari segi fungsi.

00:32:27.790 --> 00:32:31.060
Dan ini boleh membantu untuk
memudahkan semua orang

00:32:31.060 --> 00:32:33.000
untuk melihatnya
dan untuk pasukan pembangunan menyahralat.

00:32:33.000 --> 00:32:38.310
Ini cara yang bagus untuk membeli dan
menarik lebih ramai orang untuk membelinya.

00:32:38.310 --> 00:32:40.850
Jadi amalan terbaik untuk ini.

00:32:40.850 --> 00:32:45.630
Saya pasti ujian regresi
dilabelkan dengan betul dalam ujian UI anda.

00:32:45.630 --> 00:32:48.890
Jadi sama ada gunakan "A11y" atau Kebolehcapaian
dalam ujian supaya anda tahu

00:32:48.890 --> 00:32:51.220
bahawa ia adalah
Ujian Regresi Kebolehcapaian.

00:32:51.220 --> 00:32:53.780
Pastikan Fungsi Kebolehcapaian
dipanggil untuk ujian UI.

00:32:53.780 --> 00:32:57.960
Jadi sebagai contoh,
kriteria penerimaan, kebanyakan syarikat

00:32:57.960 --> 00:33:00.070
dan pasukan tidak mempunyai
kriteria penerimaan untuk kebolehaksesan.

00:33:00.070 --> 00:33:02.850
Jika anda melakukannya, anda sebenarnya boleh
menulis ujian regresi

00:33:02.850 --> 00:33:05.030
untuk
kriteria penerimaan itu, yang bagus.

00:33:06.090 --> 00:33:07.670
Pastikan
pasukan pembangunan mengetahui perkara ini

00:33:07.670 --> 00:33:10.350
tidak menggantikan
ujian pembaca skrin khalayak biasa.

00:33:10.350 --> 00:33:11.150
Itu memang laku keras.

00:33:11.150 --> 00:33:13.220
Saya akan memberitahu anda sekarang,
kerana apabila anda melalui jalan ini,

00:33:13.220 --> 00:33:16.280
ramai orang berkata, hey, saya mahu
mengautomasikan semua kebolehaksesan.

00:33:16.280 --> 00:33:20.140
Anda tidak boleh, betul? Tetapi ini membantu
meringankan kesakitan untuk memastikan

00:33:20.140 --> 00:33:23.420
bahawa kandungan yang boleh diakses
di luar sana kekal boleh diakses

00:33:23.420 --> 00:33:26.690
melainkan ada sesuatu yang berlaku, setakat ralat pembaca skrin

00:33:26.690 --> 00:33:27.210
atau perkara seperti itu.

00:33:27.210 --> 00:33:28.800
Itu sangat sedikit dan jauh antara.

00:33:28.800 --> 00:33:32.350
Jadi ia hanya memastikan kandungan
boleh diakses keluar dari pintu.

00:33:34.030 --> 00:33:36.330
Jadi fasa satu, "Linting".

00:33:36.330 --> 00:33:38.960
Fasa dua,
Perpustakaan Pengujian kebolehcapaian.

00:33:38.960 --> 00:33:40.000
Fasa tiga, Ujian Regresi.

00:33:40.000 --> 00:33:43.850
Jadi awak akan tanya saya sekarang, Mark,
pada slaid pertama yang awak ada di sini,

00:33:43.850 --> 00:33:47.230
anda mempunyai perkara yang indah ini yang mengatakan
fasa sifar Anda akan berkata,

00:33:47.230 --> 00:33:50.720
Bagaimana pula dengan sambungan?
awak betul.

00:33:50.720 --> 00:33:54.210
Sambungan memang wujud dan ia
mempunyai kesan berguna untuk automasi.

00:33:55.230 --> 00:33:56.760
Inilah pengalaman saya
dengan sambungan.

00:33:56.760 --> 00:33:59.490
Tiada cara sebenar dalam
kitaran hayat yang sedang berkembang untuk menjejaki

00:33:59.490 --> 00:34:01.750
jika seseorang benar-benar
menggunakan sambungan.

00:34:01.750 --> 00:34:05.440
Hai, saya seorang pembangun
untuk sekian lama.

00:34:05.440 --> 00:34:08.870
Jika anda memberi saya sesuatu yang saya
akan gunakan sebagai kod penghormatan,

00:34:08.870 --> 00:34:12.100
dalam persekitaran tangkas yang tidak
tahu apa-apa tentang kebolehcapaian,

00:34:12.100 --> 00:34:12.640
teka apa?

00:34:12.640 --> 00:34:14.030
Saya tidak akan melakukannya.

00:34:14.030 --> 00:34:16.010
Kerana barangan kod kehormatan
bukanlah sesuatu

00:34:16.010 --> 00:34:18.960
yang saya tandai dengan ketat pada kotak
, adalah kriteria penerimaan,

00:34:18.960 --> 00:34:19.960
perkara seperti itu.

00:34:20.850 --> 00:34:21.610
Cuba teka?

00:34:21.610 --> 00:34:25.040
Kebanyakan pasukan yang hanya menggunakan sambungan
akhirnya menghantar barangan ke pengeluaran

00:34:25.040 --> 00:34:27.250
kerana tiada cara untuk menyemaknya.

00:34:27.250 --> 00:34:28.930
Tidak ada.

00:34:28.930 --> 00:34:31.810
Jadi sambungan sentiasa boleh
digunakan semasa anda membina

00:34:31.810 --> 00:34:32.830
dan membuat kandungan baharu.

00:34:34.000 --> 00:34:40.170
Tetapi
automasi berperingkat dan kebolehcapaian, satu, dua, tiga,

00:34:40.170 --> 00:34:42.360
yang membantu menguatkuasakan
penggunaan sambungan tersebut.

00:34:42.360 --> 00:34:46.320
Jadi jika saya membina kandungan saya, saya
membinanya, saya boleh menjalankan sambungan saya

00:34:46.320 --> 00:34:48.690
pada hos tempatan saya dan katakan,
Hei, ada masalah.

00:34:48.690 --> 00:34:52.290
Dan saya boleh membuat kekacauan dan cuba
membetulkannya secara langsung dan kemudian meletakkannya

00:34:52.290 --> 00:34:53.400
ke dalam kod saya.

00:34:53.400 --> 00:34:57.160
Itulah kegunaan praktikal yang saya lihat
berulang kali daripada pasukan.

00:34:57.160 --> 00:35:02.170
Kita cenderung melihat sambungan
digunakan sebagai taman permainan

00:35:02.170 --> 00:35:05.750
untuk dapat melihat
isu kebolehaksesan dan kemudian membetulkannya secara langsung.

00:35:05.750 --> 00:35:07.400
Ini membantu menguatkuasakannya.

00:35:07.400 --> 00:35:11.590
Perkara yang paling penting ialah dengan
sambungan, ia sangat sukar untuk dikesan.

00:35:11.590 --> 00:35:14.360
Banyak skuad yang saya lihat
berkata, Hei, letakkan tangkapan skrin

00:35:14.360 --> 00:35:17.060
isu kebolehaksesan anda
dan anda tiada masalah.

00:35:17.060 --> 00:35:19.510
Ya, saya sudah melihat
sistem itu ditipu

00:35:19.510 --> 00:35:21.280
ke tempat seseorang mengambil
tangkapan skrin yang sama

00:35:21.280 --> 00:35:22.830
dan berkata, lihat, ia telah ditetapkan.

00:35:22.830 --> 00:35:25.940
Jadi sambungan mempunyai
tempat dalam automasi.

00:35:25.940 --> 00:35:26.230
.

00:35:26.230 --> 00:35:29.290
100% kerana banyak
skuad menggunakannya.

00:35:29.290 --> 00:35:31.940
Tetapi setakat penguatkuasaan dan
memasukkannya ke hari ke hari,

00:35:31.940 --> 00:35:35.320
anda perlu menggunakan
bahagian berfasa fasa satu, fasa dua,

00:35:35.320 --> 00:35:38.980
dan jika anda sampai ke fasa tiga, fasa
tiga, untuk mendapatkan sambungan dengan betul

00:35:38.980 --> 00:35:41.510
untuk digunakan mengikut
cara yang sepatutnya.

00:35:41.510 --> 00:35:45.020
Untuk melampaui apa
yang dilakukan oleh ujian automasi.

00:35:45.020 --> 00:35:47.332
Sukar untuk
menguatkuasakan sambungan

00:35:47.333 --> 00:35:48.950
untuk berkata seperti, Hei, saya akan pergi

00:35:48.950 --> 00:35:50.300
untuk menggunakan sambungan dan pergi.

00:35:52.651 --> 00:35:56.351
Jadi bulatkan ini
sedikit sahaja.

00:35:58.040 --> 00:36:02.570
Saya sebut istilah ini, Merrill Evans
menyebut istilah yang serupa dengan ini juga,

00:36:02.570 --> 00:36:03.850
kemenangan kecil untuk keuntungan besar.

00:36:03.850 --> 00:36:08.220
Banyak reaksi yang saya dapat daripada
ini ialah ini adalah banyak

00:36:08.220 --> 00:36:09.790
fasa hanya untuk automasi.

00:36:09.790 --> 00:36:11.510
Awak betul.

00:36:11.510 --> 00:36:14.300
Tetapi saya memberitahu anda sekarang
, cara yang anda dapat

00:36:14.300 --> 00:36:18.820
ke dalam kitaran hayat pembangunan ialah
anda perlu menyesuaikan diri dengan apa yang dilakukan.

00:36:18.820 --> 00:36:22.270
Kebolehcapaian untuk
masa yang paling lama telah dilihat sebagai sesuatu

00:36:22.270 --> 00:36:24.840
yang melambatkan keseluruhan proses.

00:36:24.840 --> 00:36:26.200
Perlahankan semuanya.

00:36:26.200 --> 00:36:29.100
Jadi automasi datang untuk berkata,
ya, mari kita percepatkan sandaran itu.

00:36:29.100 --> 00:36:32.970
Tetapi masalahnya ialah
automasi hampir pergi terlalu jauh.

00:36:32.970 --> 00:36:36.310
Jadi apa yang akhirnya berlaku ialah
kerana automasi terlalu jauh,

00:36:36.310 --> 00:36:40.680
kami terlebih penduduk,
kami membebankan persekitaran dev,

00:36:40.680 --> 00:36:42.700
semua perkara berbeza ini
boleh kita gunakan untuk automasi.

00:36:42.700 --> 00:36:47.420
Dan sekarang dev kami kembali dan berkata,
ah, seperti, ini terlalu banyak lagi.

00:36:47.420 --> 00:36:49.690
Jadi ia adalah sejenis kitaran itu.

00:36:49.690 --> 00:36:55.260
Jadi dengan memfasakannya membolehkan kita
dapat menetapkan budaya

00:36:55.260 --> 00:36:58.120
kebolehaksesan untuk masa hadapan.

00:36:58.120 --> 00:37:00.780
Ramai orang berfikir apabila
saya berkata ini, ia tidak benar.

00:37:00.780 --> 00:37:02.000
Memang betul.

00:37:02.000 --> 00:37:05.790
Sekecil automasi adalah
subtugas kecil perkara yang dilakukan

00:37:05.790 --> 00:37:08.310
dalam sejumlah kecil
isu yang mereka tangkap.

00:37:08.310 --> 00:37:14.790
Ia benar-benar konsisten mempunyai
arus bawah kebolehaksesan.

00:37:14.790 --> 00:37:16.947
Gelombang boleh datang
dengan cepat

00:37:16.948 --> 00:37:18.780
dan katakan, hey, betulkan semua perkara ini.

00:37:18.780 --> 00:37:21.060
Ombak boleh menjadi besar,
ombak boleh menjadi kecil,

00:37:21.060 --> 00:37:22.600
tetapi arus bawah
sentiasa kekal di sana.

00:37:22.600 --> 00:37:24.940
Anda mahu kebolehaksesan
kekal sebagai arus bawah.

00:37:26.150 --> 00:37:28.320
Jadi ia sentiasa ada dan
sentiasa mengingatkan semua orang

00:37:28.320 --> 00:37:30.630
bahawa kebolehcapaian penting
dan konsep yang dibuatnya.

00:37:30.630 --> 00:37:34.030
Jadi jika kita terus mengatakan lakukan
automasi, maka kita akan berakhir

00:37:34.030 --> 00:37:35.450
dalam kitaran yang sama yang pernah kita lalui.

00:37:35.450 --> 00:37:37.690
Jadi kita perlu mula
membahagikannya supaya ia melekat.

00:37:37.690 --> 00:37:41.930
Dan satu kata terakhir
sebelum saya selesai di sini.

00:37:41.930 --> 00:37:45.660
Kebolehcapaian automatik, kebenaran diberitahu
, memang mendapat reputasi buruk

00:37:45.660 --> 00:37:47.540
dalam bidang kami, dengan alasan yang kukuh.

00:37:48.560 --> 00:37:50.000
Tindanan wujud di luar sana.

00:37:51.280 --> 00:37:53.950
Masih terdapat pembangun
yang berfikir bahawa ia menyelesaikan

00:37:53.950 --> 00:37:55.030
semua masalah kebolehaksesan.

00:37:55.030 --> 00:37:56.820
Saya boleh mengautomasikan setiap perkara.

00:37:58.070 --> 00:38:00.870
Masih ada orang yang kini
boleh mengemas kini ini dan berkata,

00:38:00.870 --> 00:38:02.800
mereka fikir AI akan
membetulkan segala-galanya dengan ini.

00:38:02.800 --> 00:38:04.910
Kerana ia automatik.

00:38:04.910 --> 00:38:05.910
Inilah perjanjiannya.

00:38:05.910 --> 00:38:08.350
Pada penghujung hari,
ia adalah portal dan pintu masuk

00:38:08.350 --> 00:38:10.960
ke kawasan yang
sukar dipecahkan.

00:38:10.960 --> 00:38:13.890
Saya katakan ini berulang kali.

00:38:13.890 --> 00:38:19.420
Cengkerang pasukan pembangunan
amat sukar untuk dipecahkan.

00:38:19.420 --> 00:38:21.820
Hari demi hari, kami dalam
medan kebolehcapaian seperti,

00:38:21.820 --> 00:38:23.920
Mengapa mereka tidak menjadikannya
boleh diakses.

00:38:23.920 --> 00:38:26.290
Sejujurnya, saya
juga kecewa, jangan risau.

00:38:26.290 --> 00:38:30.300
Tetapi dengan semua perkara yang
perlu dilakukan oleh pasukan tangkas, garis masa dihidupkan,

00:38:30.300 --> 00:38:33.480
menolak barang keluar dari pintu,
ia menjadi sangat menyusahkan mereka.

00:38:33.480 --> 00:38:38.730
Dan untuk memecahkan cangkang itu adalah sangat
sukar kerana mereka tidak mahu

00:38:38.730 --> 00:38:41.320
untuk menambah apa-apa lagi tugasan atau apa-apa
lagi perkara kepada mereka dan saya faham.

00:38:41.320 --> 00:38:42.500
Pernah ke sana, lakukan itu.

00:38:42.500 --> 00:38:46.320
Jadi anda perlu perlahan-lahan memfasakannya
untuk membawanya ke tempat yang perlu dituju.

00:38:46.320 --> 00:38:48.960
Ini benar-benar boleh membantu
pasukan pembangunan belajar dengan pantas

00:38:48.960 --> 00:38:50.410
sambil tidak perlahan.

00:38:50.410 --> 00:38:55.010
Dan ia boleh membina budaya dalam
pasukan pembangunan anda semasa kami pergi.

00:38:55.010 --> 00:38:59.210
Sekali lagi, kembali,
tinjauan webAIM memberitahu kita satu perkara:

00:38:59.210 --> 00:39:00.912
perkara yang kami lakukan dari
sudut automasi

00:39:00.913 --> 00:39:01.600
masih tidak berfungsi.

00:39:01.600 --> 00:39:04.890
Kami hanya membaling ke dinding
dan berkata, hey, lakukan automasi.

00:39:04.890 --> 00:39:06.890
Itu tidak berkesan.

00:39:06.890 --> 00:39:08.398
Berperingkat-peringkat, mempunyai rancangan,

00:39:08.399 --> 00:39:10.530
memahami
secara konsisten apa yang kita ada

00:39:10.530 --> 00:39:15.720
untuk memastikan ia bertahan akan
membantu semua pasukan pembangunan

00:39:15.720 --> 00:39:18.040
ambil kebolehaksesan
dan jalankan dengannya.

00:39:18.040 --> 00:39:23.030
Jadi perkara terakhir saya ialah mari kita bina
automasi kebolehcapaian yang lebih baik.

00:39:23.030 --> 00:39:25.490
Mari hapuskan reputasi
bahawa automasi sedang berjalan

00:39:25.491 --> 00:39:26.600
untuk mengatasi segala-galanya.

00:39:26.600 --> 00:39:28.220
Semua orang fikir ia
akan mengendalikan dunia.

00:39:28.220 --> 00:39:29.260
Tidak.

00:39:29.260 --> 00:39:32.790
Ia adalah pintu masuk ke dalam
pasukan pembangunan dan membenarkan mereka,

00:39:32.790 --> 00:39:35.320
benar-benar mempelajari
kebolehcapaian pada halaju

00:39:35.320 --> 00:39:39.170
dan bina budaya itu di sekitar
kebolehcapaian pada masa hadapan.

00:39:39.170 --> 00:39:41.480
Jadi mari kita bina
automasi "a11y" yang lebih baik

00:39:41.480 --> 00:39:45.520
dan mari dapatkan kebolehaksesan
sebagai sebahagian daripada kitaran hayat dev.

00:39:46.700 --> 00:39:47.210
Dan itu sahaja.

00:39:47.210 --> 00:39:49.020
Dan itu sahaja untuk saya.

00:39:49.020 --> 00:39:50.020
Woohoo.

00:39:51.060 --> 00:39:52.060
Saya mungkin akan membuat lebih banyak kopi sekarang.

00:39:53.010 --> 00:39:55.080
<v Joost> Nah,
anda telah mendapat kopi anda.

00:39:55.080 --> 00:39:55.760
Itu pasti.

00:39:55.760 --> 00:39:56.490
Terima kasih, Mark.

00:39:56.490 --> 00:39:57.830
Itu sangat bagus.

00:39:57.830 --> 00:39:59.460
Terima kasih banyak-banyak.

00:39:59.460 --> 00:40:01.040
Saya sedang membuat nota.

00:40:01.040 --> 00:40:03.010
Salah satu
perkara pertama yang saya sedar

00:40:03.010 --> 00:40:05.963
semasa saya melihat
pembentangan anda...

00:40:05.964 --> 00:40:07.620
Kami sentiasa mempunyai banyak

00:40:07.620 --> 00:40:10.140
ujian automatik di
Yoast, yang saya dapati.

00:40:11.160 --> 00:40:14.520
Dan saya tidak fikir kita pernah
benar-benar sampai ke titik

00:40:14.520 --> 00:40:17.270
di mana kami melakukan banyak
ujian kebolehaksesan automatik.

00:40:18.340 --> 00:40:22.120
Tetapi kebanyakan perkara ini kelihatan
seperti ia sebenarnya sangat mudah

00:40:22.120 --> 00:40:24.080
untuk menyalin tampal dari satu
projek ke projek yang lain.

00:40:24.980 --> 00:40:25.330
<v Mark> Ya.

00:40:25.330 --> 00:40:27.200
<v Joost> Adakah terdapat mana-mana
tempat di mana orang berkongsi

00:40:27.200 --> 00:40:32.180
perkara ini dalam talian sumber terbuka
dengan cara yang boleh kita lakukan?

00:40:32.180 --> 00:40:33.120
Di manakah anda melakukan itu?

00:40:34.610 --> 00:40:37.820
<v Mark> Jadi saya boleh berkongsi ini dengan
semua orang yang berada di saluran Slack

00:40:37.820 --> 00:40:39.290
dan saya akan berkongsinya di
Twitter dan LinkedIn.

00:40:39.290 --> 00:40:45.320
Jadi saya sedang membuat
keseluruhan dek sebenarnya.

00:40:45.320 --> 00:40:47.830
Ia adalah salah satu perkara yang
sedang saya lakukan.

00:40:47.830 --> 00:40:52.930
Saya sebenarnya sedang membuat keseluruhan
set contoh yang boleh diakses

00:40:52.930 --> 00:40:53.880
yang wujud di luar sana.

00:40:53.880 --> 00:40:55.220
Saya boleh berkongsi perkara itu dengan
semua orang selepas ini.

00:40:55.220 --> 00:40:56.620
Ia hanya mempunyai pasangan
di sana sekarang.

00:40:56.620 --> 00:40:57.900
Ini React saya
pada telefon Cypher saya.

00:40:57.900 --> 00:41:01.340
Saya melakukannya apabila saya mempunyai masa, tetapi apa
yang berlaku apabila anda mempunyai dua anak?

00:41:01.340 --> 00:41:04.760
Tetapi saya ada contoh di luar sana
yang berusaha untuk menunjukkannya.

00:41:05.880 --> 00:41:08.160
Terdapat juga beberapa contoh
yang wujud di luar sana.

00:41:08.160 --> 00:41:13.580
Saya rasa sumber terbuka bijak, Deque
Systems mempunyai beberapa untuk teras kapak.

00:41:13.580 --> 00:41:14.960
Ada beberapa sahaja.

00:41:14.960 --> 00:41:18.230
Tetapi matlamat saya adalah untuk membuat
perpustakaan contoh untuk dipamerkan

00:41:18.230 --> 00:41:20.290
betapa mudahnya untuk menyalin
dan menampal perkara itu.

00:41:20.290 --> 00:41:23.350
Kerana sesungguhnya, apa yang anda
bincangkan, itulah kesnya.

00:41:23.350 --> 00:41:27.360
Anda benar-benar boleh menyalin dan menampal
sebaik sahaja anda mempunyai kes ujian tersebut

00:41:27.360 --> 00:41:27.930
secara menyeluruh.

00:41:27.930 --> 00:41:29.940
Dan semua orang cenderung melakukan
lompatan itu kepada saya untuk menjadi seperti,

00:41:29.940 --> 00:41:31.450
salin dan tampal seperti, Mark,
apa yang awak cakapkan?

00:41:31.450 --> 00:41:32.280
Anda tidak menyalin dan menampal.

00:41:32.280 --> 00:41:33.370
Saya rasa, awak boleh.

00:41:33.370 --> 00:41:36.230
Anda sediakan kes ujian anda
dengan betul dan semuanya disediakan

00:41:36.230 --> 00:41:38.480
dengan cara ia akan
dibaca boleh diakses.

00:41:38.480 --> 00:41:39.440
Ia agak mudah.

00:41:39.440 --> 00:41:43.510
Jadi ya, saya boleh menghantar beberapa
sumber yang saya tahu selepas ini juga.

00:41:44.380 --> 00:41:47.290
<v Joost> Ya,
itu bagus kerana saya tahu

00:41:47.290 --> 00:41:50.880
belum terdapat banyak perkara ini dalam teras WordPress.

00:41:50.880 --> 00:41:53.243
Dan saya fikir ia
akan memberi manfaat yang besar

00:41:53.244 --> 00:41:57.000
daripada melakukan lebih
daripada itu kerana saya bersetuju dengan anda.

00:41:57.000 --> 00:42:03.260
Perkara yang paling saya dengar menentang
kerja kebolehcapaian seperti ini ialah,

00:42:03.260 --> 00:42:04.710
ya ia memperlahankan segala-galanya.

00:42:04.710 --> 00:42:08.140
Dan rasanya, saya muak dan
bosan mendengar hujah itu...

00:42:09.680 --> 00:42:12.520
<v Mark> Ke mana-mana dan ke mana sahaja saya
pergi, itu pertikaian yang sama berakhir

00:42:12.520 --> 00:42:13.070
dan sekali lagi.

00:42:13.070 --> 00:42:14.546
Dan sekali lagi,
itulah tolak balik awal

00:42:14.547 --> 00:42:18.250
yang perlu kita lawan.
Ia hanya akan melambatkan kita.

00:42:18.250 --> 00:42:21.080
Dan sebenarnya,
itu pengalaman saya

00:42:21.080 --> 00:42:25.750
dengan memasukkan secara berperingkat telah berfungsi
dengan baik untuk mendapatkan pasukan

00:42:25.750 --> 00:42:28.260
untuk menjadi seperti, hei,
ia adalah tambahan yang sangat mudah

00:42:28.260 --> 00:42:29.790
untuk apa yang kami lakukan sekarang.

00:42:29.790 --> 00:42:31.390
Apa sahaja yang anda gunakan,
kami akan membinanya

00:42:31.390 --> 00:42:32.280
dengan apa yang kamu ada.

00:42:33.300 --> 00:42:34.210
<v Joost> Sempurna.

00:42:34.210 --> 00:42:36.780
OK, kami ada
soalan pertama yang masuk.

00:42:36.780 --> 00:42:40.040
Ben Ogilfee bertanya,
adakah anda mengetahui sebarang pertimbangan

00:42:40.040 --> 00:42:45.010
atau pengehadan beberapa
pendekatan ini apabila ia terpakai

00:42:45.010 --> 00:42:46.420
ke binaan WordPress?

00:42:46.420 --> 00:42:47.600
<v Mark> Ya.

00:42:47.600 --> 00:42:51.460
Beberapa perkara yang kami bincangkan
setakat berterabur,

00:42:51.460 --> 00:42:55.110
kebolehcapaian membina sendiri,
seperti integrasi sebenar

00:42:55.110 --> 00:42:57.840
belum wujud lagi
dalam binaan WordPress.

00:42:57.840 --> 00:43:01.630
Jadi ada di antaranya, beberapa
tulisan yang saya semak di sana memang wujud

00:43:01.630 --> 00:43:02.960
untuknya, tetapi ada yang tidak.

00:43:02.960 --> 00:43:05.100
Itu hanyalah hasil daripada cara
beberapa perpustakaan ujian

00:43:05.100 --> 00:43:06.360
dan semuanya berfungsi.

00:43:06.360 --> 00:43:10.300
Jadi itulah satu-satunya
batasan yang wujud sekarang.

00:43:10.300 --> 00:43:14.690
Cuma adakah ia tersedia untuk
binaan itu sendiri yang ada di luar sana?

00:43:14.690 --> 00:43:17.610
Sejujurnya, ia sukar
kerana kadang-kadang suka

00:43:17.610 --> 00:43:22.630
apabila anda menjalankan perkara dengan
itu, anda menghadapi masalah

00:43:22.630 --> 00:43:25.910
di mana anda tidak mempunyainya.

00:43:25.910 --> 00:43:28.900
Contohnya,
saya tahu saya sedang melihat satu.

00:43:28.900 --> 00:43:31.200
Saya rasa ia adalah Vue.

00:43:31.200 --> 00:43:33.630
Tapak WordPress
telah dibina dalam Vue.

00:43:33.630 --> 00:43:35.880
Ia tidak mempunyai
peraturan kebolehaksesan atau "linting",

00:43:35.880 --> 00:43:38.830
tetapi terdapat "linter" umum yang
mempunyai peraturan kebolehaksesan di dalamnya.

00:43:38.830 --> 00:43:41.190
Senario kes terburuk,
tarik masuk yang umum.

00:43:41.190 --> 00:43:44.660
Anda sekurang-kurangnya mendapat
semakan kebolehaksesan semasa kandungan dibina.

00:43:44.660 --> 00:43:47.260
Tetapi sebenarnya hadnya ialah,
adakah ia tersedia atau tidak

00:43:47.260 --> 00:43:48.810
dari sudut linting atau
perpustakaan?

00:43:49.500 --> 00:43:50.540
<v Joost> Ya, bagus.

00:43:53.170 --> 00:43:56.640
Ben Eisenberg bertanya,
bagaimana pula dengan mengemas kini tapak lama?

00:43:56.640 --> 00:43:59.241
Apakah kemenangan mudah untuk
difokuskan untuk tapak lama

00:43:59.242 --> 00:44:00.790
yang perlu dikekalkan?

00:44:00.790 --> 00:44:01.730
<v Mark> Oh, okay.

00:44:01.730 --> 00:44:04.450
Jadi ini adalah dua perkara
dengan tapak lama.

00:44:04.450 --> 00:44:09.810
Jadi satu yang saya selalu cadangkan ialah
dengan tapak lama itu sendiri,

00:44:09.810 --> 00:44:12.473
terdapat dua perkara
yang boleh anda lakukan bergantung

00:44:12.474 --> 00:44:14.670
tentang sejauh mana anda benar-benar mengemas kininya,

00:44:15.720 --> 00:44:18.590
jika anda ingin menyemak semula
dan mengemas kini kod lama, tidak mengapa.

00:44:18.590 --> 00:44:21.750
Tetapi ada beberapa pasukan yang
saya tahu yang sebenarnya telah

00:44:21.750 --> 00:44:24.130
baru sahaja berlalu – dan saya tahu
semua orang akan menggigil

00:44:24.130 --> 00:44:27.280
apabila saya mengatakan ini – dan mendapati
beberapa isu mudah

00:44:27.280 --> 00:44:30.020
kerana mereka sebenarnya tidak
mempunyai akses kepada kod itu.

00:44:30.020 --> 00:44:32.183
Mereka baru sahaja membaca
dan menambah JavaScript

00:44:32.184 --> 00:44:33.560
ke dalam isu khusus yang ditetapkan.

00:44:33.560 --> 00:44:35.310
Mereka tidak akan melaluinya dan berkata
seperti hey beri saya perkara umum.

00:44:35.310 --> 00:44:38.120
Mereka sedang membetulkan
isu khusus dengan JavaScript.

00:44:38.120 --> 00:44:39.220
Itu satu cara.

00:44:39.220 --> 00:44:44.170
Perkara lain yang saya cadangkan untuk
tapak lama ialah jika anda mempunyai cara

00:44:44.170 --> 00:44:46.830
untuk menyediakan
ujian penyepaduan untuk diri anda seperti,

00:44:46.830 --> 00:44:48.690
Hei sediakan perpustakaan untuk
meneliti perkara itu

00:44:48.690 --> 00:44:52.550
dan semak isu, sekurang-kurangnya
, betulkan isu automatik.

00:44:52.550 --> 00:44:56.880
Kebanyakan tapak lama itu sendiri
sebenarnya dilakukan dalam HTML semantik.

00:44:56.880 --> 00:44:59.840
Jadi kebanyakan isu
yang anda temui berlaku

00:44:59.840 --> 00:45:06.750
kerana ia kehilangan
atribut aria atau perkara seperti itu dengan tidak betul.

00:45:06.750 --> 00:45:09.950
Jadi dari segi semantiknya ia bagus, cuma
anda kehilangan perkara kecil.

00:45:09.950 --> 00:45:13.270
Jika anda boleh menjalankan "suite" ujian
terhadap itu atau sambungan,

00:45:13.270 --> 00:45:15.920
yang menjadikannya lebih mudah untuk dilakukan tetapi
dua perkara itu biasanya

00:45:15.920 --> 00:45:18.160
apa yang saya lihat untuk tapak lama.

00:45:18.160 --> 00:45:21.220
Hanya cuba membetulkan perkara yang boleh anda
betulkan, sama ada dengan JavaScript

00:45:21.220 --> 00:45:23.810
atau yang lain-lain dan cuma
keluarkan isu mudah.

00:45:25.420 --> 00:45:26.940
<v Joost> Sejuk.

00:45:26.940 --> 00:45:30.670
Kami ada soalan lain atau sebenarnya
saya rasa ia adalah tiga soalan

00:45:30.670 --> 00:45:32.250
jadi saya akan tanya
mereka satu persatu.

00:45:32.250 --> 00:45:36.240
Daripada Scott Thorneburn: Berapa
lama purata masa yang diambil

00:45:36.240 --> 00:45:39.140
untuk menjejaskan perubahan apabila anda
membawa ini dengan pasukan Dev.

00:45:40.430 --> 00:45:41.110
<v Mark> Whoo.

00:45:41.110 --> 00:45:46.720
OK, jadi fasa satu dan fasa
dua, khusus untuk linting

00:45:46.720 --> 00:45:49.550
jika anda tahu bahawa mereka
menggunakan linter tertentu,

00:45:49.550 --> 00:45:51.500
dan anda boleh katakan hidupkan
peraturan kebolehaksesan,

00:45:51.500 --> 00:45:53.720
fasa pertama itu boleh mengambil masa seminggu.

00:45:53.720 --> 00:45:55.460
Dan jadi seperti ya, ini
adalah sebahagian daripada proses sekarang.

00:45:55.460 --> 00:45:58.540
Kami menggunakan
peraturan kebolehaksesan dan anda perlu membetulkannya.

00:45:58.540 --> 00:46:04.790
Yang paling pantas saya lihat fasa
satu, fasa dua ambil ialah sebulan

00:46:04.790 --> 00:46:08.790
jadi jika anda melakukan dua minggu
pecut dua, seperti dua pecut.

00:46:10.210 --> 00:46:12.370
Jadi biasanya walaupun ia
mungkin tentang ini.

00:46:12.370 --> 00:46:14.430
Fasa pertama biasanya
mengenai satu atau dua pecut.

00:46:15.440 --> 00:46:20.900
Fasa ketiga, biasanya kerana ia adalah
orang QA dan orang QA sangat mengambil berat

00:46:20.900 --> 00:46:22.990
tentang ujian UI yang mereka tulis.

00:46:22.990 --> 00:46:25.990
Ia biasanya mengambil masa kira-kira
beberapa bulan, tiga bulan.

00:46:25.990 --> 00:46:27.260
Dan kemudian ujian regresi
, saya akan jujur.

00:46:27.260 --> 00:46:31.230
Ujian regresi adalah ujian yang
menjadi sangat sukar untuk diperolehi.

00:46:31.230 --> 00:46:33.270
Saya bercakap mengenainya dalam hal ini
kerana ia benar-benar hebat

00:46:33.270 --> 00:46:36.620
kerana saya percaya
ia mempunyai banyak nilai.

00:46:36.620 --> 00:46:39.980
Saya hanya melihat dua
pasukan pembangunan atau organisasi yang saya pernah bekerja

00:46:39.980 --> 00:46:42.170
dengan itu sebenarnya telah melakukannya.

00:46:42.170 --> 00:46:45.250
Ia mengambil masa yang lama untuk sampai ke sana
kerana sebaik sahaja anda mendapat fasa satu,

00:46:45.250 --> 00:46:47.720
fasa dua dalam, banyak
kali ia seperti, ya ampun,

00:46:47.720 --> 00:46:49.170
mana datangnya semua
isu ini?

00:46:49.170 --> 00:46:51.360
Dan kemudian anda perlu mula
memikirkan proses untuk membetulkannya

00:46:51.360 --> 00:46:52.750
dan integrasikannya.

00:46:52.750 --> 00:46:55.050
Jadi itu lazimnya
jangka masa walaupun dengan pasukan pembangun.

00:46:56.270 --> 00:46:57.170
<v Joost> Sejuk.

00:46:57.170 --> 00:47:02.930
Dan apakah anggaran
kos dan kelembapan awal

00:47:02.930 --> 00:47:04.620
mengenai projek untuk
mempercepatkan perkara ini?

00:47:04.620 --> 00:47:05.610
<v Mark> Pasti.

00:47:05.610 --> 00:47:07.450
Jadi Linting, tiada apa-apa.

00:47:07.450 --> 00:47:09.110
Tiada hujah
terhadap Linting.

00:47:09.110 --> 00:47:10.660
Jika anda mempunyai linter
yang sedang berjalan sekarang,

00:47:10.660 --> 00:47:13.910
jalankan peraturan kebolehaksesan, ia
dihidupkan, anda tidak memperlahankan apa-apa.

00:47:13.910 --> 00:47:16.920
Anda mungkin mengambil masa 30
saat lagi untuk pembangun pergi,

00:47:16.920 --> 00:47:19.610
oh, saya perlukan atribut alt tentang
ini, faham.

00:47:21.270 --> 00:47:24.850
Untuk sesuatu seperti perpustakaan ujian
dan perkara seperti itu,

00:47:24.850 --> 00:47:27.510
anda mungkin melihat jika saya
menambah ini ke dalam larian pecut,

00:47:27.510 --> 00:47:29.860
ia mungkin melambatkan sedikit
untuk ahli QA anda.

00:47:29.860 --> 00:47:32.740
Walau bagaimanapun,
jika anda mempunyai pasukan QA atau seseorang

00:47:32.740 --> 00:47:35.360
siapa yang menulis sendiri kes ujian, seperti yang kami tunjukkan,

00:47:35.360 --> 00:47:37.430
persediaan awal adalah
bahagian yang sukar.

00:47:37.430 --> 00:47:40.470
Selepas itu, ia hanyalah jenis
salin dan tampal serta ulang.

00:47:40.470 --> 00:47:44.200
Jadi perlahan mungkin adalah satu
atau dua pecut untuk menyiapkannya dan berjalan,

00:47:44.200 --> 00:47:46.620
tetapi sebenarnya tidak
banyak kos untuk kelembapan.

00:47:46.620 --> 00:47:47.810
Ujian regresi, pasti.

00:47:47.810 --> 00:47:50.010
Itu memerlukan sedikit masa untuk
memahami, Hei, bagaimana keadaan saya

00:47:50.010 --> 00:47:52.060
untuk menulis
ujian regresi berfungsi untuk sesuatu.

00:47:52.060 --> 00:47:54.361
Tetapi dua yang pertama,
yang pertama secara khusus,

00:47:54.362 --> 00:47:56.020
tiada masalah memperlahankan.

00:47:56.020 --> 00:47:58.530
Yang kedua, mungkin ada
sedikit kelembapan, tetapi semuanya

00:47:58.530 --> 00:48:00.770
hanya bergantung pada
struktur projek juga.

00:48:00.770 --> 00:48:01.900
<v Joost> Jelas.

00:48:01.900 --> 00:48:06.240
Dan bagaimana anda mendapat persetujuan dengan
Dev tentang alat automatik yang hendak digunakan?

00:48:06.240 --> 00:48:10.610
Adakah anda sentiasa menggunakan
apa yang mereka sudah gunakan?

00:48:10.610 --> 00:48:13.150
<v Mark> Saya sentiasa lalai
dengan apa yang mereka lakukan.

00:48:13.150 --> 00:48:16.700
Soalan pertama yang saya tanya ialah, Hei,
apa yang anda gunakan untuk satu pasukan?

00:48:16.700 --> 00:48:18.793
Apakah yang anda gunakan untuk
ujian automatik?

00:48:18.794 --> 00:48:23.520
Dan kemudian kami mengisi ruang
dengan kebolehcapaian di sana.

00:48:23.520 --> 00:48:26.570
Kerana jika mereka belum
membuat keputusan, saya selalu berkata begini,

00:48:26.570 --> 00:48:30.030
jika mereka belum memutuskan
strategi ujian, tolak mereka

00:48:30.030 --> 00:48:32.690
untuk memikirkannya sendiri
kerana jika anda pergi dan berkata, baiklah,

00:48:32.690 --> 00:48:36.170
kita sepatutnya menggunakan ini,
ia sentiasa berakhir dengan bencana.

00:48:36.170 --> 00:48:38.200
Kerana kemudian mereka mula menjadi
seperti, oh tidak, tidak, tidak,

00:48:38.200 --> 00:48:38.820
kita akan gunakan ini.

00:48:38.820 --> 00:48:39.530
Ia seperti, OK, hebat.

00:48:39.530 --> 00:48:43.010
Jadi jika pasukan sudah tahu,
pergi dengan apa yang mereka ada, pergi

00:48:43.010 --> 00:48:45.650
dengan apa yang mereka gunakan dan berkata,
Hei, kami akan masuk

00:48:45.650 --> 00:48:48.130
dengan kebolehaksesan dengan ini.
Jika mereka tidak.

00:48:48.130 --> 00:48:51.190
Jadilah seperti, baiklah, kamu fikirkan dahulu.

00:48:51.190 --> 00:48:52.270
Ini hanya pengalaman saya.

00:48:52.270 --> 00:48:53.940
Kamu fikirkan dulu,
saya akan kembali dan belajar

00:48:53.940 --> 00:48:56.020
perkara yang patut kita lakukan dari
segi kebolehcapaian sesuatu.

00:48:56.020 --> 00:48:59.140
Jika kita memaksanya daripada kebolehcapaian,
maka ia akan menjadi kacau bilau.

00:48:59.140 --> 00:49:02.250
<v Joost> Ya, saya amat menghargainya.

00:49:02.250 --> 00:49:06.840
Andrea Fershia bertanya, pada 2017,
pelayan digital kerajaan UK

00:49:06.840 --> 00:49:11.280
menjalankan audit terhadap
penyemak automatik kebolehcapaian yang paling popular

00:49:11.280 --> 00:49:14.750
dan mendapati bahawa yang terbaik pun
dapat mencari hanya 40%

00:49:14.750 --> 00:49:15.570
isu.

00:49:15.570 --> 00:49:15.910
<v Mark> Ya.

00:49:16.996 --> 00:49:19.850
<v Joost> Adakah anda tahu secara kebetulan jika
audit baharu telah dibuat sejak itu,

00:49:19.850 --> 00:49:23.260
sama ada ketepatan
alatan ini secara amnya telah bertambah baik?

00:49:23.978 --> 00:49:26.410
<v Mark> Sudah tentu, jadi saya akan ringkaskan
yang ini dengan cepat.

00:49:26.410 --> 00:49:31.640
Andrea, itulah istilah umum;
30 hingga 40% daripada isu kebolehaksesan.

00:49:31.640 --> 00:49:34.970
Satu-satunya perkara yang
boleh saya katakan berbeza ialah,

00:49:34.970 --> 00:49:36.950
Deque Systems membuat kajian untuk ini.

00:49:36.950 --> 00:49:40.080
Orang lain juga membuat kajian untuk
ini, saya lupa siapa dia.

00:49:40.080 --> 00:49:43.410
Deque Systems mengambil semua
audit kebolehaksesan mereka yang telah mereka lakukan

00:49:43.410 --> 00:49:45.140
dari sudut manual,
sudut automatik.

00:49:45.140 --> 00:49:48.230
Mereka menyusunnya dan
berkata, mengikut kelantangan,

00:49:48.230 --> 00:49:50.450
berapa banyak isu
yang ditangkap oleh automasi?

00:49:50.450 --> 00:49:54.130
Mereka keluar dengan, saya rasa
56%, daripada semua isu kebolehaksesan

00:49:54.130 --> 00:49:54.800
itu manual.

00:49:54.800 --> 00:49:57.040
Dan automatik
ditangkap oleh automasi.

00:49:57.040 --> 00:50:00.000
Itu mengikut volum, bukan dengan
kriteria kejayaan atau apa-apa seperti itu.

00:50:00.000 --> 00:50:02.960
Jadi sekali lagi, begitulah cara anda melihatnya.

00:50:02.960 --> 00:50:06.410
Jadi jika anda mengatakan 30% daripada
kriteria kejayaan, 100%, itulah yang saya katakan,

00:50:06.410 --> 00:50:07.760
100%, maaf.

00:50:07.760 --> 00:50:09.650
Itulah yang biasa saya katakan
, kerana ia adalah sepertiga bawah

00:50:09.650 --> 00:50:11.000
isu kebolehaksesan.

00:50:11.000 --> 00:50:13.130
Jika anda melihatnya mengikut kelantangan,
terdapat beberapa kajian di luar sana

00:50:13.130 --> 00:50:15.740
yang mengatakan ia lebih hampir kepada 50
kerana hanya semua isu

00:50:15.740 --> 00:50:18.220
yang wujud di luar sana di
web, tetapi saya tidak tahu

00:50:18.220 --> 00:50:20.180
daripada mana-mana yang baharu yang
telah dilakukan, tidak.

00:50:21.970 --> 00:50:26.870
<v Joost> Dengan itu kami telah sampai ke
penghujung senarai soalan kami

00:50:26.870 --> 00:50:29.090
dan kami akan melegakan anda.

00:50:29.090 --> 00:50:32.340
Terima kasih sekali lagi Mark atas
pembentangan anda yang sangat baik

00:50:32.340 --> 00:50:34.550
dan terima kasih kerana sudi hadir.

00:50:35.600 --> 00:50:38.140
Anda boleh meneruskan
perbualan di sembang

00:50:38.140 --> 00:50:45.390
atau media sosial menggunakan
hashtag #wpa11yday dan #wpad2023.

00:50:45.390 --> 00:50:47.290
Kami juga amat
menghargai jika anda pergi

00:50:47.290 --> 00:50:51.400
kebolehcapaian WP

00:50:51.400 --> 00:50:54.130
untuk memberikan
maklum balas kelajuan tanpa nama untuk pembesar suara kami

00:50:54.130 --> 00:50:59.560
pada pembentangan kami dan sementara anda
berani, anda boleh masuk untuk memenangi t-shirt.

00:50:59.560 --> 00:51:02.550
Nantikan cara
membuat kod untuk akses kata kunci

00:51:02.550 --> 00:51:06.440
dalam WordPress akan datang seterusnya
dengan Priti Rohra di bahagian atas

00:51:06.440 --> 00:51:09.010
jam atau 12:00 UTC.

00:51:09.010 --> 00:51:12.460
Dan sementara anda menunggu, jangan
lupa untuk melawat halaman penaja kami

00:51:12.460 --> 00:51:17.020
untuk merebut barang curian maya dan masuk
untuk memenangi beberapa hadiah hebat.

00:51:17.020 --> 00:51:20.120
Ini adalah saya yang menandatangani
sebagai MC untuk hari ini juga.

00:51:20.120 --> 00:51:23.550
Saya harap anda menikmati baki
hari kebolehcapaian WordPress

00:51:23.550 --> 00:51:25.380
dan kami akan berjumpa anda
di sini selepas rehat anda.

00:51:28.620 --> 00:51:33.260
<v Penceramah 1> Terima kasih kepada
penaja Hari Kebolehcapaian WordPress 2023.

00:51:33.260 --> 00:51:36.140
Penaja platinum: Equalize Digital.

00:51:36.140 --> 00:51:38.890
Digital

00:51:38.890 --> 00:51:41.640
ialah
alat pengimbasan kebolehcapaian automatik

00:51:41.640 --> 00:51:44.820
yang membantu tapak web WordPress
menjadi dan kekal boleh diakses.

00:51:46.070 --> 00:51:51.010
Penaja platinum Borang Graviti:
Borang Graviti adalah profesional

00:51:51.010 --> 00:51:54.170
pembina borang yang anda
perlukan untuk mencipta cantik,

00:51:54.170 --> 00:51:57.270
borang yang berkuasa dan boleh diakses.

00:51:57.270 --> 00:52:03.170
Penaja emas 20i, Deque,
Empire Caption Solutions,

00:52:03.170 --> 00:52:05.360
Enjin boleh ditekan dan WP.

00:52:06.930 --> 00:52:13.800
Penaja perak, Code Geek, Drake
Cooper, GoDaddy, LoneRock Point,

00:52:13.800 --> 00:52:19.030
NerdPress, Laman Web Semalaman oleh
KineticIRIS, Raiola Networks,

00:52:20.290 --> 00:52:23.300
A11Y Collective, dan Blogsmith.

00:52:25.170 --> 00:52:30.580
Penaja gangsa, AccessiCart,
Hosting Web GreenGeeks,

00:52:30.580 --> 00:52:38.580
Analisis Dewan Perundingan SEO,
HDC, ITX, Ivy Cat, Metabox,

00:52:42.330 --> 00:52:47.243
Tukang Masak Pixel, Hanya Jadualkan
Janji Temu, SiteGround,

00:52:47.244 --> 00:52:52.470
Termageddon, Kurang Diwakili
dalam Tech,  Weglot dan Yoast.

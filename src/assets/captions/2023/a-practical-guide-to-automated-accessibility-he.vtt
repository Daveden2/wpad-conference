WEBVTT

00:00:00.984 --> 00:00:05.690
יום הנגישות של וורדפס
2023, מדריך מעשי

00:00:05.690 --> 00:00:09.930
לנגישות אוטומטית
עם מארק סטדמן, מנהל,

00:00:09.930 --> 00:00:13.220
נגישות ניידת ב-
Fidelity Investments.

00:00:13.220 --> 00:00:17.210
מצגת זו
הוקלטה ב-28 בספטמבר 2023.

00:00:17.210 --> 00:00:22.500
יוסט דה ואלק: לכבוד הוא לי
להציג את הדובר הבא שלנו,

00:00:22.500 --> 00:00:25.750
מארק סטדמן, שידבר
איתנו על מדריך מעשי

00:00:25.750 --> 00:00:27.500
לנגישות אוטומטית.

00:00:29.170 --> 00:00:32.130
מארק הוא מנהל
הנדסת תוכנה לנגישות ניידת

00:00:32.130 --> 00:00:33.870
ב-Fidelity Investments.

00:00:33.870 --> 00:00:38.410
ועם להיטוּת
לאוטומציה של נגישות וקידום תעדוף

00:00:38.410 --> 00:00:42.960
נגישות בקרב מפתחים, מארק נמצא במשימה

00:00:42.960 --> 00:00:47.170
להפוך את התוכן באינטרנט ובניידים
לנגיש לכל.

00:00:47.170 --> 00:00:51.340
״משימה קטנה״ בסך הכל,
לא מאמץ גדול.

00:00:51.340 --> 00:00:55.240
המוקד העיקרי שלו סובב סביב
שיתוף פעולה עם צוותי פיתוח

00:00:55.240 --> 00:00:57.470
כדי לשלב נגישות,
וזה כל כך נחמד.

00:00:57.470 --> 00:01:00.100
זה כבר
הדובר השלישי שאני מציג.

00:01:00.100 --> 00:01:02.140
כולם עובדים ביחד
עם צוותי פיתוח.

00:01:02.140 --> 00:01:05.580
אני מאוד אוהב לראות את זה.

00:01:05.580 --> 00:01:08.910
הוא רואה בכך מרכיב חיוני
בפיתוח מתמשך

00:01:08.910 --> 00:01:11.430 
ותהליכי אינטגרציה
מתמשכים
.

00:01:11.430 --> 00:01:13.840
לא רק שהוא היה
פורץ הדרך ביצירת

00:01:13.840 --> 00:01:17.850
פתרונות נגישות אוטומטיים,
הוא גם עזר

00:01:17.850 --> 00:01:20.600
בהטמעת
פתרונות אלה במארג

00:01:20.600 --> 00:01:23.960
של צוותי פיתוח וארגונים
שהוא עבד עבורם.

00:01:23.960 --> 00:01:28.120
בבקשה, הצטרפו אלי
בברכה חמה למארק סטדמן.

00:01:28.120 --> 00:01:29.910
מארק, המיקרופון שלך.

00:01:29.910 --> 00:01:30.960
מארק סטדמן: מדהים.

00:01:30.960 --> 00:01:31.280
טוב.

00:01:31.280 --> 00:01:33.600
ובכן, עבורי,
זה בוקר טוב לכל.

00:01:33.600 --> 00:01:37.650
השעה שש בבוקר ושתיתי קפה, אז
כדאי לכולם להיזהר עכשיו

00:01:37.650 --> 00:01:42.220
כי יכול להיות שאני יורה על
כל הצילינדרים כי מפוצץ

00:01:42.220 --> 00:01:42.670
בקפה.

00:01:42.670 --> 00:01:46.390
אז בוקר טוב, אחר צהריים טובים,
ערב טוב, לא משנה באיזה חלק של היום מדובר.

00:01:46.390 --> 00:01:47.600
זה מדהים.

00:01:47.600 --> 00:01:50.414
בשבילי, בארה"ב,
זה אומר להתחיל את היום

00:01:50.415 --> 00:01:52.290
עם נגישות אוטומטית.

00:01:52.290 --> 00:01:56.610
אז, אני מאוד מתרגש
לשוחח עם כולכם היום.

00:01:56.610 --> 00:01:59.710
וסוג של להניע את עצמנו
כי יש לנו הרבה דברים

00:01:59.710 --> 00:02:01.820
לכסות תוך פרק
זמן קצר, שהוא בדרך כלל

00:02:01.820 --> 00:02:02.680
פרק הזמן בו אני עושה את כל הרצאותיי.

00:02:02.680 --> 00:02:05.880
אז שוב, בקצרה,
מארק סטדמן, אני רק רוצה

00:02:05.880 --> 00:02:07.350
להוסיף את הדברים האלה
בזריזות.

00:02:07.350 --> 00:02:10.070
מי שרוצה לעקוב אחרי
בטוויטר או ב-X, או מה שזה לא יהיה

00:02:10.070 --> 00:02:15.120
בקצב הזה, אני
@steady, STEADY 5063.

00:02:15.120 --> 00:02:18.630
ותוכלו למצוא אותי
בלינקדאין (עם) Mark Steadman

00:02:18.630 --> 00:02:20.470
או פשוט mark_steady בחיפוש באינטרנט.

00:02:21.490 --> 00:02:25.370
אז, מטרות הלמידה
למצגת זו.

00:02:25.370 --> 00:02:28.350
אני אוהב לעשות את זה כי
ההרצאה הזו היא אחת מאלה

00:02:28.350 --> 00:02:30.540
שאני מאוד נלהב לגביהן.

00:02:30.540 --> 00:02:33.920
מדוע אוטומציה של נגישות
חשובה בבניית בסיס

00:02:33.920 --> 00:02:37.220
של נגישות במחזור
ההיבט הפיתוחי?

00:02:37.220 --> 00:02:38.830
מדוע הפופולריות שלו עלתה?

00:02:38.830 --> 00:02:42.210
והבעיות שצצו
בעקבות הפופולריות.

00:02:42.210 --> 00:02:45.900
כיצד להשתמש ביעילות בלינקדאין
כצעד ראשון בדרך.

00:02:45.900 --> 00:02:47.240
ולמה זו
נקודת התחלה כל כך נהדרת?

00:02:47.240 --> 00:02:49.692
ואז, כיצד
להשתמש ביעילות בכלי בדיקה

00:02:49.693 --> 00:02:50.820
ובדיקות רגרסיה

00:02:50.820 --> 00:02:53.030
על מנת להבטיח
שהתוכן יהיה נגיש.

00:02:53.030 --> 00:02:55.570
עכשיו, זה נדמה כמו הרבה,
אבל כשנעבור על זה,

00:02:55.570 --> 00:02:57.020
אני קצת אפרט
את זה תוך כדי,

00:02:57.020 --> 00:03:00.460
כדי שיהיה קצת
יותר פשוט וקל 

00:03:00.460 --> 00:03:02.790
אולי למי שלא
מכיר צוותי פיתוח,

00:03:02.790 --> 00:03:04.290
תהליכי פיתוח.

00:03:04.290 --> 00:03:06.820
וגם עבור מפתחים,
ששואלים

00:03:06.820 --> 00:03:10.420
איך אוכל לעשות זאת כמו שצריך 
כדי לכלול נגישות

00:03:10.420 --> 00:03:11.710
כחלק
ממחזור חיי הפיתוח שלי?

00:03:13.070 --> 00:03:16.130
אז נגישות ו-Shift-left.

00:03:16.130 --> 00:03:20.820
כדי להבין איך האוטומציה של
הנגישות הגיעה לשם,

00:03:20.820 --> 00:03:23.160
אתה צריך להבין
לאן הלכה התעשייה.

00:03:23.160 --> 00:03:26.240
ולכן הרוב כנראה
מכירים את זה, אבל זה סוג של

00:03:26.240 --> 00:03:27.470
של הקשר טוב
לכולם כאן.

00:03:27.470 --> 00:03:32.440
אז ה-Shift-left היה רעיון
שזכה לפופולריות ב(זכות)תעשיית ה-DevOps,

00:03:32.440 --> 00:03:37.550
שאמרה, היי, זה זול יותר
למצוא ולתקן באגים מוקדם יותר

00:03:37.550 --> 00:03:40.370 
במחזור חיי הפיתוח.
נכון? היגיון פשוט.

00:03:40.370 --> 00:03:44.450
עם זאת, במשך תקופה ארוכה,
זה לא היה תמיד כך.

00:03:44.450 --> 00:03:47.260
מה שנעשה היה
סוג של מודל מפל-מים

00:03:47.260 --> 00:03:52.800
או מודל שבו
נתכנת, נעשה Push, נעלה לאוויר,

00:03:52.800 --> 00:03:54.200
ונתקן את התוכן אחר כך.

00:03:54.200 --> 00:03:58.280
ובכן, בתעשיית ה-DevOps אמרו,
לא, בואו נעשה לזה Shift-left

00:03:58.280 --> 00:04:00.600
כדי שנוכל לתקן
באגים מוקדם יותר בעלות נמוכה יותר.

00:04:00.600 --> 00:04:03.320
אז, מה שיש לי על המסך
זה דימוי

00:04:03.320 --> 00:04:07.470
שבעצם אומר שאתה מתכנת,
אתה מתכנן, אתה עוקב, עושה קונפיגורציה,

00:04:07.470 --> 00:04:10.100
משחרר גרסה, השקה, לאמת,
ואז זה סוג של לוּפּ,

00:04:10.100 --> 00:04:10.860
לוּפּ אינסופי.

00:04:10.860 --> 00:04:12.650
כי זה בעצם
Shift-left.

00:04:12.650 --> 00:04:16.180
אתה כל הזמן מתקן באגים,
כל הזמן יוצר תוכן,

00:04:16.180 --> 00:04:18.840
וזה עוזר
מנקודת מבט אג׳ילית.

00:04:18.840 --> 00:04:22.900
ובכן, כשזה התחיל להיות
מאוד פופולרי, עלתה השאלה,

00:04:22.900 --> 00:04:25.980
איך נגישות יכולה
להשתלב במודל הזה?

00:04:25.980 --> 00:04:29.520
מכיוון שהגישה לנגישות
תמיד הייתה

00:04:29.520 --> 00:04:32.790
בואו נתקן את זה אחר כך.

00:04:32.790 --> 00:04:35.850
אני בטוח שהתגובה של כולם פה עכשיו
, כנראה שזה לא כל כך טוב.

00:04:35.850 --> 00:04:37.180
שמעתי את זה אלפי פעמים.

00:04:37.180 --> 00:04:37.680
זה נכון.

00:04:37.680 --> 00:04:39.990
זה תמיד היה ככה, 
נתקן את זה מאוחר יותר.

00:04:41.220 --> 00:04:46.460
אבל עם השינוי הזה חשבנו,
היי, האם נוכל להשתלב בזה?

00:04:46.460 --> 00:04:49.830
ואז הגיעה הצמיחה
של הנגישות האוטומטית.

00:04:49.830 --> 00:04:51.650
ואני מעריץ ענק של מלחמת הכוכבים.

00:04:51.650 --> 00:04:53.520
אני יודע שיש מאחוריי רקע של וורדפרס,
אבל אם הייתם יכולים לראות

00:04:53.520 --> 00:04:54.980
יש מאחוריי 
אלף חרבות אור,

00:04:54.980 --> 00:04:56.790
מלא סוואגים
שונים של מלחמת הכוכבים.

00:04:56.790 --> 00:05:00.450
אז הכנתי את הלוגו הזה שאומר,
A11Y wars, עלייתה של האוטומציה

00:05:00.450 --> 00:05:03.770
בפונט מלחמת הכוכבים, כי
זה מה שזה היה בסופו של דבר.

00:05:03.770 --> 00:05:06.640
נגישות אוטומטית
גדלה במהירות כדי להתאים למודל הזה.

00:05:06.640 --> 00:05:12.270
הכל
מספריות נגישות, תוספים, כלי עזר,

00:05:14.790 --> 00:05:17.120
כל דבר, קיבל משהו משלו.

00:05:17.120 --> 00:05:20.522
ואז, עם
הדבר הזה, ניסינו

00:05:20.523 --> 00:05:23.400
לסגור כמה שיותר פערים.

00:05:23.400 --> 00:05:26.230
אז עם כל
שפות הפיתוח השונות, הפריים-וורקס,

00:05:26.230 --> 00:05:29.500
כל זה, ניסינו להתאים
את הדגם הזה כדי שנוכל להכניס

00:05:29.500 --> 00:05:32.850
כמה שיותר נגישות אוטומטית
לתהליכים אלה.

00:05:32.850 --> 00:05:36.390
ועל פניו, זה נראה נפלא, נכון?.

00:05:36.390 --> 00:05:39.070
אז, יש
לזה יתרונות אדירים.

00:05:39.070 --> 00:05:41.520
זו
אינטגרציה קלה ומהירה של נגישות

00:05:41.520 --> 00:05:42.720
לתוך מחזור החיים של הפיתוח.

00:05:42.720 --> 00:05:43.940
האם זה מושלם?

00:05:43.940 --> 00:05:44.930
ממש לא.

00:05:44.930 --> 00:05:47.610
לא, זו רק
כמות מינימלית או כמות קטנה,

00:05:47.610 --> 00:05:49.460
כנראה השליש התחתון
של בעיות הנגישות.

00:05:49.460 --> 00:05:53.460
עם זאת, זה משתלב היטב
בכל תהליך אג׳ייל

00:05:53.460 --> 00:05:55.080
שאנחנו עושים למען נגישות.

00:05:55.080 --> 00:05:58.360
אז זה באמת ניצחון קל
כי אין ויכוח

00:05:58.360 --> 00:05:59.840
מצד מפתח.

00:05:59.840 --> 00:06:02.560
אני רק אומר, היי, אנחנו חייבים
להוסיף את זה, וזה מתאים ישר

00:06:02.560 --> 00:06:04.310
לתוך המערכת שאנו בונים.

00:06:04.310 --> 00:06:06.970
זה עוזר לפתח
ידע בנושא נגישות למפתחים.

00:06:06.970 --> 00:06:09.440
אז רוב הכלים האוטומטיים מגיעים
עם הסבר (על תקנות הנגישות הרלוונטיות)

00:06:09.440 --> 00:06:11.520
או עם לינק להסברים 
שיעזרו לך בנושא.

00:06:12.540 --> 00:06:15.310
תאמינו או לא, זה כופה
פרקטיקות קידוד UI טובות.

00:06:15.310 --> 00:06:19.970
אם יכולתי לראות את כולם כאן ולראות
את כולכם על המסך עכשיו,

00:06:19.970 --> 00:06:22.690
כולם היו מרכינים את ראשם
כשאני אומר, <div> Soup

00:06:22.690 --> 00:06:23.690
הוא לא טוב.

00:06:24.650 --> 00:06:27.720
אז זה למעשה עוזר לאמץ פרקטיקות מומלצות לתיכנות ממשק משתמש.

00:06:29.100 --> 00:06:30.950
זה מאפשר
לאכוף תקנות נגישות כך שתוכלו להשתמש

00:06:30.950 --> 00:06:36.370
ב-GitHub Actions,
וזה מסייע לגבש תרבות

00:06:36.370 --> 00:06:37.560
שכוללת התייחסות לנגישות.

00:06:37.560 --> 00:06:40.480
אתם תשמעו אותי אומר את זה
שוב ושוב בהרצאה הזו.

00:06:40.480 --> 00:06:42.026
זה החלק הכי גדול

00:06:42.027 --> 00:06:44.810
בהשגת נגישות אוטומטית 
בצורה נכונה.

00:06:44.810 --> 00:06:48.220
אם אתה טועה, אתה מאבד אנשים
במהירות, אבל כשאתה עושה זאת כמו שצריך,

00:06:48.220 --> 00:06:51.160
זה עוזר להעמיד בסיס
לבניית תרבות

00:06:51.160 --> 00:06:53.840
של נגישות לאורך זמן.

00:06:53.840 --> 00:06:54.850
זו המטרה הסופית.

00:06:54.850 --> 00:06:58.380
כן, אוטומציה היא
נקודת התחלה, אבל אתה יכול לעזור להטמיע את זה

00:06:58.380 --> 00:07:00.900
לתוך התרבות הפיתוח בקלות

00:07:00.900 --> 00:07:02.440
אם אתה עושה את זה נכון.

00:07:02.440 --> 00:07:05.080
אם אתה לא עושה את זה נכון, אתה עלול
לאבד אנשים מהר יחסית,

00:07:05.080 --> 00:07:07.690
אבל אלו היתרונות הגדולים
של נגישות אוטומטית.

00:07:07.690 --> 00:07:09.700
אז אתם בטח אומרים לעצמכם
, מארק, זה נהדר.

00:07:09.700 --> 00:07:10.380
אז מה?

00:07:10.380 --> 00:07:13.410
למה אני בכלל מדבר איתכם
עכשיו? מה הקטע?

00:07:14.800 --> 00:07:15.650
ובכן, זה עניין חשוב.

00:07:15.650 --> 00:07:17.980
זה הוביל לעומס יתר באוטומציה.

00:07:17.980 --> 00:07:20.320
מה שיש לי על המסך זו
רק ערימה של לוגואים שונים

00:07:20.320 --> 00:07:22.820
של תוספים שונים
שעושים מלא דברים,

00:07:22.820 --> 00:07:25.490
אבל מבחינה הוליסטית
הם עושים את אותו הדבר.

00:07:25.490 --> 00:07:28.740
הם בודקים
בעיות נגישות באופן אוטומטי.

00:07:30.450 --> 00:07:31.610
זה מה שקרה.

00:07:31.610 --> 00:07:36.960
התלהבנו יותר מדי מלפתח אוטומציות,

00:07:36.960 --> 00:07:38.970
להתאים אותן למחזורי החיים האלה,
להתאים למוצרים האלה,

00:07:38.970 --> 00:07:43.170
ומה שקרה בסופו של דבר
הוא שנתעקנו עם עומס יתר.

00:07:43.170 --> 00:07:46.010
ובכל מקום שדיברתי עם מפתחים, 
כל צוות

00:07:46.010 --> 00:07:50.080
שדיברתי איתו (שאל),
איפה לעזאזל להתחיל?

00:07:50.080 --> 00:07:51.560
כי אני לא יודע.

00:07:51.560 --> 00:07:52.770
יש כל כך הרבה אפשרויות.

00:07:52.770 --> 00:07:53.760
אני לא יודע במה להשתמש.

00:07:53.760 --> 00:07:54.530
מה הכי טוב?

00:07:54.530 --> 00:07:56.930
איך זה מתאים לצוות שלי?
מה שזה לא יהיה.

00:07:56.930 --> 00:07:59.580
אז יש לנו מספר
ספריות נגישות בקוד פתוח,

00:07:59.580 --> 00:08:03.360
כמה שקופצות לי, XCOR,
Pali, תוספים לדפדפנים, Wave,

00:08:03.360 --> 00:08:06.740
Lighthouse, Microsoft Insights,
Act Step Tools, נכון?

00:08:06.740 --> 00:08:10.710
יש מלא,
שמתחילים להוסיף כללי נגישות

00:08:10.710 --> 00:08:14.610
וכולם אמרו, יש
ESLint, Acts Linter, יש ASLint,

00:08:14.610 --> 00:08:16.190
ישנן מלא אפשרויות.

00:08:16.190 --> 00:08:20.750
ומפתחים,
מסתכלים על זה ושואלים,

00:08:20.750 --> 00:08:22.030
למה יש כל כך הרבה?

00:08:22.030 --> 00:08:24.070
אני אפילו לא יודע מאיפה להתחיל.

00:08:24.070 --> 00:08:27.060
כי למרות
שמרבית אלו שמקשיבים

00:08:27.060 --> 00:08:29.490
לי עכשיו הם כנראה
בעד נגישות,

00:08:29.490 --> 00:08:32.130
ועבורם זה פשוט, 
תבחר את מה שמתאים לך וקדימה.

00:08:32.130 --> 00:08:33.900
זה פחות ברור בשביל
מישהו שלא יודע הרבה

00:08:33.900 --> 00:08:34.730
על אודות נגישות.

00:08:34.730 --> 00:08:38.140
אז הם יסתכלו ויגידו,
זו הגזמה, אני בחוץ.

00:08:38.140 --> 00:08:40.720
כמה פעמים שמעתי
מישהו אומר, "זה יותר מדי?

00:08:40.720 --> 00:08:43.190
אפילו לא ידעתי מאיפה להתחיל
, פשוט ויתרתי על זה.

00:08:43.190 --> 00:08:45.320
זה הרבה, תאמין או לא.

00:08:45.320 --> 00:08:50.110
ולכן עלינו לנקוט
בגישה שונה כדי להיות מסוגלים

00:08:50.110 --> 00:08:55.920
להתמודד עם העומס ונקודת המבט
שיש 

00:08:55.920 --> 00:08:59.200
למפתחים, שנגישות
היא יותר מדי.

00:08:59.200 --> 00:09:01.250
נכון? נגישות אוטומטית
היא יותר מדי.

00:09:01.250 --> 00:09:03.840
אז, מה הפתרון?

00:09:05.100 --> 00:09:06.990
״אתה מחזיק בגישה מעשית
לנגישות אוטומטית

00:09:06.990 --> 00:09:08.220
מארק, אז גלה לנו את הפתרון.״

00:09:09.370 --> 00:09:10.560
זו אוטומציה הדרגתית.

00:09:11.770 --> 00:09:16.170
הייתה לי הצלחה גדולה 
בלעשות את זה

00:09:16.170 --> 00:09:19.370
ויש לי כמה תרחישי שימוש ממש טובים
לזה וכדי לוודא

00:09:19.370 --> 00:09:20.480
שנבין את זה.

00:09:20.480 --> 00:09:26.160
הדבר החשוב ביותר בנוגע
לביצוע והרצה של אוטומציה

00:09:26.160 --> 00:09:31.450
זה לעשות את זה כמו שצריך
וזה נשמע די מצחיק,

00:09:31.450 --> 00:09:35.700
אבל, כשמדובר באוטומציה הדרגתית
ואולי תסתכלו על זה

00:09:35.700 --> 00:09:38.140
ותגידו, מארק, זה לוקח יותר מדי זמן.

00:09:38.140 --> 00:09:39.150
כן, אתם צודקים.

00:09:39.150 --> 00:09:40.410
זה לוקח זמן.

00:09:40.410 --> 00:09:44.950
אבל אם אתה עושה את זה נכון, זה יוטמע
בארגון שלך

00:09:44.950 --> 00:09:46.550
בצוות המפתחים שלך.

00:09:46.550 --> 00:09:50.310
כך שההדרגתיות מבטיחה
שלא יווצר מצב של עומס יתר על המפתחים

00:09:51.450 --> 00:09:55.340
ואנחנו בונים סביב זה אסטרטגיה
שגם היא

00:09:55.340 --> 00:09:56.190
אחד מהשלבים.

00:09:56.190 --> 00:10:00.170
אז, זה בעצם שלושה
שלבים עם שלב אפס.

00:10:00.170 --> 00:10:03.310
שלב ראשון הוא ניתוח קוד מקור (לינט), שלב שני
הוא ספריות בדיקה אוטומטיות,

00:10:03.310 --> 00:10:07.880
שלב שלישי הוא
בדיקות נסיגה אוטומטיות ושלב האפס הוא הרחבות.

00:10:07.880 --> 00:10:10.710
אני אדבר על שלב האפס ולמה
אני קורא לו ככה לקראת הסוף

00:10:10.710 --> 00:10:14.200
אבל בואו פשוט
נתחיל, כי זה

00:10:14.200 --> 00:10:18.100
ממש מדהים.

00:10:18.100 --> 00:10:20.120
שלב ראשון, ניתוח קוד מקור

00:10:20.120 --> 00:10:22.400
לאלו מכם שלא יודעים
, לינט זה כלי תוכנה

00:10:22.400 --> 00:10:27.440
המבצעת אנליזה סטטית של קוד המקור
כדי לסמן שגיאות תוכנה ובאגים.

00:10:27.440 --> 00:10:31.360
אז בזמן שאני כותב קוד
זה יציג לי את השגיאות

00:10:31.360 --> 00:10:35.020
שאני כותב
בתוך ה-HTML שלי.

00:10:35.020 --> 00:10:37.880
יש שמשתמשים בו עבור
JavaScript, Java,

00:10:37.880 --> 00:10:39.890
ישנם מבחר
כלי לינט 

00:10:39.890 --> 00:10:41.410
לשימושים שונים.

00:10:41.410 --> 00:10:44.260
אבל כולם
מבצעים אנליזה סטטית של קוד.

00:10:45.460 --> 00:10:47.880
היתרונות של בדיקת נגישות באמצעות לינט

00:10:47.880 --> 00:10:50.510
 הן שניתן לאתר
בעיות נגישות בשלב מוקדם.

00:10:51.550 --> 00:10:54.200
יצירת ידע על אודות נגישות
 עבור המפתחים

00:10:54.200 --> 00:10:56.440
בעת הפיתוח 
ולא בשלב מאוחר יותר.

00:10:56.440 --> 00:10:59.520
זה מאפשר לצוותים לבנות
שערי נגישות ב-commit.

00:10:59.520 --> 00:11:03.950
ואני מתכוון, לדוגמה לכך
שאני מפתח עם עמית לצוות,

00:11:03.950 --> 00:11:07.890
אני כותב קוד, אני מבצע בדיקה
אני יכול לראות את השגיאות בקוד המקור

00:11:07.890 --> 00:11:10.720
ואני צריך לחזור ולתקן
אותן, לפני שאני יכול

00:11:10.720 --> 00:11:12.740
לבצע push לקוד.

00:11:12.740 --> 00:11:17.030
והחלק הכי מעולה לגבי
לינט הוא שניתן להתאים אותו

00:11:17.030 --> 00:11:19.090
לפריימוורק
שבה מפתחים.

00:11:19.090 --> 00:11:20.800
זו
הסיבה מספר אחת למה זה עובד.

00:11:20.800 --> 00:11:25.120
עכשיו, הגדול ביותר הוא
היצירה האחרונה שם, בהתאמה אישית

00:11:25.120 --> 00:11:27.440
למסגרת
שבה אתה מפתח.

00:11:27.440 --> 00:11:28.670
זה החלק המגניב באמת.

00:11:28.670 --> 00:11:30.650
כשאתה מתחיל להרכיב את זה
, אתה יכול להבין

00:11:30.650 --> 00:11:37.140
במה משתמשים הצוותים שלך,
אם הם משתמשים ב-React, Angular, Vue?

00:11:37.140 --> 00:11:40.290
או אפילו כל סוג אחר של יצירה,
אתה יכול להשתמש בזה לאורך הדרך.

00:11:40.290 --> 00:11:44.000
ומה שבאמת מדהים הוא שבזמן
שאני בונה עם Linting,

00:11:44.000 --> 00:11:45.730
אני יכול למצוא את ה-Linter
שמתאים לזה,

00:11:45.730 --> 00:11:47.550
ואני מבטיח לך
שיש להם כללי נגישות.

00:11:47.550 --> 00:11:52.050
אני הולך להדגים את זה לכולכם
כי זה החלק

00:11:52.050 --> 00:11:52.710
שאני הכי אוהב.

00:11:52.710 --> 00:11:57.840
אני הולך לקפוץ
להדגמת Linting שלנו כאן ממש מהר.

00:11:57.840 --> 00:12:03.060
תן לי להגיע לשם.

00:12:03.060 --> 00:12:04.060
בסדר.

00:12:04.970 --> 00:12:08.750
מה שיש לי כאן הוא שיש לי את
פרויקט React המקסים שלי.

00:12:08.750 --> 00:12:11.160
אני חייב לתת את הרקע על זה
כי זה הפרויקט האהוב עליי

00:12:11.160 --> 00:12:12.190
מכל הזמנים.

00:12:12.190 --> 00:12:14.160
זהו מתחם חרב אור.

00:12:14.160 --> 00:12:16.260
אז אתה קונה חרבות אור
מהאתר.

00:12:16.260 --> 00:12:19.390
וכך פרויקט React הזה
שהשתמשתי בו כמו כל אחד

00:12:19.390 --> 00:12:21.330
של המצגות שלי
שהכנתי לפני שנים.

00:12:21.330 --> 00:12:22.700
זה אחלה כאן.

00:12:22.700 --> 00:12:27.590
אבל בפרויקט הזה, יש לי
רכיב אחד, שהוא פריט לעגלה.

00:12:27.590 --> 00:12:30.740
אז זה רק פריט
שיש לו בעצם תמונה.

00:12:30.740 --> 00:12:34.210
יש לו כותרת לתאר
מהו המוצר בפועל,

00:12:34.210 --> 00:12:35.110
תיאור קטן.

00:12:35.110 --> 00:12:39.680
ואז אני יכול להוסיף
פרטים נוספים על הקליק או שאוכל לקנות אותו שוב?

00:12:39.680 --> 00:12:40.480
זה כל מה שזה.

00:12:40.480 --> 00:12:41.170
קישור פשוט.

00:12:41.170 --> 00:12:43.820
תחשוב כמו
פריט עגלת אמזון שבו משמאל לימין,

00:12:43.820 --> 00:12:48.750
זה תיאור תמונה ולאחר מכן
כפתורים בצד ימין.

00:12:48.750 --> 00:12:55.630
כרגע באמצעות React,
אני למעשה משתמש ב-JSX a11y Linter.

00:12:57.110 --> 00:13:00.560
ל-Linter הזה יש
כללי נגישות ספציפיים עבור ESLint.

00:13:01.680 --> 00:13:04.580
ESLint הוא כנראה אחד
הלינטרים הפופולריים ביותר

00:13:04.580 --> 00:13:06.760
שקיימים שם עכשיו.

00:13:06.760 --> 00:13:09.990
בזה, יש לו קבוצת משנה
של חוקים לנגישות.

00:13:09.990 --> 00:13:13.740
אז נניח שאני מפתח
של רכיב פריט עגלה זה,

00:13:13.740 --> 00:13:16.600
אם אני מסתכל על המסך הזה עכשיו
, מה שיש לי הוא,

00:13:16.600 --> 00:13:21.120
יש לי כמה
קווים אדומים מתפתלים בכמה נקודות שונות.

00:13:21.120 --> 00:13:25.270
אז בשורה 11 כאן, יש לי div
שהוא מיכל תמונה שהוא

00:13:25.270 --> 00:13:28.060
מסיבה כלשהי המפתח הזה
רצה להסתיר משהו.

00:13:28.060 --> 00:13:29.180
אבל הם לא נראו טוב.

00:13:29.180 --> 00:13:31.720
אז הם אמרו aria-hide שווה אמת.

00:13:31.720 --> 00:13:33.060
כן, aria-hide לא נכון.

00:13:33.060 --> 00:13:36.810
אז אם באמת ריחפתי מעל
זה, זה יגיד aria-hide.

00:13:36.810 --> 00:13:38.030
זו אינה תכונה.

00:13:38.030 --> 00:13:39.360
זוהי תכונת אריה חוקית.

00:13:39.360 --> 00:13:41.500
האם התכוונת להשתמש
ב-aria-hidden או aria-live?

00:13:41.500 --> 00:13:43.060
וזה יגיד לך את זה.

00:13:43.060 --> 00:13:45.230
אז מה שבאמת מגניב הוא
שעכשיו אם אני מפתח

00:13:45.230 --> 00:13:48.030
מי שלא באמת יודע כלום, ובואו
נגיד שעשיתי הצפת מחסנית גרועה

00:13:48.030 --> 00:13:53.340
של חיפוש, אני יכול לשנות את זה
ל-aria-hidden והרי,

00:13:53.340 --> 00:13:54.340
הקו המפותל נעלם.

00:13:55.400 --> 00:13:57.600
זה מוך בזמן שאני עושה את זה.

00:13:57.600 --> 00:14:00.540
התמונה הזו,
חסרה לי תכונת alt.

00:14:00.540 --> 00:14:02.960
זה יגיד לי שלתמונות חייבות
להיות מאפיין alt מתאים

00:14:02.960 --> 00:14:05.460
עם טקסט משמעותי או
זרם ריק לתמונות דקורטיביות.

00:14:05.460 --> 00:14:08.970
ובכן, במקרה הזה כאן, אני
הולך לנחש שהאדם הזה התכוון

00:14:08.970 --> 00:14:10.700
כדי להסתיר את זה כתמונה alt.

00:14:10.700 --> 00:14:13.200
אז אנחנו פשוט ניתן לזה אלט והכל
, הקו המפותל נעלם.

00:14:14.300 --> 00:14:17.370
זה אפילו מגיע עד למקום שאמרתי
לאכוף שיטות קידוד טובות.

00:14:18.660 --> 00:14:19.780
אני משתמש בעוגן.

00:14:19.780 --> 00:14:23.270
תכונת href נדרשת כדי
שעוגן יהיה נגיש למקלדת.

00:14:23.270 --> 00:14:26.300
היי, כמה עוגנים קיימים
בטבע כרגע

00:14:26.300 --> 00:14:29.490
שהם בעצם עוגנים
שאין עליהם href.

00:14:29.490 --> 00:14:32.430
אז הם לא נגישים למקלדת
מסיבה כלשהי כדי ללחוץ על אירועים

00:14:32.430 --> 00:14:32.880
של href.

00:14:32.880 --> 00:14:33.070
למה?

00:14:33.070 --> 00:14:34.560
אין לי מושג.

00:14:35.760 --> 00:14:39.230
אני יכול פשוט להוסיף ב-href
עצמו לאן שהוא צריך להגיע.

00:14:40.520 --> 00:14:43.400
אז כאן href שווה ואז
יכולתי פשוט לומר פרטים.

00:14:44.460 --> 00:14:45.460
אופס.

00:14:47.680 --> 00:14:49.330
והוילה, סיימנו.

00:14:50.540 --> 00:14:51.330
זהו.

00:14:51.330 --> 00:14:52.730
זו צוות אחד.

00:14:52.730 --> 00:14:55.000
זה כל כך פשוט.

00:14:55.000 --> 00:14:59.410
זה הכי קל כשאתה
יכול להשיג עבור צוותי פיתוח.

00:14:59.410 --> 00:15:01.670
ובאמת שזה כל כך פשוט.

00:15:01.670 --> 00:15:02.030
כן.

00:15:02.030 --> 00:15:03.170
אולי אתה מסתכל ואומר
, מארק,

00:15:03.170 --> 00:15:04.870
אלו הן סוגיות סופר פשטניות.

00:15:04.870 --> 00:15:05.660
תן לי לספר לך את זה.

00:15:05.660 --> 00:15:09.530
סקר WebAIM מיליון
אומר לי שכל הדברים

00:15:09.530 --> 00:15:12.830
שעליו אנחנו מדברים, באשר
לפשטות, נחשו מה?

00:15:12.830 --> 00:15:15.900
יש הרבה בעיות פשוטות
שנמצאות בהפקה עכשיו.

00:15:15.900 --> 00:15:17.690
הם קיימים בדפי הבית
ובכלל.

00:15:17.690 --> 00:15:19.020
אז נחשו מה?

00:15:19.020 --> 00:15:20.790
מוך יכול לתקן
את הבעיות הפשוטות האלה.

00:15:20.790 --> 00:15:23.040
אם נגיע למקום הנכון
, זה יכול לתקן את הבעיות האלה.

00:15:23.040 --> 00:15:25.770
אז זה ממש
מכתש בקצרה.

00:15:25.770 --> 00:15:27.699
סופר דופר פשוט,
ממש פשוט

00:15:27.700 --> 00:15:28.820
להרכיב איתו.

00:15:29.830 --> 00:15:32.980
ויש הרבה
דברים טובים.

00:15:32.980 --> 00:15:35.090
יש כמה שיטות עבודה מומלצות
שקושרות גם למוך.

00:15:35.090 --> 00:15:38.150
אז למצוא ספרייה שעובדת
עם ערימת הטכנולוגיה שלך,

00:15:38.150 --> 00:15:41.320
כמו שאמרתי קודם ESLint
הוא הפופולרי ביותר.

00:15:41.320 --> 00:15:44.660
יש לו הכי הרבה אינטגרציות
שקיימות שם.

00:15:44.660 --> 00:15:45.610
כדי שתוכל למשוך אותם פנימה.

00:15:45.610 --> 00:15:47.280
יש לו
ספריות נגישות במיוחד

00:15:47.280 --> 00:15:49.530
לכל מסגרת שבה
אתה משתמש.

00:15:49.530 --> 00:15:51.550
מצא מערכת כללים עקבית.

00:15:51.550 --> 00:15:55.440
מה שיפה בזה הוא שרוב
ספריות הקוד הפתוח מתחברות

00:15:55.440 --> 00:15:58.320
של axe-core כי זו
הספרייה הפופולרית ביותר שקיימת.

00:15:58.320 --> 00:16:00.550
אז אם הצוותים שלך
מחליטים להשתמש בגרזן-ליבת,

00:16:00.550 --> 00:16:02.900
אתה יכול להשתמש גם ברצועת הגרזן.

00:16:02.900 --> 00:16:04.190
אין שום בעיה
עם זה.

00:16:04.190 --> 00:16:04.540
מצוין.

00:16:04.540 --> 00:16:05.440
זה נהדר.

00:16:05.440 --> 00:16:09.280
אבל ה-JSX a11y one משתמש
איתו גם בכמה מכללי ליבת הגרזן.

00:16:09.280 --> 00:16:11.420
אז עקביות היא המפתח
כי אתה לא רוצה

00:16:11.420 --> 00:16:13.850
להפעלת מספר קבוצות שונות
של כללים

00:16:13.850 --> 00:16:15.390
לאן
נמצאים המפתחים, אני לא מבין

00:16:15.390 --> 00:16:18.960
מדוע זו בעיה כאן
ולא בעיה כאן.

00:16:18.960 --> 00:16:21.430
אז עקביות היא המפתח.

00:16:21.430 --> 00:16:23.140
עוד שיטה מומלצת
[Inaudible 16:23]

00:16:23.140 --> 00:16:24.800
לכפות מוך על ביצוע.

00:16:24.800 --> 00:16:25.910
ואז בנה חוקים משלך.

00:16:25.910 --> 00:16:26.940
אני לא יכול להדגיש את זה מספיק.

00:16:26.940 --> 00:16:29.340
אתה יכול לבנות חוקים משלך
, תאמין או לא.

00:16:29.340 --> 00:16:32.500
אתה יכול לבנות חוקים משלך,
להוסיף אותם למוך ולבדוק

00:16:32.500 --> 00:16:36.060
עבור הדברים שצוות המפתחים שלך
או הארגון שלך רוצים לבדוק.

00:16:36.060 --> 00:16:37.840
זה מאוד מאוד פשוט.

00:16:37.840 --> 00:16:41.180
וכך אתה יכול לעשות
קצת יותר מעל ומעבר עם זה.

00:16:41.180 --> 00:16:42.370
אז זה מוך.

00:16:42.370 --> 00:16:43.480
שלב ראשון.

00:16:43.480 --> 00:16:48.340
ושוב, הרשו לי לחזור ולהדגיש שכל
השלבים הללו נמשכים כל עוד הם לוקחים.

00:16:48.340 --> 00:16:52.420
זה לא אומר, היי, שלב
ראשון הוא ספרינט. בהחלט לא.

00:16:52.420 --> 00:16:55.720
יכול להיות ששלב ראשון
לוקח שלושה חודשים לקום

00:16:55.720 --> 00:16:58.150
ופועלים כמו שצריך עם כל
הדברים שאנחנו מדברים עליהם כאן

00:16:58.150 --> 00:17:00.010
לשיטות עבודה מומלצות ואולי
כמה דברים שונים

00:17:00.010 --> 00:17:02.810
שהארגון או צוות המפתחים שלך
רוצים לעשות.

00:17:02.810 --> 00:17:04.290
זה עשוי לקחת זמן.

00:17:04.290 --> 00:17:05.540
זה בסדר.

00:17:05.540 --> 00:17:06.900
תן לזה לקחת זמן.

00:17:06.900 --> 00:17:10.860
אנחנו רוצים שזה ייקח זמן כי
אנחנו חייבים לעשות את זה נכון, בסדר?

00:17:10.860 --> 00:17:14.360
אז ברגע שהשלב הראשון מסתיים,
אנחנו קופצים לשלב השני,

00:17:14.360 --> 00:17:16.310
שהוא
ספריות נגישות אוטומטיות.

00:17:16.310 --> 00:17:19.480
ורוב האנשים שכאן
כנראה מפתחים

00:17:19.480 --> 00:17:22.700
או שעושים בדיקות ממשיות
או בונים ספריות בדיקה

00:17:22.700 --> 00:17:25.300
כנראה מכירים כמה
מספריות הנגישות האוטומטיות

00:17:25.300 --> 00:17:26.300
שכן קיימים.

00:17:27.560 --> 00:17:30.560
ספריות
נגישות אוטומטיות
מובנות צ'קים

00:17:30.560 --> 00:17:33.760
שסורקים את תוכן ממשק המשתמש שלך
לאיתור בעיות נגישות.

00:17:33.760 --> 00:17:38.590
אז לדוגמה, אם יש לי
פרויקט מנהלי התקן אינטרנט של Selenium

00:17:38.590 --> 00:17:41.260
או פרויקט בובנאי
- אתה יכול לתת שם לכל סוג

00:17:41.260 --> 00:17:45.310
של מנהל התקן אחר שבו אתה משתמש
- אני יכול להוסיף את הספרייה הזו.

00:17:45.310 --> 00:17:47.180
זה מתחבר למסגרת הבדיקה
שבה אני משתמש.

00:17:47.180 --> 00:17:51.980
ואני עושה מקרה מבחן שבודק
אם יש בעיות כלשהן

00:17:51.980 --> 00:17:54.980
בדף או
בתוכן שאני סורק.

00:17:54.980 --> 00:17:56.770
שוב, זו בדיקה כללית.

00:17:56.770 --> 00:17:59.490
זה לא משהו שייכנס
ספציפית

00:17:59.490 --> 00:18:02.670
ושנה את התוכן שלך,
כמו פתח הרחב מקטעי כיווץ,

00:18:02.670 --> 00:18:04.830
לעשות כל סוג של פעולות נגישות.

00:18:04.830 --> 00:18:06.250
זה פשוט
יסרוק באופן כללי את התוכן שלך.

00:18:06.250 --> 00:18:09.590
עכשיו, זה נהיה יותר מאשר
מוך כי זה יכול לעשות יותר

00:18:09.590 --> 00:18:12.420
מאשר רק ניתוח סטטי
כי הדף המעובד במלואו

00:18:12.420 --> 00:18:15.560
או רכיב מעובד במלואו
יתרחש באותו זמן.

00:18:15.560 --> 00:18:20.230
אבל היתרונות של ספריות אלה
הן מערכות הכללים העקביות שלהן.

00:18:20.230 --> 00:18:21.220
זה הדבר הכי גדול.

00:18:21.220 --> 00:18:24.800
זוהי מערכת עקבית של
כללים שחוזרת שוב ושוב

00:18:24.800 --> 00:18:25.840
על התוכן הזה.

00:18:25.840 --> 00:18:31.290
אז אם אעשה מקרה מבחן או שני
מקרי מבחן, אחד עבור דף הבית שלי

00:18:31.290 --> 00:18:34.780
ואחד עבור דף הכניסה שלי,
אותה מערכת כללים פועלת

00:18:34.780 --> 00:18:35.420
בשני אלה.

00:18:35.420 --> 00:18:39.240
אז אני מקבל תוצאות עקביות
וסריקות עקביות עם זה.

00:18:39.240 --> 00:18:42.160
אני יכול לבנות שערים שוב,
וזה נהדר כשאני אומר שערים,

00:18:42.160 --> 00:18:46.940
כשאני דוחף קוד עבור,
נניח יחסי ציבור לתוך GitHub

00:18:46.940 --> 00:18:51.510
או שאני שולח קוד לבדיקת קוד
או שאני שולח אותו לייצור.

00:18:51.510 --> 00:18:53.100
אני יכול לשים על זה שער
ולומר שאני מצפה לשם

00:18:53.100 --> 00:18:55.030
ללא הפרות נגישות.

00:18:55.030 --> 00:18:59.600
וזה מהיר וקל להוסיף למבנה
הבדיקות הנוכחי של ממשק המשתמש.

00:19:00.940 --> 00:19:02.680
אתה בטח אומר, ובכן,
מארק, אמרת שזה מהיר וקל

00:19:02.680 --> 00:19:04.630
עבור מוך גם
מוך הוא אפילו מהיר יותר.

00:19:04.630 --> 00:19:11.290
עדיין קל להוסיף את זה
לתהליך בדיקת ממשק משתמש.

00:19:11.290 --> 00:19:14.150
ההבדל הוא שכשאתה
עושה את זה, זה לוקח קצת

00:19:14.150 --> 00:19:15.890
של עבודה כדי להגדיר זאת
בתחילה, כלומר

00:19:15.890 --> 00:19:19.140
שבו תהיה חלק מהדחיפות
, אם כולכם אי פעם תגיעו לזה.

00:19:19.140 --> 00:19:20.370
ובכן, זה ייקח זמן.

00:19:20.370 --> 00:19:21.340
זה יהיה.

00:19:21.340 --> 00:19:25.440
אבל אני הולך להראות לך כמה
פשוט זה יכול להיות להגדיר את זה

00:19:25.440 --> 00:19:28.760
באופן שניתן לחזור עליו
והוא פשוט יחסית

00:19:28.760 --> 00:19:29.290
לבנות.

00:19:29.290 --> 00:19:30.060
בסדר.

00:19:30.060 --> 00:19:36.690
אז אני הולך לקפוץ מיד בחזרה אל
קטע האמפוריום המקסים שלי עם חרב האור.

00:19:36.690 --> 00:19:42.223
ומה שאני הולך לעשות
הוא בעצם אלך

00:19:42.224 --> 00:19:44.520
לתוך אחד המפרטים שלי.

00:19:44.520 --> 00:19:45.910
אז המפרט הזה הוא מקרה המבחן שלי כאן.

00:19:46.970 --> 00:19:51.550
המפרט הראשון שלי שנמצא כאן הוא למעשה
רק בדיקה, תן לי ללכת

00:19:51.550 --> 00:19:55.880
במפרט הכותרת התחתונה שלי זה למעשה
רק בודק את רכיב הכותרת התחתונה שלי

00:19:55.880 --> 00:19:57.680
עבור הבקשה שלי.

00:19:57.680 --> 00:20:00.210
אז שוב,
ספריות בדיקות הנגישות הללו יכולות לעבוד

00:20:00.210 --> 00:20:01.030
במספר רמות.

00:20:01.030 --> 00:20:04.420
זה יכול לעבוד בתוך מבחן יחידה,
שיהיה כמו כל רכיב,

00:20:04.420 --> 00:20:06.106
או יכול לעבוד במבחן
רמת שילוב,

00:20:06.107 --> 00:20:08.740
שזה הכל ביחד
על המסך.

00:20:08.740 --> 00:20:11.840
כל דרך שתעבוד עבור הצוות שלך
, כך תוכל לעשות זאת.

00:20:11.840 --> 00:20:14.840
זה חלק יפה
בספריות נגישות אוטומטיות.

00:20:14.840 --> 00:20:21.310
אז עם מפרט הכותרת התחתונה הזה, מה שיש לי
הוא שאני משתמש בספריית הבדיקות של React

00:20:21.310 --> 00:20:24.830
בשביל זה, ובזה, הגדרתי
מספר מקרי בדיקה רק כדי לבדוק.

00:20:24.830 --> 00:20:27.470
אז למשל, יש לי
מבחן שרק בודק כדי לראות

00:20:27.470 --> 00:20:29.870
אם רכיב נטען,
יש לי המחאה לומר,

00:20:29.870 --> 00:20:32.120
צריך להיות
מספר מסוים של רשימת פריטים

00:20:32.120 --> 00:20:33.790
שנמצאים בכותרת התחתונה,
אז יש לי רשימה כמו של קישורים

00:20:33.790 --> 00:20:34.790
בתחתית.

00:20:35.610 --> 00:20:40.380
ובנוסף לכך,
אני מוסיף במבחן אחד.

00:20:40.380 --> 00:20:42.763
אתה יכול לקרוא
לבדיקת נגישות זו,

00:20:42.764 --> 00:20:44.840
אתה יכול לקרוא לזה הוא נגיש,

00:20:44.840 --> 00:20:46.360
אתה יכול לקרוא לזה
איך שאתה רוצה.

00:20:46.360 --> 00:20:48.470
מתן שם עקבי הוא המפתח.

00:20:48.470 --> 00:20:50.280
כי כשאני שם
לדברים שלי, אני אגיד

00:20:50.280 --> 00:20:53.130 
בדיקת נגישות
של רכיב תחתונה
.

00:20:53.130 --> 00:20:56.870
אז מה שיפה הוא, כשאני בונה
את זה עם ספריית נגישות,

00:20:56.870 --> 00:20:59.780
זה כאן אני משתמש בגרזן-ליבת
עבור שתי הדוגמאות שלי.

00:20:59.780 --> 00:21:01.520
זה כנראה
הכי קל לשילוב

00:21:01.520 --> 00:21:04.140
ויש לו הכי הרבה אינטגרציות.

00:21:04.140 --> 00:21:11.000
אבל בזמן שאני בונה את זה,
אני יכול פשוט לעשות את אותו מקרה מבחן

00:21:11.000 --> 00:21:13.950
על פני מספר מפרטים.

00:21:13.950 --> 00:21:15.470
זה
החלק היפה בזה.

00:21:15.470 --> 00:21:18.470
אני באמת יכול ליצור אותו ולהפוך
אותו לעקבי למקום שבו

00:21:18.470 --> 00:21:23.860
כשאני משלב את זה,
זה פשוטו כמשמעו העתק והדבק.

00:21:23.860 --> 00:21:24.450
כל כך פשוט.

00:21:24.450 --> 00:21:26.050
אני הולך להראות לך איך.

00:21:26.050 --> 00:21:28.710
אז בדיקת הנגישות הזו
שיש לי כאן.

00:21:28.710 --> 00:21:30.510
זה ספציפי לספריית
בדיקת React,

00:21:30.510 --> 00:21:33.790
אבל בעצם אני לוקח את
המיכל שיש בו את הרכיב,

00:21:33.790 --> 00:21:37.500
אני עורך את הכותרת התחתונה שלי,
ואז אני מפעיל את axe.run,

00:21:37.500 --> 00:21:40.400
שזו הדרך האופיינית להפעיל
את Axe נגד המיכל.

00:21:40.400 --> 00:21:43.710
אז עכשיו אני הולך להפעיל את
חוקי הגרזן האלה נגד זה.

00:21:43.710 --> 00:21:45.810
יש לי כתב מותאם אישית
זה כאן, אבל אם תרצי

00:21:45.810 --> 00:21:48.630
שיהיה לך כתב שאתה
יכול, לא צריך.

00:21:48.630 --> 00:21:53.640
ואז אני מצפה...
[לא נשמע 21:54]

00:21:53.640 --> 00:21:56.360
התוצאות.הפרות, שתהיה
הפרה של הרכיב,

00:21:56.360 --> 00:21:59.130
אני מצפה שאורך
זה יהיה אפס.

00:22:00.370 --> 00:22:01.710
זהו.

00:22:01.710 --> 00:22:03.050
וזה הכל.

00:22:03.050 --> 00:22:08.610
מה שבאמת נהדר בזה הוא
שעכשיו יכולתי לקחת את זה, להעתיק את זה,

00:22:08.610 --> 00:22:09.570
ואז נחשו מה?

00:22:09.570 --> 00:22:11.070
תן לי פשוט להעלות עוד
אחד כזה ממש מהר

00:22:11.070 --> 00:22:12.250
כדי שכולכם תוכלו לראות את זה.

00:22:12.250 --> 00:22:13.600
אם משכתי את רכיב הכותרת שלי.

00:22:15.220 --> 00:22:16.560
תראה את זה.

00:22:16.560 --> 00:22:18.390
ממש אותו הדבר.

00:22:18.390 --> 00:22:21.020
ההבדל היחיד יכול להיות
שאנו משנים את השם

00:22:21.020 --> 00:22:23.260
אם יש לך הקלטה
או דברים כאלה.

00:22:23.260 --> 00:22:24.190
אבל זהו.

00:22:24.190 --> 00:22:26.050
זה כל כך פשוט.

00:22:26.050 --> 00:22:30.110
עותק והדבק של
מקרה המבחן הזה אם הגדרנו אותו כראוי.

00:22:30.110 --> 00:22:32.960
אם מקרי הבדיקה שלך מוגדרים
נכון, זה כל כך פשוט.

00:22:32.960 --> 00:22:35.730
פעמים רבות כאשר צוותים הקימו
את הספריות הבודקות בהצלחה

00:22:35.730 --> 00:22:38.670
הם אומרים, מארק,
יש כל כך הרבה עבודה לעשות.

00:22:38.670 --> 00:22:40.050
זה ממש לא.

00:22:40.050 --> 00:22:42.270
זה פשוט כמו רק להגדיר
את מקרה המבחן שלך כראוי

00:22:42.270 --> 00:22:45.960
על דבר אחד, לוודא שהוא
עובד ואז להפעיל אותו.

00:22:45.960 --> 00:22:46.760
כל כך פשוט.

00:22:46.760 --> 00:22:50.330
אז אני יכול להריץ את זה ממש
מהר מדי, רק מפרט הכותרת התחתונה.

00:22:50.330 --> 00:22:53.530
תן לי להפעיל את זה.

00:22:53.530 --> 00:22:57.340
עכשיו, אזהרה הוגנת, כי בכל פעם
שבסופו של דבר אני מריץ משהו כזה

00:22:57.340 --> 00:22:59.170
בהדגמה חיה,
במיוחד מוקדם בבוקר,

00:22:59.170 --> 00:23:00.920
המחשב שלי עדיין
לא שתה קפה.

00:23:00.920 --> 00:23:02.740
אז אני בטוח שזה
כנראה פשוט יהיה כמו,

00:23:02.740 --> 00:23:05.110
אין לי חשק לעבוד כרגע
, וזה בסדר.

00:23:05.110 --> 00:23:08.310
אני יכול פשוט לעבור לחלק הבא שלי
אחרי זה אם אצטרך.

00:23:08.310 --> 00:23:12.980
אבל בזמן שזה רץ, מה שאני רוצה
להראות זה כמה זה פשוט

00:23:12.980 --> 00:23:15.960
כדי לראות את התוצאות
שחוזרות גם מזה.

00:23:15.960 --> 00:23:19.390
אז אם סיימתי עם הרכיב
, נניח שסיימתי

00:23:19.390 --> 00:23:21.780
עם כללי המוך שלי, אני אומר
שזה טוב ללכת, ואני אומר,

00:23:21.780 --> 00:23:24.450
כן, אני הולך לנהל
את תיק המבחן שלי נגד זה.

00:23:24.450 --> 00:23:27.650
ובכן, מה שאני יכול לעשות עכשיו זה
שיהיה לי כתב או שיהיה לי אותו

00:23:27.650 --> 00:23:29.760
בקונסולה,
שמגיעה עם רוב

00:23:29.760 --> 00:23:33.280
מספריות הבדיקה שיש לך, לומר
, איפה הבעיות שלי שקיימות?

00:23:33.280 --> 00:23:35.380
אז אני הולך למצוא את הכותרת התחתונה שלי.

00:23:35.380 --> 00:23:36.620
אה, כן,
יש לנו הרבה בעיות כאן.

00:23:37.650 --> 00:23:40.190
כמו כן, ככל הנראה, מארק צריך לעדכן את
הדברים שלו כי הם מיושנים.

00:23:40.190 --> 00:23:41.380
הנה הכותרת התחתונה שלי.

00:23:41.380 --> 00:23:42.820
יש את מקרה המבחן שלי.

00:23:42.820 --> 00:23:45.880
ציפיתי שהתוצאות.הפרעה.אורך
יהיה אפס.

00:23:45.880 --> 00:23:47.570
מצאתי שתי בעיות נגישות.

00:23:47.570 --> 00:23:50.060
ובכן, מכיוון שיש לי
כתב לקוחות, אני יכול פשוט ללכת

00:23:50.060 --> 00:23:51.400
כאן ממש מהר ולגלות
מה הם.

00:23:51.400 --> 00:23:52.820
אה, תראה את זה.

00:23:52.820 --> 00:23:54.730
לרכיבי טופס אין תוויות.

00:23:54.730 --> 00:23:56.110
מדהים.

00:23:56.110 --> 00:23:56.690
אותו דבר.

00:23:56.690 --> 00:23:58.170
לשני רכיבי טופס
אין תוויות.

00:23:58.170 --> 00:24:02.110
והרשימה שלי כלולה
ב-HR באמצע הרשימה שלי.

00:24:02.110 --> 00:24:04.390
כל כך פשוט.

00:24:04.390 --> 00:24:06.150
אז אפשר לתפוס את הדברים האלה
לאורך הדרך.

00:24:06.150 --> 00:24:08.100
ועכשיו אני יכול לקחת
את אותו מקרה מבחן

00:24:08.101 --> 00:24:09.850
ושכפל אותו על פני הלוח.

00:24:11.170 --> 00:24:12.170
כל כך פשוט.

00:24:12.860 --> 00:24:14.630
אם אתה מסתכל על זה
מרמת אינטגרציה,

00:24:14.630 --> 00:24:19.770
רק בתור תצוגה מהירה של ממש,
יש לי כאן גם דוגמה עם סלניום.

00:24:19.770 --> 00:24:23.140
אז שוב, אתה פשוט מוצא את
שילוב הגרזן שאתה רוצה.

00:24:23.140 --> 00:24:24.830
axe-webdriverjs.

00:24:24.830 --> 00:24:27.480
זה מתאים לכל מה שאתה
משתמש במנהל ההתקן עצמו

00:24:27.480 --> 00:24:29.030
להוראות הגדרה.

00:24:29.030 --> 00:24:31.620
יש לי את כל מקרי הבדיקה שלי,
המספר הכולל של רישומים,

00:24:31.620 --> 00:24:32.780
כפתורי רישום מוצגים.

00:24:32.780 --> 00:24:36.110
ואז אני בודק, כדוגמה
, האם זה נגיש.

00:24:36.110 --> 00:24:37.230
נחשו מה?

00:24:37.230 --> 00:24:40.150
זה
בדיוק אותו מקרה מבחן

00:24:40.150 --> 00:24:43.840
בכל מבחני האינטגרציה שלי
מכיוון שמקרי המבחן שלי מוגדרים

00:24:43.840 --> 00:24:48.680
באופן שיגיד כשהם יעבדו
, זה יאמר,

00:24:48.680 --> 00:24:55.010
דף הצילום נגיש בריצת
המבחן. זה פשוט.

00:24:55.010 --> 00:24:59.560
אז השימוש בספריות בדיקה אוטומטיות
עשוי להיראות כמו משימה מרתיעה,

00:24:59.560 --> 00:25:00.420
אבל זה ממש לא.

00:25:00.420 --> 00:25:04.100
ברגע שתגדיר אותו ופועל,
הוא חוזר על אותם בדיקות

00:25:04.100 --> 00:25:06.180
במבנה באופן
שמתאים למה שאתה עושה.

00:25:06.180 --> 00:25:08.110
הדוגמה שלי מאוד פשטנית.

00:25:08.110 --> 00:25:09.320
מבין את זה לגמרי.

00:25:09.320 --> 00:25:11.430
אבל לרוב,
זו הדרך שבה זה עובד,

00:25:11.430 --> 00:25:13.830
הוא שאתה יכול
לקחת את אותו מקרה מבחן בצורה פשטנית

00:25:13.830 --> 00:25:15.870
ולרוץ שוב ושוב.

00:25:15.870 --> 00:25:17.540
וזה נותן לך את התוצאות
בהתבסס על הדרך שלך

00:25:17.540 --> 00:25:18.490
מקרי הבדיקה שלך מובנים.

00:25:18.490 --> 00:25:23.170
וזה ברמת יחידה או אינטגרציה
, וזה פנטסטי.

00:25:23.170 --> 00:25:27.700
אז קפוץ חזרה אל
היתרונות היפים שלי עבור אלה.

00:25:29.390 --> 00:25:33.610
השיטה המומלצת היא
למצוא שילוב שמתאים

00:25:33.610 --> 00:25:35.380
מה צוות הפיתוח שלך
עושה.

00:25:35.380 --> 00:25:37.260
ודא שערכות הכללים
עקביות.

00:25:37.260 --> 00:25:41.500
אינך רוצה להשתמש במוך שמשתמש
בספרייה אחרת לגמרי

00:25:41.500 --> 00:25:44.230
מאשר גרזן, או שאתה לא רוצה
להשתמש בפאלי בשלב מסוים

00:25:44.230 --> 00:25:47.580
או קבוצה אחרת של
בדיקת אינטגרציות איתו.

00:25:47.580 --> 00:25:50.340
רוב
האינטגרציות בקוד פתוח משתמשות ב-axe-core בכל מקרה,

00:25:50.340 --> 00:25:54.030
אז זה לא מבחן קשה
לעשות, אבל ודא שאנחנו משתמשים באחד

00:25:54.030 --> 00:25:58.160
שמתאים למבנה הבדיקות של ממשק המשתמש
שאנו מבצעים.

00:25:58.160 --> 00:26:00.760
שיטה מומלצת נוספת היא מבוססת
על עיקרון אחד לאחד.

00:26:00.760 --> 00:26:04.210
יש עיקרון אחד לאחד בבדיקת
ממשק המשתמש שאומר לכל חלק

00:26:04.210 --> 00:26:08.440
של ממשק המשתמש, קיים
איתו מקרה מבחן נגישות משולב.

00:26:08.440 --> 00:26:11.090
אז בין אם זה רכיב,
בין אם זה דף,

00:26:11.090 --> 00:26:15.230
מונו אי מונו אנו מוודאים את
קטע הקוד הזה, הקטע הזה

00:26:15.230 --> 00:26:17.940 
של ממשק המשתמש קשור אליו מבחן
נגישות .

00:26:17.940 --> 00:26:20.420
וגם מבחן במספר
רמות של מבחן.

00:26:20.420 --> 00:26:23.980
הרגע הראיתי לך את כל
זה, אבל אם אתה יכול לבדוק

00:26:23.980 --> 00:26:27.590
עם ספריית נגישות ביחידה
ורמת אינטגרציה,

00:26:27.590 --> 00:26:28.680
זה פנטסטי.

00:26:28.680 --> 00:26:30.990
זה win-win בכל רחבי הלוח.

00:26:30.990 --> 00:26:32.120
אתה מקבל את כל
ההטבות והכל.

00:26:32.120 --> 00:26:34.850
אז אם אתה יכול,
בדוק במספר רמות של מבחנים.

00:26:35.930 --> 00:26:40.580
אז שלב ראשון, Linting, שלב
שני, ספריות נגישות.

00:26:40.580 --> 00:26:41.900
אתה הולך להיות כמו,
מארק, מה זה שלב שלישי?

00:26:41.900 --> 00:26:44.570
כי נראה כאילו פגענו
בכל האוטומציה של נגישות

00:26:44.570 --> 00:26:45.570
אנחנו יכולים לעשות.

00:26:45.990 --> 00:26:47.050
Tada.

00:26:47.050 --> 00:26:48.050
בדיקת רגרסיה.

00:26:49.030 --> 00:26:52.740
אז אני תמיד נוטה להתחמם
על זה הרבה פעמים

00:26:52.740 --> 00:26:56.010
כי בכל פעם שמישהו שומע
שאתה יכול לבצע אוטומציה של יותר מ

00:26:56.010 --> 00:26:59.050
בדיוק מה
שספריות נגישות מוך עושות, אנשים נוטים להיות אדיבים

00:26:59.050 --> 00:27:02.740
של קפוץ על זה מיד
ותגיד, הו, כאילו, לא, אתה לא יכול.

00:27:02.740 --> 00:27:04.970
אתה מדבר על
אוטומציה של הכל עם זה.

00:27:04.970 --> 00:27:06.030
אני לא.

00:27:06.030 --> 00:27:08.900
מה שאני מדבר עליו
זה שאתה יכול לבנות מקרי בדיקה של ממשק משתמש

00:27:08.900 --> 00:27:13.150
שמעל ומעבר
לספריות נגישות כלליות בלבד.

00:27:13.150 --> 00:27:17.040
אתה יכול לבנות מקרי בדיקה אוטומטיים
המבטיחים את הפונקציונליות

00:27:17.040 --> 00:27:19.580
מהתוכן שלך נגיש.

00:27:19.580 --> 00:27:21.780
כך למשל,
קטע כיווץ הרחבה.

00:27:22.860 --> 00:27:25.640
שימוש במשהו כמו מוך גרזן
, זה רק יוודא

00:27:25.640 --> 00:27:30.830
שכבר הרחבתם שווה ל-
false או true מאוית כהלכה

00:27:30.830 --> 00:27:32.920
והוסיפו שם כתכונה.

00:27:32.920 --> 00:27:37.990
זה לא יכול לבדוק את הפונקציונליות שמצב
זה מוגדר כהלכה,

00:27:37.990 --> 00:27:40.810
שכבר מוסתר שווה ל-
true מוגדר כראוי

00:27:40.810 --> 00:27:42.950
כאשר אתה פותח את
קטע הכיווץ להרחבה.

00:27:42.950 --> 00:27:44.390
זה לא יכול לעשות את זה.

00:27:44.390 --> 00:27:47.340
אז היתרונות של ביצוע
בדיקות רגרסיה הם,

00:27:47.340 --> 00:27:49.450
קל יותר לנפות באגים
בבעיות נגישות.

00:27:54.090 --> 00:27:58.200
קל יותר לעשות זאת.

00:27:58.200 --> 00:28:00.860
זה כולל בדיקת נגישות
כחלק מההגדרה שלך לסיים.

00:28:00.860 --> 00:28:05.360
אז לדוגמה, אנחנו בעצם
בונים על ביקורת ידנית עם זה.

00:28:05.360 --> 00:28:09.030
אז אם אקבל ביקורת ידנית שאומרת
, היי, אני יכול לקבל

00:28:09.030 --> 00:28:12.590
לתוכן הזה בקטע
הכיווץ המורחב הזה כשהוא מוסתר,

00:28:12.590 --> 00:28:13.260
נחשו מה אני יכול לעשות?

00:28:13.260 --> 00:28:16.200
אני יכול לכתוב מבחן רגרסיה שאומר
, אני צריך לוודא שהמדינה

00:28:16.200 --> 00:28:19.420
של התכונה הזו פועלת
כמו שאני מצפה.

00:28:19.420 --> 00:28:21.587
האם הוא בודק כדי לוודא
שהוא מכריז כראוי

00:28:21.588 --> 00:28:22.540
עם קורא מסך?

00:28:22.540 --> 00:28:25.760
לא, זה רק להבטיח
שהתוכן הנגיש

00:28:25.760 --> 00:28:28.810
או שהפונקציונליות הנגישה של
רכיב זה פועלת כהלכה.

00:28:28.810 --> 00:28:30.980
יש הבדל
בין השניים.

00:28:30.980 --> 00:28:33.260
כי כן,
ייתכן שיש באגים שקיימים

00:28:33.260 --> 00:28:35.500
בתוך קוראי המסך
עצמם.

00:28:35.500 --> 00:28:37.870
עשויים להיות באגים שקיימים
בתוך הקוד שלנו עצמו.

00:28:37.870 --> 00:28:41.030
אבל אז נוכל לנפות את זה בצורה קלה יותר.

00:28:41.030 --> 00:28:43.360
אז אנחנו מבטיחים שהתוכן
נגיש במלואו

00:28:43.360 --> 00:28:44.460
מנקודת מבט פונקציונלית.

00:28:45.500 --> 00:28:47.860
תן לי לתת לכולכם הדגמה
כי בכל פעם אני מטפל

00:28:47.860 --> 00:28:49.610
כדי לעשות זאת, כולם נוטים
פשוט לשבת שם

00:28:49.610 --> 00:28:51.690
ותהיי כאילו, אני לא מאמין למה
שמארק אומר לי עכשיו.

00:28:51.690 --> 00:28:52.690
וזה בסדר.

00:28:54.300 --> 00:28:55.590
תן לי לתת דוגמה.

00:28:56.640 --> 00:28:59.200
אז זה
פרויקט ברוש ​​שיש לי.

00:28:59.200 --> 00:29:02.450
ברוש ​​היא רק אחת
מספריות בדיקות ממשק המשתמש הפופולריות ביותר.

00:29:02.450 --> 00:29:03.620
עובד יחסית באותו אופן.

00:29:03.620 --> 00:29:04.600
זה בודק אינטגרציה.

00:29:04.600 --> 00:29:08.840
אבל אני רוצה להציג כמה מקרי
בדיקה לדוגמה שאנחנו יכולים לעשות

00:29:08.840 --> 00:29:10.110
מנקודת מבט של רגרסיה.

00:29:10.110 --> 00:29:14.550
אז נניח שאני מקבל ביקורת ידנית
שאומרת, ובכן, מצב הנכים

00:29:14.550 --> 00:29:17.220
של הכפתור שלך לא שם.

00:29:17.220 --> 00:29:19.650
זה משנה צבעים,
אבל זה לא שם.

00:29:19.650 --> 00:29:21.670
כאילו התכונה disabled
לא נמצאת שם.

00:29:21.670 --> 00:29:23.730
אני יכול לכתוב
מבחן רגרסיה בשביל זה.

00:29:23.730 --> 00:29:26.030
אז יש לי מקרה מבחן
על המסך שאומר,

00:29:26.030 --> 00:29:29.010
האם מצב מושבת תקין
של לחצן הצעה.

00:29:30.190 --> 00:29:35.790
אז אני בודק כדי לראות לפני שאני מזין
מידע כלשהו בשדה הזה,

00:29:35.790 --> 00:29:37.080
האם הכפתור הזה מושבת?

00:29:37.080 --> 00:29:38.160
והאם זה צריך להתקיים?

00:29:38.160 --> 00:29:39.160
כן או לא?

00:29:39.990 --> 00:29:41.290
נהדר.

00:29:41.290 --> 00:29:42.210
אז אני מחכה.

00:29:42.210 --> 00:29:45.150
אני מקליד תוכן מסוים בקלט.

00:29:45.150 --> 00:29:47.740
במקרה זה, אני מקליד,
אני אוהב נגישות.

00:29:47.740 --> 00:29:51.720
אז אני חוזר ללחצן המושבת הזה
, מפעיל את התכונה disabled

00:29:51.720 --> 00:29:53.350
ולומר שזה לא אמור להתקיים.

00:29:53.350 --> 00:29:55.990
וואלה, סיימנו,
פונקציונליות נגישות במקום.

00:29:57.180 --> 00:29:58.180
פשוט מאוד.

00:29:58.950 --> 00:30:02.790
אותו דבר שדיברנו עליו קודם,
בדיקת קריסה מורחבת באריה.

00:30:02.790 --> 00:30:05.570
אני אוהב להשתמש בזה
כי זה מקרה שימוש נהדר.

00:30:05.570 --> 00:30:06.990
יש לי מתג.

00:30:06.990 --> 00:30:10.790
אני בודק אם הרחבת aria כברירת
מחדל כשהיא סגורה שווה

00:30:10.790 --> 00:30:12.230
ל-false.

00:30:12.230 --> 00:30:13.630
אז אני נכנס למקרה המבחן.

00:30:13.630 --> 00:30:17.950
אני אומר, היי, החלף, הפעל, לחץ
או הקש. אני יודע שזה על זה.

00:30:17.950 --> 00:30:20.320
אין לו מקלדת
אבל אני מפעיל אותה.

00:30:21.420 --> 00:30:24.540
אני נכנס לזה ואני פונה כדי לראות
ש-aria-expanded צריך להיות נכון.

00:30:24.540 --> 00:30:25.860
זה לא.

00:30:25.860 --> 00:30:29.040
לאחר מכן אני סוגר אותו שוב
ובודק אם כתוב עליו false.

00:30:29.040 --> 00:30:31.600
מבחן רגרסיה,
פשוט ופשוט יחסית.

00:30:33.260 --> 00:30:36.740
אני יכול לבדוק אם יש
אינדיקטורים של מיקוד על אלמנטים בפועל.

00:30:36.740 --> 00:30:38.430
כן, אתה יכול לעשות זאת.

00:30:38.430 --> 00:30:40.870
אני אסתיר עם זה.

00:30:40.870 --> 00:30:45.650
אתה צריך לדעת מהו
צבע המתאר של מחוון הפוקוס, עם זאת,

00:30:45.650 --> 00:30:46.230
כדי לעשות זאת.

00:30:46.230 --> 00:30:47.630
אתה לא יכול
לבדוק זאת באופן כללי.

00:30:47.630 --> 00:30:48.950
אז אתה צריך לדעת מה זה.

00:30:48.950 --> 00:30:53.200
אז כשאני בעצם עובר לכל אחד מהלחצנים
האלה שנמצא ברשימת תפריטים

00:30:53.200 --> 00:30:56.550
ואני מתמקד בהם,
אני יכול לראות את מתאר ה-CSS.

00:30:56.550 --> 00:30:58.970
אם אני יודע שצבע
הרקע אמור

00:30:58.970 --> 00:31:01.070
כדי להתאים לצבע ספציפי
, נחשו מה?

00:31:01.070 --> 00:31:02.370
יש לו מחוון מיקוד.

00:31:02.370 --> 00:31:04.700
כמה אתרים
אתה מכיר שנסיגה

00:31:04.700 --> 00:31:07.820
ולשלוף את
מחוון המיקוד שלהם כי הם לא יודעים?

00:31:07.820 --> 00:31:08.560
טון.

00:31:08.560 --> 00:31:09.910
זה יכול לתקן את זה.

00:31:09.910 --> 00:31:13.560
אם אתה יודע זאת, ודא שלכל
התוכן שלך בפועל יש מחוון מיקוד.

00:31:14.630 --> 00:31:15.900
A11y מתמקד במודלים.

00:31:15.900 --> 00:31:19.940
כמה מודלים כולכם מכירים
שאינם מגדירים את המיקוד כראוי

00:31:19.940 --> 00:31:22.830
לתוך הטונות המודליות.

00:31:22.830 --> 00:31:24.270
זה יכול לתקן את זה.

00:31:24.270 --> 00:31:26.960
אם יש לי שיטות, אני יכול לכתוב
מבחני רגרסיה שיוודאו ש

00:31:26.960 --> 00:31:31.480
כאשר אני מפעיל אירוע קליק, הפוקוס
עובר אל המודאל או אל המודאלי.

00:31:31.480 --> 00:31:33.850
במקרה זה, אני פשוט בודק את זה כדי
לוודא שהוא מגיע לכותרת.

00:31:33.850 --> 00:31:38.330
כשאני סוגר אותו, המיקוד חוזר
לטריגר שעשה זאת.

00:31:38.330 --> 00:31:39.040
אתה יכול לעשות את זה.

00:31:39.040 --> 00:31:40.610
אתה יכול לכתוב
מבחני רגרסיה עבור אלה.

00:31:41.940 --> 00:31:44.910
זה היופי של
מבחני רגרסיה נגישים.

00:31:44.910 --> 00:31:47.820
כן, כדי להגיע למצב זה
ייקח זמן מה.

00:31:47.820 --> 00:31:51.020
שלב ראשון, שלב שני, אתה יכול להגיע
לשם די פשוט.

00:31:51.020 --> 00:31:52.280
זה עשוי לקחת קצת זמן.

00:31:52.280 --> 00:31:53.510
שלב שלישי עשוי להימשך מעט.

00:31:53.510 --> 00:31:58.650
אבל אני יכול להגיד לך הכל עכשיו
שראיתי כמה קבוצות מקבלות

00:31:58.650 --> 00:31:59.570
לשלב השלישי הזה.

00:31:59.570 --> 00:32:03.200
וכשהם יעשו זאת,
אם משהו יורד,

00:32:03.200 --> 00:32:05.980
אם משהו נשלף החוצה,
משהו בטעות מתבטל

00:32:05.980 --> 00:32:06.800
מקוד.

00:32:06.800 --> 00:32:10.930
הם רואים את זה באופן מיידי והם
נמנעים מהמון תלונות

00:32:10.930 --> 00:32:13.500
מלקוחות שאמרו, היי,
התוכן שלך לא נגיש.

00:32:13.500 --> 00:32:16.030
הם נמנעים מהרבה
סיכויים ידניים שמגיעים ואומרים כמו,

00:32:16.030 --> 00:32:18.960
היי, התוכן הזה ממשיך
להישבר, למה לא קיים?

00:32:18.960 --> 00:32:20.610
זה יכול לעזור לתקן את זה.

00:32:20.610 --> 00:32:23.490
כן, אנחנו לא בודקים מהו
הפלט של קורא המסך.

00:32:23.490 --> 00:32:25.590
אנחנו רק בודקים כדי
לוודא שהתוכן

00:32:25.590 --> 00:32:27.790
נגיש מבחינה פונקציונלית.

00:32:27.790 --> 00:32:31.060
וזה יכול לעשות הרבה כדי
להקל על כולם

00:32:31.060 --> 00:32:33.000
כדי לראות את זה,
ולצוותי פיתוח לבצע ניפוי באגים.

00:32:33.000 --> 00:32:38.310
זו דרך מצוינת לקנות ולגרום
ליותר אנשים לקנות עבורה.

00:32:38.310 --> 00:32:40.850
אז שיטות עבודה מומלצות עבור זה.

00:32:40.850 --> 00:32:45.630
אני בטוח שמבחני הרגרסיה
מסומנים כראוי בבדיקת ממשק המשתמש שלך.

00:32:45.630 --> 00:32:48.890
אז השתמש ב-A11y או בנגישות
בבדיקה כדי שתדע

00:32:48.890 --> 00:32:51.220
שזה
מבחן רגרסיה של נגישות.

00:32:51.220 --> 00:32:53.780
ודא שפונקציונליות הנגישות
נקראת עבור מבחני ממשק משתמש.

00:32:53.780 --> 00:32:57.960
כך למשל,
קריטריוני קבלה, רוב החברות

00:32:57.960 --> 00:33:00.070
ולצוותים אין
קריטריוני קבלה לנגישות.

00:33:00.070 --> 00:33:02.850
אם כן, אתה באמת יכול
לכתוב מבחני רגרסיה

00:33:02.850 --> 00:33:05.030
עבור
קריטריון הקבלה הזה, וזה נהדר.

00:33:06.090 --> 00:33:07.670
ודא
שצוותי הפיתוח יודעים זאת

00:33:07.670 --> 00:33:10.350
אינו מחליף
בדיקת קוראי מסך של קהל רגיל.

00:33:10.350 --> 00:33:11.150
זו מכירה קשה.

00:33:11.150 --> 00:33:13.220
אני אגיד לך את זה עכשיו,
כי כשאתה הולך בשביל זה,

00:33:13.220 --> 00:33:16.280
הרבה אנשים אומרים, היי, אני רוצה להפוך
את כל הנגישות לאוטומטית.

00:33:16.280 --> 00:33:20.140
אתה לא יכול, אבל זה עוזר
להקל על הכאב של לוודא

00:33:20.140 --> 00:33:23.420
שהתוכן הנגיש
בחוץ נשאר נגיש

00:33:23.420 --> 00:33:26.690
אלא אם כן יבוא משהו בדרך
, בכל הנוגע לבאגים בקורא מסך

00:33:26.690 --> 00:33:27.210
או דברים כאלה.

00:33:27.210 --> 00:33:28.800
אלה כל כך מעטים.

00:33:28.800 --> 00:33:32.350
אז זה רק מבטיח שהתוכן
נגיש ביציאה מהדלת.

00:33:34.030 --> 00:33:36.330
אז שלב ראשון, Linting.

00:33:36.330 --> 00:33:38.960
שלב שני,
ספריות בדיקת נגישות.

00:33:38.960 --> 00:33:40.000
שלב שלישי, מבחן רגרסיה.

00:33:40.000 --> 00:33:43.850
אז אתה הולך לשאול אותי עכשיו, מארק,
בשקף הראשון שהיה לך כאן,

00:33:43.850 --> 00:33:47.230
היה לך את הדבר המקסים הזה שאמר
שלב אפס אתה הולך להגיד,

00:33:47.230 --> 00:33:50.720
מה לגבי הרחבות?
אתה צודק.

00:33:50.720 --> 00:33:54.210
הרחבות אכן קיימות ויש להן
השפעה מועילה לאוטומציה.

00:33:55.230 --> 00:33:56.760
הנה הניסיון שלי
עם הרחבות.

00:33:56.760 --> 00:33:59.490
אין דרך אמיתית במחזור
החיים המתפתח לעקוב אחר

00:33:59.490 --> 00:34:01.750
אם מישהו באמת
משתמש בהרחבה.

00:34:01.750 --> 00:34:05.440
היי, הייתי מפתח
במשך תקופה ארוכה.

00:34:05.440 --> 00:34:08.870
אם תיתן לי משהו שאני
הולך לקבל קוד כבוד עבורו,

00:34:08.870 --> 00:34:12.100
בסביבה זריזה שאינה
יודעת דבר על נגישות,

00:34:12.100 --> 00:34:12.640
נחשו מה?

00:34:12.640 --> 00:34:14.030
אני לא מתכוון לעשות את זה.

00:34:14.030 --> 00:34:16.010
כי דברים של קוד כבוד
זה לא משהו

00:34:16.010 --> 00:34:18.960
שאני בהחלט מסמן תיבה
עבורו, הוא קריטריון קבלה,

00:34:18.960 --> 00:34:19.960
דברים כאלה.

00:34:20.850 --> 00:34:21.610
נחשו מה?

00:34:21.610 --> 00:34:25.040
רוב הצוותים שמשתמשים רק בהרחבות
בסופו של דבר שולחים דברים לייצור

00:34:25.040 --> 00:34:27.250
כי אין דרך לבדוק זאת.

00:34:27.250 --> 00:34:28.930
באמת אין.

00:34:28.930 --> 00:34:31.810
אז תמיד ניתן
להשתמש בהרחבות כשאתה בונה

00:34:31.810 --> 00:34:32.830
ויצירת תוכן חדש.

00:34:34.000 --> 00:34:40.170
אבל
אוטומציה של הדרגה ואוטומציה של נגישות, אחת, שתיים, שלוש,

00:34:40.170 --> 00:34:42.360
שעוזר לאכוף את
השימוש בהרחבות אלו.

00:34:42.360 --> 00:34:46.320
אז אם אני בונה את התוכן שלי, אני
בונה אותו, אני יכול להפעיל את התוסף שלי

00:34:46.320 --> 00:34:48.690
במארח המקומי שלי ותגיד,
היי, יש בעיה.

00:34:48.690 --> 00:34:52.290
ואני יכול להתעסק ולנסות
לתקן את זה בשידור חי ואז לשים את זה

00:34:52.290 --> 00:34:53.400
לתוך הקוד שלי.

00:34:53.400 --> 00:34:57.160
זה השימוש המעשי שאני רואה
שוב ושוב מהצוותים.

00:34:57.160 --> 00:35:02.170
אנו נוטים לראות את ההרחבות
משמשות כמגרש משחקים

00:35:02.170 --> 00:35:05.750
כדי להיות מסוגל לראות את
בעיות הנגישות ולאחר מכן לתקן אותן בשידור חי.

00:35:05.750 --> 00:35:07.400
זה עוזר לאכוף את זה.

00:35:07.400 --> 00:35:11.590
הדבר הגדול ביותר הוא שעם
הרחבות, כל כך קשה לעקוב אחר זה.

00:35:11.590 --> 00:35:14.360
כל כך הרבה חוליות שראיתי
אומרות, היי, שים צילום מסך

00:35:14.360 --> 00:35:17.060
מבעיות הנגישות שלך
ואין לך בעיות.

00:35:17.060 --> 00:35:19.510
כן, כבר ראיתי
את המערכת הזו רימתה

00:35:19.510 --> 00:35:21.280
למקום שבו מישהו מצלם
את אותו צילום מסך

00:35:21.280 --> 00:35:22.830
ואומר, תראה, זה תוקן.

00:35:22.830 --> 00:35:25.940
אז להרחבות יש
מקום באוטומציה.

00:35:25.940 --> 00:35:26.230
הם כן.

00:35:26.230 --> 00:35:29.290
100% כי הרבה
חוליות משתמשות בהם.

00:35:29.290 --> 00:35:31.940
אבל בכל הנוגע לאכיפה וההטמעה
של היום,

00:35:31.940 --> 00:35:35.320
עליך להשתמש בחלקי השלב
של שלב ראשון, שלב שני,

00:35:35.320 --> 00:35:38.980
ואם תגיע לשלב שלישי, שלב
שלישי, כדי לקבל הרחבות כראוי

00:35:38.980 --> 00:35:41.510
לשמש כפי
שהם צריכים להיות.

00:35:41.510 --> 00:35:45.020
ללכת מעל ומעבר למה
שעושה בדיקות האוטומציה.

00:35:45.020 --> 00:35:47.332
פשוט כל כך קשה לאכוף
הרחבות

00:35:47.333 --> 00:35:48.950
לומר כאילו, היי, אני הולך

00:35:48.950 --> 00:35:50.300
כדי להשתמש בהרחבות וללכת.

00:35:52.651 --> 00:35:56.351
אז סגרו את זה
קצת.

00:35:58.040 --> 00:36:02.570
אני אומר את המונח הזה, מריל אוונס
אומרת גם מונח דומה לזה,

00:36:02.570 --> 00:36:03.850
זכיות קטנות עבור רווחים גדולים.

00:36:03.850 --> 00:36:08.220
הרבה תגובות שאני מקבל מזה
היא שזה הרבה

00:36:08.220 --> 00:36:09.790
של שלבים רק לאוטומציה.

00:36:09.790 --> 00:36:11.510
אתה צודק, זה כן.

00:36:11.510 --> 00:36:14.300
אבל אני אומר לך עכשיו
, איך אתה מקבל

00:36:14.300 --> 00:36:18.820
לתוך מחזור החיים של הפיתוח
אתה צריך להשתלב במה שנעשה.

00:36:18.820 --> 00:36:22.270
נגישות במשך הזמן הארוך ביותר
נתפסה כמשהו

00:36:22.270 --> 00:36:24.840
שמאט את התהליך כולו.

00:36:24.840 --> 00:36:26.200
מאט את הכל.

00:36:26.200 --> 00:36:29.100
אז אוטומציה באה לומר,
כן, בוא נגביר את הגיבוי.

00:36:29.100 --> 00:36:32.970
אבל הבעיה היא שהאוטומציה
כמעט הלכה רחוק מדי.

00:36:32.970 --> 00:36:36.310
אז מה שקרה אז הוא
שבגלל האוטומציה הלכה רחוק מדי,

00:36:36.310 --> 00:36:40.680
אכלנו יתר על המידה,
העמסנו על סביבת המפתחים,

00:36:40.680 --> 00:36:42.700
כל הדברים השונים האלה
שאנחנו יכולים להשתמש בהם לאוטומציה.

00:36:42.700 --> 00:36:47.420
ועכשיו המפתחים שלנו חזרו ואמרו,
אה, כאילו, זה שוב יותר מדי.

00:36:47.420 --> 00:36:49.690
אז זה בערך כמו המחזור הזה.

00:36:49.690 --> 00:36:55.260
אז ההדרגה של זה מאפשרת לנו
להיות מסוגלים להגדיר תרבות

00:36:55.260 --> 00:36:58.120
של נגישות לעתיד.

00:36:58.120 --> 00:37:00.780
הרבה אנשים חושבים שכשאני
אומר את זה, זה לא נכון.

00:37:00.780 --> 00:37:02.000
זה באמת כך.

00:37:02.000 --> 00:37:05.790
קטן כמו אוטומציה היא
תת-מטלה קטנה של דברים שהם עושים

00:37:05.790 --> 00:37:08.310
בכמות קטנה של
בעיות שהם תופסים.

00:37:08.310 --> 00:37:14.790
באמת יש לו באופן עקבי
זרם תת-קרקעי של נגישות.

00:37:14.790 --> 00:37:16.947
גל יכול לעלות
ממש מהר

00:37:16.948 --> 00:37:18.780
ותגיד, היי, תקן את כל הדברים האלה.

00:37:18.780 --> 00:37:21.060
גלים יכולים להיות גדולים,
גלים יכולים להיות קטנים,

00:37:21.060 --> 00:37:22.600
אבל זרמים תחתונים
תמיד נשארים שם.

00:37:22.600 --> 00:37:24.940
אתה רוצה שהנגישות תישאר
כזרם תת-קרקעי.

00:37:26.150 --> 00:37:28.320
אז זה כל הזמן שם ומזכיר
כל הזמן לכולם

00:37:28.320 --> 00:37:30.630
שהנגישות חשובה
ו[לא נשמע 37:32].

00:37:30.630 --> 00:37:34.030
אז אם נמשיך לומר תעשה
אוטומציה, אז נסיים

00:37:34.030 --> 00:37:35.450
באותו מחזור שהיינו בו.

00:37:35.450 --> 00:37:37.690
אז עלינו להתחיל
בהדרגה כדי שזה יישאר.

00:37:37.690 --> 00:37:41.930
ומילה אחת אחרונה
לפני שאסיים כאן.

00:37:41.930 --> 00:37:45.660
נגישות אוטומטית, האמת
, מקבלת מוניטין רע

00:37:45.660 --> 00:37:47.540
בתחום שלנו, עם סיבה טובה.

00:37:48.560 --> 00:37:50.000
קיימות שכבות-על.

00:37:51.280 --> 00:37:53.950
עדיין יש מפתחים
שחושבים שזה פותר

00:37:53.950 --> 00:37:55.030
כל בעיות הנגישות.

00:37:55.030 --> 00:37:56.820
אני יכול להפוך כל דבר לאוטומטי.

00:37:58.070 --> 00:38:00.870
עדיין יש אנשים שעכשיו
יכולים לעדכן את זה ולומר,

00:38:00.870 --> 00:38:02.800
הם חושבים ש-AI הולך
לתקן הכל עם זה.

00:38:02.800 --> 00:38:04.910
כי זה אוטומטי.

00:38:04.910 --> 00:38:05.910
הנה העסקה.

00:38:05.910 --> 00:38:08.350
בסופו של יום,
זהו פורטל ושער

00:38:08.350 --> 00:38:10.960
לתוך אזור שממש
קשה לפיצוח.

00:38:10.960 --> 00:38:13.890
אני אומר את זה שוב ושוב.

00:38:13.890 --> 00:38:19.420
קליפות של צוותי פיתוח
קשות ביותר לפיצוח.

00:38:19.420 --> 00:38:21.820
מיום ליום, אנחנו בתחום
הנגישות כמו,

00:38:21.820 --> 00:38:23.920
למה הם לא הפכו
את זה לנגיש.

00:38:23.920 --> 00:38:26.290
האמת,
גם אני מתוסכל, אל תדאג.

00:38:26.290 --> 00:38:30.300
אבל עם כל הדברים
שצוותים זריזים צריכים לעשות, לוחות הזמנים פועלים,

00:38:30.300 --> 00:38:33.480
לדחוף דברים מהדלת,
זה נהיה ממש מסורבל עבורם.

00:38:33.480 --> 00:38:38.730
ולכן
קשה מאוד לפצח את הקליפה הזו כי הם לא רוצים

00:38:38.730 --> 00:38:41.320
כדי להוסיף להם עוד משימות או
דברים נוספים ואני מקבל את זה.

00:38:41.320 --> 00:38:42.500
הייתי שם, עשיתי את זה.

00:38:42.500 --> 00:38:46.320
אז אתה צריך לאט לאט לשלב את זה
כדי להביא את זה לאן שהוא צריך להגיע.

00:38:46.320 --> 00:38:48.960
זה באמת יכול לעזור
לצוות פיתוח ללמוד במהירות

00:38:48.960 --> 00:38:50.410
תוך אי האטה.

00:38:50.410 --> 00:38:55.010
וזה יכול לבנות תרבות לתוך
צוות הפיתוח שלך תוך כדי תנועה.

00:38:55.010 --> 00:38:59.210
שוב, אם נחזור אחורה,
סקר webAIM אומר לנו דבר אחד:

00:38:59.210 --> 00:39:00.912
מה שעשינו
מנקודת מבט של אוטומציה

00:39:00.913 --> 00:39:01.600
עדיין לא עובד.

00:39:01.600 --> 00:39:04.890
אנחנו פשוט זורקים על הקיר
ואומרים, היי, לך תעשה אוטומציה.

00:39:04.890 --> 00:39:06.890
זה לא עובד.

00:39:06.890 --> 00:39:08.398
שלב את זה, תכנון,

00:39:08.399 --> 00:39:10.530
להבין
באופן עקבי את מה שיש לנו

00:39:10.530 --> 00:39:15.720
לעשות כדי להבטיח שזה יימשך יעזור
לכל צוותי הפיתוח

00:39:15.720 --> 00:39:18.040
להרים נגישות
ולרוץ איתה.

00:39:18.040 --> 00:39:23.030
אז הדבר האחרון שלי הוא בוא נבנה
אוטומציה טובה יותר של נגישות.

00:39:23.030 --> 00:39:25.490
בואו נהרוג את המוניטין
שהאוטומציה פועלת

00:39:25.491 --> 00:39:26.600
כדי לעקוף הכל.

00:39:26.600 --> 00:39:28.220
כולם חושבים שזה
ינהל את העולם.

00:39:28.220 --> 00:39:29.260
לא.

00:39:29.260 --> 00:39:32.790
זהו שער אל
צוותי פיתוח ומאפשר להם באמת,

00:39:32.790 --> 00:39:35.320
באמת למד
נגישות במהירות

00:39:35.320 --> 00:39:39.170
ולבנות את התרבות הזו סביב
נגישות קדימה.

00:39:39.170 --> 00:39:41.480
אז בוא נבנה
אוטומציה טובה יותר

00:39:41.480 --> 00:39:45.520
ובואו נקבל נגישות
כחלק ממחזור החיים של המפתחים.

00:39:46.700 --> 00:39:47.210
וזהו.

00:39:47.210 --> 00:39:49.020
וזה הכל בשבילי.

00:39:49.020 --> 00:39:50.020
וואו.

00:39:51.060 --> 00:39:52.060
כנראה אכין יותר קפה עכשיו.

00:39:53.010 --> 00:39:55.080
JOOST: ובכן,
הרווחת את הקפה שלך.

00:39:55.080 --> 00:39:55.760
זה בטוח.

00:39:55.760 --> 00:39:56.490
תודה, מארק.

00:39:56.490 --> 00:39:57.830
זה היה מצוין.

00:39:57.830 --> 00:39:59.460
תודה רבה.

00:39:59.460 --> 00:40:01.040
רשמתי הערות.

00:40:01.040 --> 00:40:03.010
אחד
הדברים הראשונים שהבנתי

00:40:03.010 --> 00:40:05.963
בזמן שהסתכלתי
במצגת שלך...

00:40:05.964 --> 00:40:07.620
תמיד היו לנו הרבה

00:40:07.620 --> 00:40:10.140
של בדיקות אוטומטיות
ביואסט, שמצאתי את זה.

00:40:11.160 --> 00:40:14.520
ואני לא חושב שאי פעם
באמת הגענו לנקודה

00:40:14.520 --> 00:40:17.270
שבו עשינו הרבה
בדיקות נגישות אוטומטיות.

00:40:18.340 --> 00:40:22.120
אבל הרבה מאלה נראים
כאילו הם למעשה קלים מאוד

00:40:22.120 --> 00:40:24.080
כדי להעתיק הדבק מפרויקט אחד
למשנהו.

00:40:24.980 --> 00:40:25.330
סימן: כן.

00:40:25.330 --> 00:40:27.200
JOOST: האם יש
מקום שבו אנשים חולקים

00:40:27.200 --> 00:40:32.180
הדברים האלה בקוד פתוח מקוון
בצורה שנוכל לעשות זאת?

00:40:32.180 --> 00:40:33.120
איפה אתה עושה את זה?

00:40:34.610 --> 00:40:37.820
מארק: אז אני יכול לשתף את זה עם
כל מי שנמצא בערוצי Slack

00:40:37.820 --> 00:40:39.290
ואשתף אותו
בטוויטר ובלינקדאין.

00:40:39.290 --> 00:40:45.320
אז בעצם אני מכין
חפיסה שלמה.

00:40:45.320 --> 00:40:47.830
זה אחד הדברים
שאני בתהליך של ביצוע.

00:40:47.830 --> 00:40:52.930
אני למעשה מכין
חבילה שלמה של דוגמאות נגישות

00:40:52.930 --> 00:40:53.880
שקיימים בחוץ.

00:40:53.880 --> 00:40:55.220
אני יכול לחלוק את זה עם
כולם אחרי זה.

00:40:55.220 --> 00:40:56.620
יש
בו רק זוג כרגע.

00:40:56.620 --> 00:40:57.900
זה התגובה שלי
בטלפון הסייפר שלי.

00:40:57.900 --> 00:41:01.340
אני עושה את זה כשיש לי זמן, אבל מה
קורה כשיש לך שני ילדים?

00:41:01.340 --> 00:41:04.760
אבל יש לי דוגמאות
שפועלות להראות זאת.

00:41:05.880 --> 00:41:08.160
יש גם כמה דוגמאות
שקיימות בחוץ.

00:41:08.160 --> 00:41:13.580
אני חושב שמבחינת קוד פתוח, ל-Deque
Systems יש כמה עבור גרזן-ליבת.

00:41:13.580 --> 00:41:14.960
יש רק כמה.

00:41:14.960 --> 00:41:18.230
אבל המטרה שלי היא ליצור
ספריות לדוגמה כדי להציג לראווה

00:41:18.230 --> 00:41:20.290
כמה קל פשוט להעתיק
ולהדביק את הדברים האלה.

00:41:20.290 --> 00:41:23.350
כי באמת, בדיוק על מה שאתה
מדבר, זה המקרה.

00:41:23.350 --> 00:41:27.360
אתה ממש יכול להעתיק ולהדביק
ברגע שיש לך את מקרי הבדיקה האלה

00:41:27.360 --> 00:41:27.930
בכל רחבי הלוח.

00:41:27.930 --> 00:41:29.940
וכולם נוטים לקפוץ
עליי כדי להיות כמו,

00:41:29.940 --> 00:41:31.450
העתק והדבק כמו, מארק,
על מה אתה מדבר?

00:41:31.450 --> 00:41:32.280
אתה לא מעתיק ומדביק.

00:41:32.280 --> 00:41:33.370
אני כאילו, אתה יכול.

00:41:33.370 --> 00:41:36.230
אתה מגדיר את מקרי הבדיקה שלך
כראוי והכל מוגדר

00:41:36.230 --> 00:41:38.480
באופן שהוא יקרא
נגיש.

00:41:38.480 --> 00:41:39.440
זה פשוט יחסית.

00:41:39.440 --> 00:41:43.510
אז כן, אני יכול לפרסם כמה מהמשאבים
שאני מכיר גם אחרי זה.

00:41:44.380 --> 00:41:47.290
JOOST: כן טוב,
זה יהיה מדהים כי אני יודע

00:41:47.290 --> 00:41:50.880 
שגם בליבת וורדפרס עדיין
אין הרבה מזה .

00:41:50.880 --> 00:41:53.243
ואני חושב שזה
יועיל מאוד

00:41:53.244 --> 00:41:57.000
בעצם לעשות קצת יותר
מזה כי אני מסכים איתך.

00:41:57.000 --> 00:42:03.260
הדבר ששמעתי הכי הרבה נגד
עבודת נגישות כזו הוא,

00:42:03.260 --> 00:42:04.710
כן זה מאט הכל.

00:42:04.710 --> 00:42:08.140
וזה כאילו, נמאס לי
לשמוע את הטיעון הזה...

00:42:09.680 --> 00:42:12.520
מארק: בכל מקום ובכל מקום שאני
הולך, זה אותו ויכוח

00:42:12.520 --> 00:42:13.070
ושוב.

00:42:13.070 --> 00:42:14.546
ושוב,
זו הדחיפה הראשונית

00:42:14.547 --> 00:42:18.250
שעלינו להילחם נגדם.
זה רק יאט אותנו.

00:42:18.250 --> 00:42:21.080
והאמת היא
שהניסיון שלי

00:42:21.080 --> 00:42:25.750
עם דברים בהדרגה עבד
טוב יחסית כדי להשיג צוותים

00:42:25.750 --> 00:42:28.260
כאילו, היי,
זה פשוט תוספות פשוטות

00:42:28.260 --> 00:42:29.790
למה שאנחנו עושים עכשיו.

00:42:29.790 --> 00:42:31.390
לא משנה מה אתה משתמש,
אנחנו הולכים לבנות אותם

00:42:31.390 --> 00:42:32.280
עם מה שיש לכם.

00:42:33.300 --> 00:42:34.210
JOOST: מושלם.

00:42:34.210 --> 00:42:36.780
בסדר, יש לנו את
השאלות הראשונות שנכנסות.

00:42:36.780 --> 00:42:40.040
בן אוגילפי שואל,
האם אתה מודע לשיקולים כלשהם

00:42:40.040 --> 00:42:45.010
או מגבלות של חלק
מהגישות הללו כפי שהיא חלה

00:42:45.010 --> 00:42:46.420
לבניית וורדפרס?

00:42:46.420 --> 00:42:47.600
סימן: כן.

00:42:47.600 --> 00:42:51.460
כמה מהדברים שדיברנו
עליהם בקשר ל-linters,

00:42:51.460 --> 00:42:55.110
הנגישות בונה את עצמה,
כמו האינטגרציות בפועל

00:42:55.110 --> 00:42:57.840
עדיין לא קיימים
בתוך בניית וורדפרס.

00:42:57.840 --> 00:43:01.630
אז כמה מהם כן, חלק מהלינטרים
שבדקתי שם כן קיימים

00:43:01.630 --> 00:43:02.960
בשביל זה, אבל יש כאלה שלא.

00:43:02.960 --> 00:43:05.100
זה רק תוצר של כמה
מספריות הבדיקה

00:43:05.100 --> 00:43:06.360
והדברים עובדים.

00:43:06.360 --> 00:43:10.300
אז אלו יהיו
המגבלות היחידות שקיימות כרגע.

00:43:10.300 --> 00:43:14.690
זה רק האם הם זמינים עבור
המבנים עצמם שנמצאים שם בחוץ?

00:43:14.690 --> 00:43:17.610
האמת, זה קשה
כי לפעמים כמו

00:43:17.610 --> 00:43:22.630
כאשר אתה מריץ דברים עם
זה, אתה נתקל בבעיות

00:43:22.630 --> 00:43:25.910
כאשר אין לך אותם.

00:43:25.910 --> 00:43:28.900
לדוגמה,
אני יודע שהסתכלתי על אחד.

00:43:28.900 --> 00:43:31.200
אני חושב שזה היה Vue.

00:43:31.200 --> 00:43:33.630
אתר וורדפרס
נבנה ב-Vue.

00:43:33.630 --> 00:43:35.880
לא היו לו
חוקי נגישות או מוך,

00:43:35.880 --> 00:43:38.830
אבל היה קו כללי עם
כללי נגישות.

00:43:38.830 --> 00:43:41.190
במקרה הגרוע ביותר,
הכנס את התרחיש הכללי.

00:43:41.190 --> 00:43:44.660
אתה לפחות מקבל
בדיקות נגישות תוך כדי בניית התוכן.

00:43:44.660 --> 00:43:47.260
אבל בעצם המגבלה היא,
האם הם זמינים או לא

00:43:47.260 --> 00:43:48.810 
מנקודת מבט
של מוך או
ספרייה?

00:43:49.500 --> 00:43:50.540
JOOST: כן, מגניב.

00:43:53.170 --> 00:43:56.640
בן אייזנברג שואל,
מה לגבי עדכון אתרים ישנים יותר?

00:43:56.640 --> 00:43:59.241
מהם ניצחונות שקל להתמקד
בהם עבור אתרים ישנים יותר

00:43:59.242 --> 00:44:00.790
שצריך לתחזק?

00:44:00.790 --> 00:44:01.730
מארק: אה, בסדר.

00:44:01.730 --> 00:44:04.450
אז אלו שני דברים
עם אתרים ישנים יותר.

00:44:04.450 --> 00:44:09.810
אז אחד שאני תמיד מציע הוא
עם אתר ישן יותר עצמו,

00:44:09.810 --> 00:44:12.473
יש שני דברים
שאתה יכול לעשות בהתאם

00:44:12.474 --> 00:44:14.670
על כמה אתה באמת מעדכן אותו,

00:44:15.720 --> 00:44:18.590
אם אתה רוצה לחזור
ולעדכן את הקוד הישן, זה בסדר.

00:44:18.590 --> 00:44:21.750
אבל יש כמה צוותים
שאני מכיר שממש

00:44:21.750 --> 00:44:24.130
זה עתה עבר - ואני יודע
שכולם הולכים להצטמרר

00:44:24.130 --> 00:44:27.280
כשאני אומר את זה - ומצאתי
כמה מהבעיות הפשוטות

00:44:27.280 --> 00:44:30.020
כי למעשה אין להם
גישה לקוד.

00:44:30.020 --> 00:44:32.183
הם פשוט עברו
והוסיפו JavaScript

00:44:32.184 --> 00:44:33.560
לבעיות ספציפיות שתוקנו.

00:44:33.560 --> 00:44:35.310
הם לא עוברים ואומרים
כאילו היי תן לי דבר כללי.

00:44:35.310 --> 00:44:38.120
הם מתקנים
בעיות ספציפיות עם JavaScript.

00:44:38.120 --> 00:44:39.220
זו דרך אחת.

00:44:39.220 --> 00:44:44.170
הדבר הנוסף שאני מציע לאתרים
ישנים יותר הוא אם יש לך דרך

00:44:44.170 --> 00:44:46.830
כדי להגדיר
לעצמך מבחן אינטגרציה כמו,

00:44:46.830 --> 00:44:48.690
היי תגדיר ספרייה שתעבור
על הדברים האלה

00:44:48.690 --> 00:44:52.550
ובדוק את הבעיות, לכל
הפחות, תקן את הבעיות האוטומטיות.

00:44:52.550 --> 00:44:56.880
לרוב אתרים ישנים עצמם
נעשים ב-HTML סמנטי.

00:44:56.880 --> 00:44:59.840
אז רוב הבעיות
שאתה מוצא מתרחשות

00:44:59.840 --> 00:45:06.750
כי חסרות לו
תכונות אריה או דברים כאלה בצורה לא נכונה.

00:45:06.750 --> 00:45:09.950
אז מבחינה סמנטית זה נהדר, פשוט
חסרים לך דברים קטנים.

00:45:09.950 --> 00:45:13.270
אם אתה יכול להריץ חבילת בדיקה
נגד זה או אפילו הרחבה,

00:45:13.270 --> 00:45:15.920
שמקל על הביצוע, אבל
שני הדברים האלה הם בדרך כלל

00:45:15.920 --> 00:45:18.160
מה שאני רואה עבור אתרים ישנים יותר.

00:45:18.160 --> 00:45:21.220
רק מנסה לתקן את מה שאתה יכול
לתקן, בין אם זה עם JavaScript

00:45:21.220 --> 00:45:23.810
או מה לא ופשוט תוציא את
הבעיות הפשוטות מהדרך.

00:45:25.420 --> 00:45:26.940
JOOST: מגניב.

00:45:26.940 --> 00:45:30.670
יש לנו שאלה נוספת או בעצם
אני חושב שזה שלוש שאלות

00:45:30.670 --> 00:45:32.250
אז אני הולך לשאול
אותם אחד אחד.

00:45:32.250 --> 00:45:36.240
מאת סקוט תורנבורן: כמה
זמן בממוצע לוקח

00:45:36.240 --> 00:45:39.140
כדי להשפיע על השינוי כאשר אתה
מביא את זה עם צוות Dev.

00:45:40.430 --> 00:45:41.110
סימן: וואו.

00:45:41.110 --> 00:45:46.720
בסדר, אז שלב ראשון ושלב
שני, במיוחד עבור מוך

00:45:46.720 --> 00:45:49.550
אם אתה יודע שהם
משתמשים ב-linter ספציפי,

00:45:49.550 --> 00:45:51.500
ואתה יכול פשוט לומר הפעל
את כללי הנגישות,

00:45:51.500 --> 00:45:53.720
ששלב ראשון יכול להימשך שבוע.

00:45:53.720 --> 00:45:55.460
ופשוט תהיו כאילו זה
חלק מהתהליך עכשיו.

00:45:55.460 --> 00:45:58.540
אנו משתמשים
בכללי נגישות ועליך לתקן אותם.

00:45:58.540 --> 00:46:04.790
הכי מהר שראיתי שלב
ראשון, שלב שני לוקח הוא חודש

00:46:04.790 --> 00:46:08.790
אז אם אתה עושה
ספרינטים של שבועיים שניים, כמו שני ספרינטים.

00:46:10.210 --> 00:46:12.370
אז בדרך כלל זה
כנראה קשור לזה.

00:46:12.370 --> 00:46:14.430
שלב ראשון הוא בדרך כלל
ספרינט או שניים.

00:46:15.440 --> 00:46:20.900
שלב שלישי, בדרך כלל כי זה
אנשי QA ולאנשי QA באמת אכפת

00:46:20.900 --> 00:46:22.990
לגבי מבחן ממשק המשתמש שהם כותבים.

00:46:22.990 --> 00:46:25.990
זה בדרך כלל לוקח בערך
כמה חודשים, שלושה חודשים.

00:46:25.990 --> 00:46:27.260
ואז
מבחני רגרסיה, אני אהיה כנה.

00:46:27.260 --> 00:46:31.230
מבחן רגרסיה הוא מבחן שנעשה
קשה מאוד להשגה.

00:46:31.230 --> 00:46:33.270
אני מדבר על זה
כי זה באמת מדהים

00:46:33.270 --> 00:46:36.620
כי אני כן מאמין
שיש לזה ערך רב.

00:46:36.620 --> 00:46:39.980
ראיתי רק שני
צוותי פיתוח או ארגונים שעבדתי בהם

00:46:39.980 --> 00:46:42.170
עם זה עשו זאת.

00:46:42.170 --> 00:46:45.250
זה לוקח הרבה זמן להגיע לשם
כי ברגע שאתה מקבל את השלב הראשון,

00:46:45.250 --> 00:46:47.720
שלב שני, הרבה
פעמים זה כמו, אלוהים,

00:46:47.720 --> 00:46:49.170
מאיפה הגיעו כל
הבעיות האלה?

00:46:49.170 --> 00:46:51.360
ואז אתה צריך להתחיל
להבין תהליך כדי לתקן אותם

00:46:51.360 --> 00:46:52.750
ולשלב אותם.

00:46:52.750 --> 00:46:55.050
אז זה בדרך כלל
מסגרת הזמן עם צוות מפתחים.

00:46:56.270 --> 00:46:57.170
JOOST: מגניב.

00:46:57.170 --> 00:47:02.930
ומה הייתם מעריכים את
העלות וההאטה הראשונית

00:47:02.930 --> 00:47:04.620
על פרויקטים כדי לעדכן
את זה?

00:47:04.620 --> 00:47:05.610
מארק: בטח.

00:47:05.610 --> 00:47:07.450
אז לטינג, כלום.

00:47:07.450 --> 00:47:09.110
אין טיעון
נגד Linting.

00:47:09.110 --> 00:47:10.660
אם יש לך רצועה
שפועלת עכשיו,

00:47:10.660 --> 00:47:13.910
הפעל את כללי הנגישות, הם פועלים
, לא האטת שום דבר.

00:47:13.910 --> 00:47:16.920
ייתכן שלקח 30
שניות נוספות עד שהמפתח יעבור,

00:47:16.920 --> 00:47:19.610
הו, אני צריך תכונת alt על
זה, הבנתי.

00:47:21.270 --> 00:47:24.850
למשהו כמו
ספריות הבדיקה ודברים כאלה,

00:47:24.850 --> 00:47:27.510
אולי אתה מסתכל אם הייתי
מוסיף את זה לספרינט,

00:47:27.510 --> 00:47:29.860
זה עשוי להאט אותו מעט
עבור אנשי ה-QA שלך.

00:47:29.860 --> 00:47:32.740
עם זאת,
אם יש לך צוות QA או מישהו

00:47:32.740 --> 00:47:35.360
מי כותב את מקרה המבחן
בעצמו, כפי שהראינו,

00:47:35.360 --> 00:47:37.430
ההגדרה הראשונית היא
באמת החלק הקשה.

00:47:37.430 --> 00:47:40.470
לאחר מכן, זה פשוט סוג של
העתקה והדבקה וחוזר חלילה.

00:47:40.470 --> 00:47:44.200
אז האטה היא כנראה ספרינט
או שניים כדי להגדיר אותה ולצאת לדרך,

00:47:44.200 --> 00:47:46.620
אבל באמת שאין כל כך
הרבה עלות להאטה.

00:47:46.620 --> 00:47:47.810
בדיקת רגרסיה, בטח.

00:47:47.810 --> 00:47:50.010
צריך קצת
להבין, היי, איך אני הולך

00:47:50.010 --> 00:47:52.060
כדי לכתוב
מבחני רגרסיה תפקודית למשהו.

00:47:52.060 --> 00:47:54.361
אבל השניים הראשונים,
הראשון במיוחד,

00:47:54.362 --> 00:47:56.020
אין בעיה להאט.

00:47:56.020 --> 00:47:58.530
השני, אולי תהיה
האטה מסוימת, אבל הכל

00:47:58.530 --> 00:48:00.770
תלוי
גם במבנה הפרויקט.

00:48:00.770 --> 00:48:01.900
JOOST: ברור.

00:48:01.900 --> 00:48:06.240
ואיך משיגים הסכמה עם
Dev באילו כלים אוטומטיים להשתמש?

00:48:06.240 --> 00:48:10.610
האם אתה תמיד רק משתמש
במה שהם כבר משתמשים?

00:48:10.610 --> 00:48:13.150
מארק: אני תמיד ברירת מחדל
למה שהם עושים.

00:48:13.150 --> 00:48:16.700
השאלה הראשונה שאני שואל היא, היי,
במה אתה משתמש עבור צוות אחד?

00:48:16.700 --> 00:48:18.793
במה אתה משתמש
לבדיקות אוטומטיות?

00:48:18.794 --> 00:48:23.520
ואז אנחנו משלימים את הפערים
עם נגישות שם.

00:48:23.520 --> 00:48:26.570
כי אם הם לא
החליטו, אני תמיד אומר את זה,

00:48:26.570 --> 00:48:30.030
אם הם לא החליטו על
אסטרטגיית בדיקה, דחפו אותם

00:48:30.030 --> 00:48:32.690
כדי להבין את זה בעצמם
כי אם תלך ותגיד, ובכן,

00:48:32.690 --> 00:48:36.170
אנחנו צריכים להשתמש בזה,
זה תמיד מסתיים באסון.

00:48:36.170 --> 00:48:38.200
כי אז הם מתחילים להיות
כמו, הו לא, לא, לא,

00:48:38.200 --> 00:48:38.820
אנחנו הולכים להשתמש בזה.

00:48:38.820 --> 00:48:39.530
זה כאילו, בסדר, נהדר.

00:48:39.530 --> 00:48:43.010
אז אם צוות כבר יודע,
לך עם מה שיש לו, לך

00:48:43.010 --> 00:48:45.650
עם מה שהם משתמשים ותגיד,
היי, אנחנו הולכים לקפוץ פנימה

00:48:45.650 --> 00:48:48.130
עם נגישות עם זה.
אם הם לא.

00:48:48.130 --> 00:48:51.190
אז פשוט תהיו כאילו, בסדר
, הבנתם קודם.

00:48:51.190 --> 00:48:52.270
זו רק החוויה שלי.

00:48:52.270 --> 00:48:53.940
הבנתם את זה קודם,
אני אחזור ואלמד

00:48:53.940 --> 00:48:56.020
מה עלינו לעשות מצד
הנגישות של הדברים.

00:48:56.020 --> 00:48:59.140
אם נכפה עליו נגישות,
אז זה פשוט משתולל.

00:48:59.140 --> 00:49:02.250
JOOST: כן, אני מאוד מעריך את זה.

00:49:02.250 --> 00:49:06.840
אנדריאה פרשיה שואלת, בשנת 2017,
את השרתים הדיגיטליים של ממשלת בריטניה

00:49:06.840 --> 00:49:11.280
הפעיל ביקורת של
בודקי הנגישות האוטומטיים הפופולריים ביותר

00:49:11.280 --> 00:49:14.750
וגילה שאפילו הטוב ביותר
הצליח למצוא רק 40%

00:49:14.750 --> 00:49:15.570
מהבעיות.

00:49:15.570 --> 00:49:15.910
סימן: כן.

00:49:16.996 --> 00:49:19.850
JOOST: האם אתה יודע במקרה אם
נעשו ביקורות חדשות מאז,

00:49:19.850 --> 00:49:23.260
האם הדיוק של
הכלים האלה השתפר בדרך כלל?

00:49:23.978 --> 00:49:26.410
מארק: בטח, אז אני אסכם
את זה ממש מהר.

00:49:26.410 --> 00:49:31.640
אנדריאה, זה המונח הכללי;
30 עד 40% מבעיות הנגישות.

00:49:31.640 --> 00:49:34.970
הדבר היחיד שאני
יכול לומר שונה הוא,

00:49:34.970 --> 00:49:36.950
Deque Systems ערכה מחקר בשביל זה.

00:49:36.950 --> 00:49:40.080
מישהו אחר עשה מחקר
גם בשביל זה, אני שוכח מי זה היה.

00:49:40.080 --> 00:49:43.410
Deque Systems לקח את כל
ביקורות הנגישות שלהם שהם ביצעו

00:49:43.410 --> 00:49:45.140
מנקודת מבט ידנית,
נקודת מבט אוטומטית.

00:49:45.140 --> 00:49:48.230
הם חיברו אותם ואמרו
, לפי נפח,

00:49:48.230 --> 00:49:50.450
כמה מהבעיות
נתפסו על ידי אוטומציה?

00:49:50.450 --> 00:49:54.130
הם יצאו עם, לדעתי
56%, מכל בעיות הנגישות

00:49:54.130 --> 00:49:54.800
זה ידני.

00:49:54.800 --> 00:49:57.040
ואוטומטיות נתפסו
על ידי אוטומציה.

00:49:57.040 --> 00:50:00.000
זה לפי נפח, לא לפי
קריטריוני הצלחה או משהו כזה.

00:50:00.000 --> 00:50:02.960
אז שוב, זה איך שאתה רואה את זה.

00:50:02.960 --> 00:50:06.410
אז אם אתה אומר 30%
מקריטריוני ההצלחה, 100%, זה מה שאני אומר,

00:50:06.410 --> 00:50:07.760
100%, סליחה.

00:50:07.760 --> 00:50:09.650
זה מה שאני אומר
גם בדרך כלל, שכן זה השליש התחתון

00:50:09.650 --> 00:50:11.000
של בעיות נגישות.

00:50:11.000 --> 00:50:13.130
אם אתה מסתכל על זה לפי נפח,
יש כמה מחקרים בחוץ

00:50:13.130 --> 00:50:15.740
שאומרים שזה קרוב יותר ל-50
רק בגלל כל הבעיות

00:50:15.740 --> 00:50:18.220
שקיימים באינטרנט
, אבל אני לא יודע

00:50:18.220 --> 00:50:20.180
של חדשים כלשהם
שנעשו, לא.

00:50:21.970 --> 00:50:26.870
JOOST: עם זה הגענו לסוף
רשימת השאלות שלנו

00:50:26.870 --> 00:50:29.090
ואנחנו הולכים להקל עליך.

00:50:29.090 --> 00:50:32.340
שוב תודה לך מארק על
המצגת המצוינת שלך

00:50:32.340 --> 00:50:34.550
ותודה לכולם על ההשתתפות.

00:50:35.600 --> 00:50:38.140
אתה יכול להמשיך את
השיחה בצ'אט

00:50:38.140 --> 00:50:45.390
או מדיה חברתית באמצעות
ההאשטאגים wpa11yday ו-wpad2023.

00:50:45.390 --> 00:50:47.290
אנחנו גם מאוד
מעריכים את זה אם תלך

00:50:47.290 --> 00:50:51.400 
לאתר יום
הנגישות של WP
משוב חתך

00:50:51.400 --> 00:50:54.130
כדי לספק
משוב אנונימי למהירות עבור הדוברים שלנו

00:50:54.130 --> 00:50:59.560
במצגות שלנו ובזמן שאתה
מעז אתה יכול להיכנס כדי לזכות בחולצה.

00:50:59.560 --> 00:51:02.550
המשך לעקוב אחר אופן
הקוד לגישה למילות מפתח

00:51:02.550 --> 00:51:06.440
בוורדפרס מגיעה הבאה
עם Priti Rohra בראש

00:51:06.440 --> 00:51:09.010
של השעה או 12:00 UTC.

00:51:09.010 --> 00:51:12.460
ובזמן שאתה מחכה אל תשכח
לבקר בדפי נותני החסות שלנו

00:51:12.460 --> 00:51:17.020
כדי לתפוס סוואג וירטואלי ולהיכנס
כדי לזכות בפרסים נהדרים.

00:51:17.020 --> 00:51:20.120
זה אני חתום
כ-MC גם להיום.

00:51:20.120 --> 00:51:23.550
אני מקווה שתהנו משאר
יום הנגישות של וורדפרס

00:51:23.550 --> 00:51:25.380
ונתראה
כאן אחרי ההפסקה.

00:51:28.620 --> 00:51:33.260
דובר 1: תודה לנותני
החסות של יום הנגישות של וורדפרס 2023.

00:51:33.260 --> 00:51:36.140
נותן חסות פלטינום: Equalize Digital.

00:51:36.140 --> 00:51:38.890 
תוסף בודק הנגישות
של Equalize Digital

00:51:38.890 --> 00:51:41.640
הוא
כלי אוטומטי לסריקת נגישות

00:51:41.640 --> 00:51:44.820
שעוזר לאתרי וורדפרס
להפוך ולהישאר נגישים.

00:51:46.070 --> 00:51:51.010
נותן חסות פלטינום Gravity Forms:
Gravity Forms הוא המקצוען

00:51:51.010 --> 00:51:54.170
בונה טפסים שאתה
צריך כדי ליצור יפה,

00:51:54.170 --> 00:51:57.270
צורות חזקות ונגישות.

00:51:57.270 --> 00:52:03.170
זהב נותן חסות 20i, Deque,
Empire Caption Solutions,

00:52:03.170 --> 00:52:05.360
מנוע לחיצה ומנוע WP.

00:52:06.930 --> 00:52:13.800
נותני חסות כסף, Code Geek, דרייק
קופר, GoDaddy, LoneRock Point,

00:52:13.800 --> 00:52:19.030
NerdPress, אתר לילה מאת
KineticIRIS, Raiola Networks,

00:52:20.290 --> 00:52:23.300
A11Y קולקטיב, והבלוגסמית.

00:52:25.170 --> 00:52:30.580
נותני חסות ברונזה, AccessiCart,
GreenGeeks אירוח אתרים,

00:52:30.580 --> 00:52:38.580
ניתוח הול ייעוץ SEO,
HDC, ITX, Ivy Cat, Metabox,

00:52:42.330 --> 00:52:47.243
שפים של פיקסל, פשוט תזמן
פגישות, SiteGround,

00:52:47.244 --> 00:52:52.470
טרמגדון, מיוצג חסר
ב-Tech, Leaglot ו-Yoast.
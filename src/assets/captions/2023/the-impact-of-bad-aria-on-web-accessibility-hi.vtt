WEBVTT

00:00:01.140 --> 00:00:05.603
 एम्बर हिंड्स: वर्डप्रेस
एक्सेसिबिलिटी डे 2023: बुरे ARIA का

00:00:05.603 --> 00:00:11.720
वेब एक्सेसिबिलिटी पर प्रभाव
- स्पीकर रश्मि कटावर के साथ,

00:00:11.720 --> 00:00:14.100
वेब एक्सेसिबिलिटी सलाहकार।

00:00:14.100 --> 00:00:17.710
यह प्रेजेंटेशन 28 सितंबर, 
2023 को रिकॉर्ड की गई थी।

00:00:17.710 --> 00:00:22.720
 रोनक गणात्रा: वर्डप्रेस 
एक्सेसिबिलिटी डे 2023 में आपका स्वागत है।

00:00:22.720 --> 00:00:27.520
मेरा नाम रोनक गणात्रा है और मैं
मल्टीडॉट्स में वर्डप्रेस इंजीनियर हूं।

00:00:28.580 --> 00:00:34.250
इस सेशन में जुड़ने के लिए धन्यवाद, 
बुरे ARIA का वेब एक्सेसिबिलिटी पर प्रभाव

00:00:34.250 --> 00:00:38.560
रश्मि कटावर के साथ।

00:00:38.560 --> 00:00:41.190
रश्मि एक भावुक
एक्सेसिबिलिटी उत्साही,

00:00:41.190 --> 00:00:43.520
और फ्रीलांस वेब
एक्सेसिबिलिटी कंसल्टेंट हैं।

00:00:43.520 --> 00:00:48.840
वह W3C में आमंत्रित विशेषज्ञ
भी हैं और सक्रिय रूप से योगदान देती हैं

00:00:48.840 --> 00:00:52.500
संज्ञानात्मक और शिक्षण
दृश्यता एक्सेसिबिलिटी में।

00:00:52.500 --> 00:00:57.200
रश्मि सभी व्यक्तियों के लिए 
प्रौद्योगिकी तक समान पहुंच सुनिश्चित करने के लिए

00:00:57.200 --> 00:00:58.630
गहराई से प्रतिबद्ध हैं।

00:00:58.630 --> 00:01:02.960
एक्सेसिबिलिटी के लिए उनका उत्साह
एक अधिक समावेशी समाज बनाने के लिए

00:01:02.960 --> 00:01:07.250
प्रौद्योगिकी की शक्ति में 
उनके अटूट विश्वास से प्रेरित है।

00:01:09.810 --> 00:01:13.410
कृपया अपने प्रश्न Zoom Q&amp;A 
सेक्शन में जोड़ने के लिए स्वतंत्र महसूस करें,

00:01:13.410 --> 00:01:16.360
और हम सेशन के अंत में
उनका उत्तर देंगे।

00:01:16.360 --> 00:01:18.800
अन्य उपस्थित लोगों से जुड़ने
के लिए चैट का उपयोग करें।

00:01:20.260 --> 00:01:22.540
अब मुझे लगता है रश्मि,
मंच आपका है।

00:01:22.540 --> 00:01:23.340
आप शुरू कर सकती हैं।

00:01:23.340 --> 00:01:23.870
धन्यवाद।

00:01:24.733 --> 00:01:26.140
 रश्मि कटावर: सभी को नमस्कार।

00:01:26.140 --> 00:01:28.180
बेहतरीन परिचय के लिए
धन्यवाद, फिर से।

00:01:28.180 --> 00:01:29.710
तो, नमस्ते, मैं रश्मि कटावर हूं।

00:01:30.800 --> 00:01:31.890
मैं भारत से हूं।

00:01:31.890 --> 00:01:36.200
मैं एक फ्रीलांस वेब एक्सेसिबिलिटी
कंसल्टेंट और W3C आमंत्रित विशेषज्ञ हूं।

00:01:37.580 --> 00:01:42.710
मैं W3C के भाग के रूप में
कोगा टास्क फोर्स के काम में भी

00:01:42.710 --> 00:01:44.020
सक्रिय रूप से योगदान दे रही हूं।

00:01:48.600 --> 00:01:51.390
और मैं [अस्पष्ट 01:52] LinkedIn 
कम्युनिटी में सोशल मीडिया मैनेजर

00:01:51.390 --> 00:01:53.220
के रूप में भी कार्य कर रही हूं।

00:01:53.220 --> 00:01:57.000
तो मैं आप सभी का स्वागत करती हूं
मेरी प्रेजेंटेशन में बुरे ARIA का

00:01:57.000 --> 00:01:58.710
वेब एक्सेसिबिलिटी पर प्रभाव विषय पर।

00:02:01.120 --> 00:02:03.690
मैं यह बताकर शुरुआत करती हूं
कि मैंने यह विषय क्यों चुना।

00:02:06.000 --> 00:02:09.800
एक्सेसिबिलिटी ऑडिट के दौरान,
मैंने पाया कि कई एक्सेसिबिलिटी

00:02:09.800 --> 00:02:14.240
और उपयोगिता समस्याएं कोड में
ARIA के गलत उपयोग के कारण आ रही थीं।

00:02:14.240 --> 00:02:17.410
ARIA के ये गलत उपयोग महत्वपूर्ण
चुनौतियां पैदा कर रहे थे

00:02:17.410 --> 00:02:22.340
उन लोगों के लिए जो वेब नेविगेट
करने के लिए सहायक प्रौद्योगिकियों का उपयोग करते हैं।

00:02:23.780 --> 00:02:28.780
यह सराहनीय है कि डेवलपर्स
अच्छी नीयत से ARIA का उपयोग कर रहे हैं,

00:02:28.780 --> 00:02:33.180
लेकिन पर्याप्त ज्ञान के बिना,
वे बुरे ARIA के जाल में फंस सकते हैं

00:02:33.180 --> 00:02:35.700
और दुर्गम समाधान बना सकते हैं।

00:02:37.180 --> 00:02:42.100
ARIA एक बहुत शक्तिशाली उपकरण है
जो उन लोगों के लिए एक्सेसिबिलिटी बढ़ाता है

00:02:42.100 --> 00:02:45.760
जो सहायक प्रौद्योगिकियों का
उपयोग करते हैं यदि इसे पर्याप्त रूप से उपयोग किया जाए।

00:02:45.760 --> 00:02:48.210
दूसरी ओर, इसका दुरुपयोग
अच्छे से अधिक नुकसान करता है।

00:02:49.320 --> 00:02:51.575
तो आज मैं अपनी प्रेजेंटेशन
की मदद से,

00:02:51.576 --> 00:02:53.020
वास्तविक जीवन के उदाहरणों के साथ,

00:02:53.020 --> 00:02:57.850
साझा करूंगी कि ARIA का दुरुपयोग
कैसे उपयोगकर्ताओं के लिए बाधाएं बनाता है

00:02:57.850 --> 00:03:00.630
और आप सही ARIA का उपयोग करके
उन बाधाओं को कैसे हटा सकते हैं,

00:03:00.630 --> 00:03:01.880
और सर्वोत्तम प्रथाओं का पालन करके।

00:03:03.410 --> 00:03:05.900
मैं आपको विश्वास दिलाती हूं,
इस सेशन के अंत तक,

00:03:05.900 --> 00:03:10.070
आपकी सभी ARIA अवधारणाओं
की बेहतर समझ होगी।

00:03:10.070 --> 00:03:12.620
यह आपको अपनी इरादतन मेहनत
को संरेखित करने में भी मदद करेगा

00:03:12.620 --> 00:03:14.670
और वेब एक्सेसिबिलिटी सुधारने
की दिशा में प्रभाव।

00:03:16.190 --> 00:03:19.950
ARIA की सर्वोत्तम प्रथाओं का पालन करना,
और एक सक्रिय दृष्टिकोण का उपयोग करना

00:03:19.950 --> 00:03:23.570
डेवलपर्स और व्यवसायों पर समय,
प्रयास और पैसे के मामले में

00:03:23.570 --> 00:03:25.190
भार कम करने में भी मदद करेगा।

00:03:26.960 --> 00:03:29.445
यह उपयोगकर्ता अनुभवों
को भी बेहतर बनाएगा

00:03:29.446 --> 00:03:31.370
साथ ही कानूनी जोखिम कम करेगा।

00:03:33.670 --> 00:03:36.230
मुझे यकीन है कि आप सभी ने
स्पाइडर-मैन फिल्म से प्रसिद्ध उद्धरण सुना होगा

00:03:36.230 --> 00:03:38.900
कि "महान शक्ति के साथ

00:03:38.900 --> 00:03:40.980
महान जिम्मेदारी आती है"।

00:03:40.980 --> 00:03:43.410
यह ARIA के उपयोग के
मामले में भी लागू होता है।

00:03:45.730 --> 00:03:49.050
ARIA हमें एक्सेसिबिलिटी
सुधारने की शक्ति देता है।

00:03:49.050 --> 00:03:53.210
इसलिए जब हम ARIA का उपयोग करते हैं,
तो यह हमारी जिम्मेदारी है कि हम इसे विवेकपूर्ण तरीके से उपयोग करें

00:03:54.880 --> 00:03:57.250
क्योंकि ARIA का दुरुपयोग
अच्छे से अधिक नुकसान करता है।

00:03:59.340 --> 00:04:03.130
बुरा ARIA एक दोषपूर्ण रैंप की तरह है
जो अपने इच्छित उद्देश्य की पूर्ति नहीं करता।

00:04:05.540 --> 00:04:08.070
एक रैंप की कल्पना करें जो
लैंडिंग सतह से एक फुट की ऊंचाई पर स्थापित है।

00:04:08.870 --> 00:04:11.740
क्या यह रैंप वास्तव में
भविष्य के उपयोगकर्ताओं की मदद करता है?

00:04:11.740 --> 00:04:13.150
बिल्कुल नहीं।

00:04:13.150 --> 00:04:17.260
आखिरकार, यह स्केटबोर्डर्स के लिए
अपनी ताकत दिखाने के लिए नहीं है।

00:04:19.000 --> 00:04:22.980
आर्किटेक्ट की अच्छी
नीयत थी जब उसने इसे स्थापित किया,

00:04:22.980 --> 00:04:26.334
लेकिन उचित दिशानिर्देशों
का पालन किए बिना

00:04:26.335 --> 00:04:28.620
और उपयोगकर्ता की जरूरतों
को समझे बिना,

00:04:28.620 --> 00:04:34.660
वह सभी उपयोगकर्ताओं की
जरूरतों को समझने में विफल रहा और

00:04:34.660 --> 00:04:36.410
व्हीलचेयर उपयोगकर्ताओं की मदद करने में विफल रहा।

00:04:36.410 --> 00:04:40.080
इसी तरह, यदि डेवलपर्स ARIA को
समझे बिना उपयोग करते हैं,

00:04:40.080 --> 00:04:44.100
और इसे कोड में लागू करते हैं,
तो वे इच्छित रूप से उपयोगकर्ताओं की मदद करने में विफल हो जाते हैं।

00:04:45.890 --> 00:04:49.600
नवीनतम WebAIM सर्वेक्षण का डेटा
भी मेरी चिंताओं का समर्थन करता है।

00:04:50.870 --> 00:04:54.530
2023 WebAIM मिलियन सर्वेक्षण
डेटा बताता है कि ARIA का उपयोग

00:04:54.530 --> 00:04:57.360
केवल एक वर्ष में 29% बढ़ गया है।

00:04:58.770 --> 00:05:01.000
और यह [अस्पष्ट 04:49] 2019 से बढ़ा है।

00:05:01.000 --> 00:05:02.560
तो चिंता की बात क्या है?

00:05:05.270 --> 00:05:07.700
चिंता की बात यह है
कि यह भी बताता है

00:05:07.700 --> 00:05:13.160
कि ARIA वाले पेजों पर 68.6% अधिक
पता लगाई गई त्रुटियां पाई जाती हैं।

00:05:14.730 --> 00:05:16.940
जितनी अधिक ARIA विशेषताएं
मौजूद होती हैं,

00:05:16.940 --> 00:05:18.810
उतनी ही अधिक एक्सेसिबिलिटी
त्रुटियों की अपेक्षा की जाती थी।

00:05:20.140 --> 00:05:23.750
निष्कर्ष यह है कि,
यदि आप ARIA का गलत उपयोग करते हैं,

00:05:23.750 --> 00:05:25.720
तो आप अपनी साइटों को
कम सुलभ बना सकते हैं।

00:05:26.950 --> 00:05:30.230
तो क्यों न इसे एक वास्तविक
जीवन के उदाहरण की मदद से समझें?

00:05:34.690 --> 00:05:36.010
आइए बॉब से मिलते हैं।

00:05:36.010 --> 00:05:37.990
[स्क्रीन रीडर आवाज]

00:05:40.930 --> 00:05:42.700
बॉब एक नेत्रहीन स्क्रीन
रीडर उपयोगकर्ता है।

00:05:44.010 --> 00:05:47.910
वह अपनी प्यारी पत्नी सारा को
उनकी सालगिरह पर आश्चर्यचकित करना चाहता था

00:05:49.430 --> 00:05:51.710
उसे कुछ व्यक्तिगत
वस्तुएं उपहार देकर।

00:05:54.490 --> 00:05:59.900
बहुत उत्साह के साथ, उसने
उपहार खोजने के लिए वेबसाइट खोली।

00:05:59.900 --> 00:06:03.720
लेकिन उसकी निराशा की बात यह थी कि
जैसे ही उसने कीबोर्ड और स्क्रीन रीडर के साथ

00:06:03.720 --> 00:06:09.060
साइट खोजना शुरू किया,
वह अचानक और अप्रत्याशित घोषणाओं से

00:06:09.060 --> 00:06:10.720
भर गया।

00:06:12.940 --> 00:06:17.940
इससे वह भटक गया और
उसके स्क्रीन रीडर के प्रवाह में बाधा आई।

00:06:17.940 --> 00:06:23.030
निरंतर बाधाओं के बीच वह
अपनी सामग्री पर मुश्किल से ध्यान दे सका।

00:06:23.030 --> 00:06:25.240
मैंने उसके अनुभव को
एक वीडियो में रिकॉर्ड किया है।

00:06:26.600 --> 00:06:31.130
वीडियो में एक उपयोगकर्ता को
कीबोर्ड के साथ स्क्रीन रीडर NVDA का उपयोग करते दिखाया गया है।

00:06:32.340 --> 00:06:35.890
और स्पीच रीडर विंडो स्क्रीन रीडर
द्वारा पढ़े गए टेक्स्ट को

00:06:35.890 --> 00:06:36.890
रैखिक क्रम में दिखाती है।

00:06:39.010 --> 00:06:40.640
तो आइए बॉब के अनुभव को

00:06:40.640 --> 00:06:43.250
बेहतर ढंग से समझने के लिए
ऑडियो को एक साथ सुनते हैं।

00:06:45.212 --> 00:07:38.637
[स्क्रीन रीडर आवाज]

00:07:40.633 --> 00:07:41.602
परेशान करने वाला लगता है।

00:07:43.567 --> 00:07:46.349
तो बॉब की उपहार खोज
का क्या हुआ?

00:07:46.350 --> 00:07:49.730
कुछ मिनट के संघर्ष के बाद,
उसने साइट बंद कर दी

00:07:49.730 --> 00:07:51.890
और अपनी पत्नी को ऑनलाइन
उपहार देने का विचार छोड़ दिया।

00:07:52.990 --> 00:07:55.200
तो इसके पीछे क्या कारण था?

00:07:55.200 --> 00:07:58.340
यह ARIA विशेषता के दुरुपयोग
के कारण हो रहा था, aria-live बराबर

00:07:58.340 --> 00:08:01.480
polite ऑटो रोटेटिंग
कैरोसेल पर।

00:08:01.480 --> 00:08:04.410
हम इस पर बाद में चर्चा करेंगे,
लेकिन फिलहाल,

00:08:04.410 --> 00:08:08.010
लेखक ने ARIA का उपयोग
इस धारणा के तहत किया है

00:08:08.010 --> 00:08:11.420
कि यह उपयोगकर्ताओं,
स्क्रीन रीडर उपयोगकर्ताओं की मदद करेगा।

00:08:11.420 --> 00:08:12.870
लेकिन वास्तविकता में क्या हुआ?

00:08:12.870 --> 00:08:15.930
वास्तविकता में,
इसने उपयोगकर्ताओं के अनुभव को बुरी तरह तोड़ दिया।

00:08:15.930 --> 00:08:20.040
तो यही होता है जब वेबसाइटों को
बुरे ARIA के साथ बनाया जाता है।

00:08:22.830 --> 00:08:25.300
बॉब के अनुभव से,
हमें यह समझ मिली कि

00:08:25.300 --> 00:08:28.140
सहायक प्रौद्योगिकी उपयोगकर्ताओं
की मदद करने के बजाय,

00:08:28.141 --> 00:08:30.590
बुरा ARIA उनके लिए
बाधाएं खड़ी करता है।

00:08:31.020 --> 00:08:33.460
यह उपयोगकर्ता को गुमराह,
निराश करता है,

00:08:33.460 --> 00:08:36.100
कभी-कभी उनके लिए
झूठी अपेक्षाएं पैदा करता है।

00:08:36.100 --> 00:08:38.590
यह उन्हें पूर्ण डिजिटल
अनुभव लेने से रोकता है।

00:08:39.650 --> 00:08:43.730
और ऐसे अनुभव उपयोगकर्ताओं को या तो
अपना काम बीच में छोड़ने के लिए मजबूर कर सकते हैं

00:08:43.730 --> 00:08:46.310
या अपना काम पूरा करने के लिए
दूसरों पर निर्भर रहने के लिए।

00:08:46.310 --> 00:08:47.740
यह ARIA के उद्देश्य को नाकाम करता है।

00:08:50.580 --> 00:08:52.650
तो आइए जानते हैं कि
ARIA क्या है।

00:08:52.650 --> 00:08:55.960
क्योंकि इसे समझना और
इसका बुद्धिमानी से उपयोग करना बहुत महत्वपूर्ण है।

00:08:56.990 --> 00:08:59.500
आधुनिक समय में,
वेब पेज व्यवहार कर रहे हैं

00:08:59.500 --> 00:09:02.810
अधिक रिच
इंटरनेट एप्लिकेशन की तरह।

00:09:02.810 --> 00:09:06.010
उनके पास रिच यूजर
इंटरफेस हैं, उन्नत यूजर इंटरफेस हैं,

00:09:06.010 --> 00:09:07.330
और डायनामिक कंटेंट हैं।

00:09:08.600 --> 00:09:12.610
दुर्भाग्य से, HTML में वह सभी
अंग्रेजी शब्दार्थ नहीं है

00:09:12.610 --> 00:09:17.310
जो इन सभी रिच कंट्रोल्स के लिए
शब्दार्थ व्यक्त कर सके, जैसे टैब्स,

00:09:17.310 --> 00:09:19.970
टैब लिस्ट, प्री-मेन्यू, आदि।

00:09:19.970 --> 00:09:22.270
देखने वाले उपयोगकर्ता इन कंट्रोल्स को
विजुअल डिज़ाइन पैटर्न की मदद से

00:09:22.270 --> 00:09:24.950
समझ सकते हैं।

00:09:24.950 --> 00:09:27.440
लेकिन शब्दार्थ के बिना,
सहायक उपकरण उपयोगकर्ता

00:09:27.440 --> 00:09:30.300
इन तत्वों की पूरी
कार्यक्षमता और व्यवहार को

00:09:30.300 --> 00:09:31.720
नहीं जान सकते।

00:09:31.720 --> 00:09:33.970
तो यहाँ, ARIA उस अंतर को
भरने के लिए एक पुल का काम करता है।

00:09:35.950 --> 00:09:37.509
वेब एक्सेसिबिलिटी इनिशिएटिव,

00:09:37.510 --> 00:09:39.660
एक्सेसिबल रिच
इंटरनेट एप्लिकेशन्स,

00:09:39.660 --> 00:09:43.230
सभी ARIA के द्वारा,
या ARIA जैसा कि हम संक्षेप में कहते हैं।

00:09:43.230 --> 00:09:45.800
ARIA एक W3C स्पेसिफिकेशन है।

00:09:45.800 --> 00:09:50.150
इसमें भूमिकाओं और
विशेषताओं का एक सेट शामिल है जो लेखक

00:09:50.150 --> 00:09:54.540
HTML में जोड़ सकते हैं ताकि वेब कंटेंट
और वेब एप्लिकेशन की

00:09:54.540 --> 00:09:59.220
वेब एक्सेसिबिलिटी में सुधार हो सके उन
उपयोगकर्ताओं के लिए जो सहायक तकनीकों का उपयोग करते हैं, मुख्यतः

00:09:59.220 --> 00:10:00.220
स्क्रीन रीडर के लिए।

00:10:02.950 --> 00:10:06.910
मान लीजिए आप एक कहानी की किताब पढ़ रहे हैं
और किसी ने छोटे नोट्स जोड़े हैं

00:10:06.910 --> 00:10:08.830
आपको कहानी को बेहतर समझने में
मदद करने के लिए।

00:10:08.830 --> 00:10:11.420
तो ARIA सरल शब्दों में
उन नोट्स की तरह है।

00:10:11.420 --> 00:10:15.620
ARIA की शक्ति अपार है।

00:10:15.620 --> 00:10:17.220
इसमें बहुत सारी सुविधाएं हैं।

00:10:18.610 --> 00:10:21.120
हमारे पास सीमित समय है,
तो आज इनमें से कुछ को कवर करते हैं।

00:10:22.160 --> 00:10:23.160
वास्तव में।

00:10:23.700 --> 00:10:29.520
तो ARIA लेखकों को विजेट्स के प्रकार का
वर्णन करने में मदद करता है

00:10:29.520 --> 00:10:32.540
भूमिकाओं की मदद से जैसे टैब लिस्ट,
टैब, मेन्यू, ट्री, आदि।

00:10:33.800 --> 00:10:37.570
वे विशेषताओं की मदद से स्थिति को परिभाषित कर सकते हैं
जैसे ARIA सिलेक्टेड,

00:10:37.570 --> 00:10:39.090
ARIA कंट्रोल्स, आदि।

00:10:42.260 --> 00:10:45.060
वे तत्वों के बीच संबंधों को
ARIA ओन्स के साथ परिभाषित कर सकते हैं,

00:10:45.060 --> 00:10:46.140
ARIA कंट्रोल्स, आदि।

00:10:47.710 --> 00:10:50.990
लेखक एक्सेसिबल नाम प्रदान कर सकते हैं,
ARIA लेबल का उपयोग करके

00:10:50.990 --> 00:10:52.510
या ARIA लेबल बाई ऑथर।

00:10:52.510 --> 00:10:54.730
लेखक एक्सेसिबल विवरण प्रदान कर सकते हैं
ARIA डिस्क्राइब बटन

00:10:54.730 --> 00:10:58.060
की मदद से।

00:10:58.060 --> 00:11:01.107
डायनामिक कंटेंट
परिवर्तनों को व्यक्त करने के लिए,

00:11:01.108 --> 00:11:03.450
लेखक लाइव रीजन का उपयोग कर सकते हैं।

00:11:03.450 --> 00:11:07.010
उदाहरण के लिए, सफलता संदेश,
त्रुटि संदेश, चेतावनियां,

00:11:07.010 --> 00:11:08.390
या खेल स्कोर अपडेट, आदि।

00:11:10.050 --> 00:11:13.110
वे ARIA हिडन विशेषताओं का उपयोग करके
सजावटी सामग्री को छुपा सकते हैं।

00:11:14.350 --> 00:11:18.710
अब सवाल यह आता है कि ARIA
सहायक तकनीकों की कैसे मदद करता है?

00:11:21.510 --> 00:11:25.560
ARIA भूमिका, नाम, स्थिति आदि
जोड़ने में मदद करता है,

00:11:25.560 --> 00:11:29.270
डॉक्यूमेंट ऑब्जेक्ट मॉडल से बनाए गए
एक्सेसिबिलिटी ट्री में।

00:11:31.340 --> 00:11:34.800
यह बदले में एक्सेसिबिलिटी
API को उस जानकारी को

00:11:34.800 --> 00:11:36.150
सहायक तकनीकों तक पहुंचाने में मदद करता है।

00:11:40.360 --> 00:11:42.050
अब हम जानते हैं कि ARIA क्या कर सकता है।

00:11:43.470 --> 00:11:45.660
तो आइए यह भी समझते हैं
कि ARIA क्या नहीं कर सकता।

00:11:47.120 --> 00:11:49.120
ARIA किसी तत्व में
व्यवहार नहीं जोड़ सकता।

00:11:50.390 --> 00:11:52.940
यह किसी तत्व का
दिखावा नहीं बदल सकता,

00:11:52.940 --> 00:11:57.130
न ही यह फोकसेबिलिटी जोड़ सकता है,
न ही यह तत्वों में कीबोर्ड कार्यक्षमता

00:11:57.130 --> 00:11:58.460
जोड़ सकता है।

00:11:59.500 --> 00:12:03.667
इन सुविधाओं को जोड़ने के लिए,
लेखक को स्क्रिप्ट्स और CSS का उपयोग करना होगा।

00:12:05.100 --> 00:12:07.133
ARIA का इष्टतम उपयोग करने के लिए,

00:12:07.133 --> 00:12:10.820
लेखक को ARIA के
पांच नियमों का पालन करना चाहिए।

00:12:10.820 --> 00:12:12.360
तो वे क्या हैं?

00:12:12.360 --> 00:12:15.050
आइए उन्हें एक-एक करके देखते हैं।

00:12:15.050 --> 00:12:20.130
नियम एक कहता है, ARIA का उपयोग न करें यदि वही
शब्दार्थ HTML में उपलब्ध है।

00:12:20.130 --> 00:12:24.250
तो यदि आपको एक
चेकबॉक्स बनाना है, तो नेटिव इनपुट तत्वों का उपयोग करें

00:12:24.250 --> 00:12:28.650
जिसका प्रकार चेकबॉक्स हो बजाय
div तत्व पर भूमिका को

00:12:28.650 --> 00:12:29.650
चेकबॉक्स के रूप में उपयोग करने के।

00:12:33.130 --> 00:12:36.170
अधिकांश HTML तत्वों में
नेटिव शब्दार्थ हैं जो वे

00:12:36.170 --> 00:12:38.100
स्क्रीन रीडर्स को व्यक्त करते हैं।

00:12:38.100 --> 00:12:40.750
तो नियम दो कहता है,
नेटिव शब्दार्थ को न बदलें

00:12:40.750 --> 00:12:41.780
जब तक कि आपको वास्तव में न करना पड़े।

00:12:42.970 --> 00:12:47.050
क्योंकि ARIA शब्दार्थ बदल सकता है,
और स्क्रीन रीडर उपयोगकर्ताओं के लिए

00:12:47.050 --> 00:12:48.310
अर्थ बदल सकता है।

00:12:49.930 --> 00:12:52.653
नियम तीन कहता है, सभी इंटरैक्टिव
कंट्रोल्स को कीबोर्ड के साथ

00:12:52.654 --> 00:12:53.560
उपयोग करने योग्य होना चाहिए।

00:12:53.560 --> 00:12:55.280
इसका क्या मतलब है?

00:12:55.280 --> 00:12:57.220
ARIA नियम केवल शब्दार्थ जोड़ते हैं।

00:12:57.220 --> 00:13:02.290
इसे नेविगेट करने योग्य और संचालित करने योग्य बनाना,
यह लेखक की जिम्मेदारी है।

00:13:02.290 --> 00:13:05.420
तो यदि आप किसी तत्व पर
भूमिका बराबर बटन का उपयोग कर रहे हैं,

00:13:05.420 --> 00:13:08.440
तो आपको इसे
कीबोर्ड के साथ फोकसेबल बनाना होगा।

00:13:08.440 --> 00:13:12.800
और उपयोगकर्ता को इसे
विंडोज में एंटर कुंजी और

00:13:12.800 --> 00:13:14.750
स्पेसबार की मदद से सक्रिय करने में सक्षम होना चाहिए।

00:13:16.720 --> 00:13:20.500
नियम चार कहता है, फोकसेबल
तत्वों पर भूमिका बराबर प्रेजेंटेशन

00:13:20.500 --> 00:13:23.020
या aria-hidden बराबर true न जोड़ें।

00:13:24.480 --> 00:13:27.392
क्योंकि इनमें से किसी का भी
उपयोग करने से परिणाम होगा

00:13:27.393 --> 00:13:29.680
कि उपयोगकर्ता कुछ भी नहीं पर फोकस करेगा।

00:13:34.740 --> 00:13:38.970
एक्सेसिबल नाम वे नाम हैं
जो सहायक तकनीक द्वारा उपयोग किए जाते हैं,

00:13:38.970 --> 00:13:42.360
या टेक्स्ट जो सहायक तकनीकों द्वारा
तत्व की पहचान करने के लिए उपयोग किया जाता है।

00:13:42.360 --> 00:13:45.286
तो नियम पांच कहता है,
सभी इंटरैक्टिव तत्वों का

00:13:45.287 --> 00:13:46.370
एक एक्सेसिबल नाम होना चाहिए।

00:13:47.930 --> 00:13:51.920
यदि लेखक इन नियमों का पालन नहीं करते,
तो ARIA अच्छे से कहीं ज्यादा नुकसान करता है।

00:13:51.920 --> 00:13:56.440
इसीलिए यह बहुत आम कहावत है,
कोई ARIA नहीं खराब ARIA से बेहतर है।

00:13:58.250 --> 00:14:02.432
आइए इसे मेरे व्यक्तिगत ऑडिट के
एक दिलचस्प उदाहरण से

00:14:02.433 --> 00:14:04.440
समझते हैं।

00:14:05.480 --> 00:14:10.180
आइए इसे एक वॉल्यूम स्लाइडर
से समझते हैं।

00:14:10.180 --> 00:14:13.190
यह वॉल्यूम स्लाइडर कंट्रोल है
जो नेटिव इनपुट तत्व के साथ

00:14:13.190 --> 00:14:17.880
बनाया गया है जिसका प्रकार
भूमिका भूमिका रेंज के रूप में है।

00:14:17.880 --> 00:14:25.880
लेखक ने एक लेबल
तत्व का उपयोग किया है इसे स्लाइडर के साथ बांधने के लिए,

00:14:26.310 --> 00:14:28.010
for id विशेषता के साथ।

00:14:28.010 --> 00:14:33.120
लेखक ने एक लेबल तत्व भी जोड़ा है
जिसमें aria-label बराबर

00:14:33.120 --> 00:14:35.770
वॉल्यूम कंट्रोल है,
और aria-hidden बराबर true है।

00:14:35.770 --> 00:14:39.630
मैं दोहराऊंगा, लेखक ने aria-label बराबर वॉल्यूम
कंट्रोल और aria-hidden बराबर true

00:14:39.630 --> 00:14:42.910
को लेबल तत्व पर भी जोड़ा है।

00:14:45.150 --> 00:14:48.260
अब कुछ क्षण लें और
मुझे चैट के माध्यम से बताएं।

00:14:48.260 --> 00:14:50.220
स्लाइडर के लिए एक्सेसिबल नाम क्या होगा?

00:14:56.040 --> 00:14:59.640
दुर्भाग्य से, स्लाइडर के लिए
कोई एक्सेसिबल नाम नहीं होगा

00:14:59.640 --> 00:15:04.630
और स्क्रीन रीडर उपयोगकर्ता
कोई नाम के बारे में नहीं सुनेंगे,

00:15:04.630 --> 00:15:06.830
और वे तत्व के उद्देश्य को नहीं जानेंगे।

00:15:08.350 --> 00:15:09.350
तो क्या गलत हुआ?

00:15:10.390 --> 00:15:12.890
लेबल तत्व पर aria-hidden बराबर
true के कारण,

00:15:14.570 --> 00:15:18.080
इसने दृश्यमान लेबल के साथ-साथ
aria-label को भी छुपा दिया है।

00:15:18.080 --> 00:15:22.340
तो स्क्रीन रीडर तत्व के
उद्देश्य को नहीं जानते।

00:15:22.340 --> 00:15:28.900
लेखक ने तत्वों पर अनावश्यक
ARIA विशेषताएं जोड़ी थीं,

00:15:28.900 --> 00:15:32.850
अनावश्यक रूप से उन्हें
ठीक से समझे बिना,

00:15:32.850 --> 00:15:36.800
और अंततः दुर्गम इंटरफेस
बनाने में समाप्त हुआ।

00:15:36.800 --> 00:15:38.760
संक्षेप में,
ARIA यहां कोई उद्देश्य नहीं पूरा करता

00:15:38.760 --> 00:15:41.490
क्योंकि लेबल तत्व खुद
एक एक्सेसिबल नाम प्रदान करने के लिए

00:15:41.490 --> 00:15:42.640
पर्याप्त था।

00:15:44.040 --> 00:15:47.370
मुख्य बात यह है कि ARIA का उपयोग
केवल और केवल तभी करें जब

00:15:47.370 --> 00:15:48.770
यह एक्सेसिबिलिटी बढ़ा रहा हो।

00:15:50.290 --> 00:15:51.670
कोई ARIA नहीं खराब ARIA से बेहतर है।

00:15:52.800 --> 00:15:54.820
आइए एमिली के दूसरे उदाहरण
पर चलते हैं।

00:15:56.820 --> 00:15:59.680
एमिली एक वाक् उपयोगकर्ता इनपुट है।

00:15:59.680 --> 00:16:04.120
उसने एक दुखद दुर्घटना में
अपने सभी मुख्य अंग खो दिए हैं।

00:16:04.120 --> 00:16:07.100
तो वह डिजिटल दुनिया के साथ बातचीत करने के लिए
वाक् इनपुट सॉफ्टवेयर का उपयोग करती है।

00:16:08.250 --> 00:16:10.970
वह किताबें पढ़ने की
बहुत शौकीन है।

00:16:12.480 --> 00:16:14.690
वह फेसबुक पर अपने पसंदीदा
लेखक को फॉलो करना चाहती है।

00:16:15.720 --> 00:16:20.230
लेखक की वेबसाइट पर दिखाई देने वाला लिंक है
मुझे फेसबुक पर फॉलो करें।

00:16:22.080 --> 00:16:26.210
यदि आप एमिली की जगह होते, तो आपने
लिंक तक पहुंचने के लिए

00:16:26.210 --> 00:16:27.210
कौन सा वॉयस कमांड दिया होता?

00:16:28.560 --> 00:16:29.700
मुझे चैट के माध्यम से बताएं।

00:16:35.080 --> 00:16:40.820
मुझे यकीन है कि आप सभी ने उपयोग किया होगा,
मुझे फेसबुक पर फॉलो करें... क्लिक करें मुझे

00:16:40.820 --> 00:16:41.910
फेसबुक पर फॉलो करें।

00:16:41.910 --> 00:16:44.980
एमिली ने भी यही कोशिश की,
लेकिन यह काम नहीं आया।

00:16:47.100 --> 00:16:49.223
क्योंकि लेखक ने aria-label का उपयोग

00:16:49.224 --> 00:16:50.450
नई विंडो में खुलता है का उपयोग किया है,

00:16:51.700 --> 00:16:55.950
स्क्रीन रीडर उपयोगकर्ताओं की मदद करने के लिए
लिंक के व्यवहार को समझाने के लिए

00:16:55.950 --> 00:16:58.290
कि यह एक नई विंडो में
खुलेगा।

00:16:58.290 --> 00:17:04.520
लेकिन दुर्भाग्य से, वह इस बात से अवगत नहीं था
कि लिंक के अंदर का मूल पाठ

00:17:04.520 --> 00:17:06.180
aria-label द्वारा अधिलेखित हो जाएगा।

00:17:07.730 --> 00:17:10.720
और दृश्यमान लेबल और aria-label
की बेमेल स्थिति

00:17:10.720 --> 00:17:13.710
या सुलभ नाम उपयोगकर्ताओं के
लिए चुनौतियां पैदा करेगा।

00:17:17.250 --> 00:17:20.360
एक सही तरीका यह है कि
लिंक टेक्स्ट के अंदर

00:17:20.360 --> 00:17:23.080
ही टेक्स्ट को एक नई विंडो
में जोड़ा जाए।

00:17:23.080 --> 00:17:24.120
इससे उपयोगकर्ताओं को मदद मिलेगी।

00:17:26.030 --> 00:17:29.350
अब, डेवलपर्स इन गलतियों से कैसे बच सकते हैं
और सही ARIA का उपयोग कैसे कर सकते हैं?

00:17:30.720 --> 00:17:33.600
आइए सभी ARIA अवधारणाओं को
एक-एक करके समझते हैं कि

00:17:33.600 --> 00:17:34.730
उन्हें सही तरीके से कैसे उपयोग करें।

00:17:43.820 --> 00:17:46.650
सबसे पहले, आइए ARIA का उपयोग करके
सुलभ नाम प्रदान करने के

00:17:46.650 --> 00:17:47.650
मुख्य बिंदुओं का पता लगाते हैं।

00:17:48.860 --> 00:17:52.750
तो हमेशा याद रखें, ARIA तंत्र हमेशा
मूल HTML तकनीकों पर

00:17:52.750 --> 00:17:54.580
प्राथमिकता लेते हैं।

00:17:54.580 --> 00:17:55.640
इसलिए उन्हें सावधानी से चुनें।

00:17:56.710 --> 00:18:00.650
एक बेहतर अभ्यास के रूप में सुलभ नाम की
शुरुआत दृश्यमान लेबल के साथ करें।

00:18:02.250 --> 00:18:06.920
aria-label या aria-labelledby,
सामान्य तत्वों पर काम नहीं करते

00:18:06.920 --> 00:18:09.580
यदि उन्हें उचित भूमिकाएं
नहीं दी गई हैं।

00:18:09.580 --> 00:18:12.940
तो मान लीजिए आप
aria-label समान कुकी बैनर

00:18:14.360 --> 00:18:16.950
div तत्व पर रख रहे हैं,
और आप भूमिका परिभाषित करना भूल जाते हैं,

00:18:18.020 --> 00:18:22.690
तो स्क्रीन रीडर लेबल,
कुकी बैनर नहीं पढ़ेगा।

00:18:24.120 --> 00:18:28.470
इसलिए सुलभ नाम प्रदान करते समय
हमेशा इन बिंदुओं को ध्यान में रखें।

00:18:30.300 --> 00:18:35.630
ARIA के अलावा भी सुलभ नाम
प्रदान करने के कई तरीके हैं।

00:18:37.110 --> 00:18:42.260
तो, मान लीजिए आप बटन या लिंक
में नाम जोड़ना चाहते हैं,

00:18:42.260 --> 00:18:46.270
आप लिंक या बटन के अंदर पाठ डाल सकते हैं,
या आप छवियों में alt जोड़ सकते हैं

00:18:46.270 --> 00:18:50.950
या आप for id विशेषता का
उपयोग कर सकते हैं

00:18:50.950 --> 00:18:53.870
लेबल तत्वों को फॉर्म
फील्ड के साथ बांधने के लिए।

00:18:53.870 --> 00:18:57.800
लेकिन यदि आपको लगता है कि ARIA
सही समाधान है, तो आपको क्या करना चाहिए?

00:18:57.800 --> 00:18:59.614
यदि आपको लगता है कि ARIA
सही समाधान है

00:18:59.615 --> 00:19:01.020
सुलभ नाम प्रदान करने के लिए,

00:19:01.020 --> 00:19:03.790
जांचें कि क्या पाठ पहले से ही
दस्तावेज़ में मौजूद है,

00:19:03.790 --> 00:19:05.740
तो aria-labelledby का उपयोग करें।

00:19:05.740 --> 00:19:08.150
और यदि पाठ पहले से दस्तावेज़
में नहीं है,

00:19:08.150 --> 00:19:09.420
तो आप aria-label का उपयोग कर सकते हैं।

00:19:11.250 --> 00:19:14.530
यहां विचार करने योग्य अन्य बिंदु यह है कि,
aria-describedby

00:19:14.530 --> 00:19:16.480
सुलभ विवरण प्रदान करने के लिए है।

00:19:16.480 --> 00:19:18.340
यह सुलभ नाम प्रदान करने के लिए नहीं है।

00:19:20.590 --> 00:19:23.690
उदाहरण के लिए, त्रुटि विवरण को
प्रोग्रामेटिक रूप से

00:19:23.690 --> 00:19:25.050
संबंधित फॉर्म फील्ड के साथ जोड़ने के लिए।

00:19:26.500 --> 00:19:29.420
लेखक कभी-कभी aria-described-by,
और aria-labelledby के बीच

00:19:29.420 --> 00:19:30.420
भ्रमित हो जाते हैं।

00:19:32.050 --> 00:19:33.890
इसलिए हमेशा इन बिंदुओं को
याद रखते रहें।

00:19:36.410 --> 00:19:40.370
अब अगली स्लाइड उन भूमिकाओं को कवर करती है
जिनके लिए पैरेंट-चाइल्ड विशेषताएं,

00:19:40.370 --> 00:19:41.570
पैरेंट-चाइल्ड संबंध आवश्यक हैं।

00:19:42.890 --> 00:19:46.690
कुछ ऐसी भूमिकाएं हैं जिनके लिए
एक निश्चित पैरेंट-चाइल्ड संबंध

00:19:46.690 --> 00:19:51.320
आवश्यक है जैसे tabless-tab या
list box option, radio-group radio,

00:19:51.320 --> 00:19:54.410
menu-menu item, menu item,
radio check-box, आदि।

00:19:55.810 --> 00:19:58.125
स्पष्ट पैरेंट-चाइल्ड संबंध प्रदान करना

00:19:58.126 --> 00:20:00.700
स्क्रीन रीडर उपयोगकर्ताओं को
आसान नेवीगेशन में मदद करता है।

00:20:00.700 --> 00:20:03.870
और यह उन्हें संरचना और संबंध को
ठीक से समझाने में मदद करता है।

00:20:05.670 --> 00:20:08.290
इसलिए यदि संबंध ठीक से
व्यक्त किया जाता है,

00:20:09.510 --> 00:20:11.950
तो स्क्रीन रीडर उपयोगकर्ता को
जानकारी संप्रेषित करेगा

00:20:11.950 --> 00:20:15.650
जैसे कि आइटम की स्थिति
सूची या मेनू के अंदर,

00:20:15.650 --> 00:20:18.260
या ट्री संरचना की ऊंचाई
में आइटम स्तर।

00:20:20.950 --> 00:20:25.670
कुछ अन्य लोग पैरेंट एलिमेंट पर
पैरेंट रोल प्रदान करते हैं,

00:20:25.670 --> 00:20:29.300
और वे परिभाषित करना भूल जाते हैं...
वे पैरेंट एलिमेंट प्रदान करते हैं,

00:20:29.300 --> 00:20:32.470
पैरेंट रोल, लेकिन चाइल्ड रोल
परिभाषित करना भूल जाते हैं।

00:20:32.470 --> 00:20:35.620
और वे कभी-कभी चाइल्ड रोल प्रदान करते हैं
और पैरेंट रोल परिभाषित करना भूल जाते हैं।

00:20:37.050 --> 00:20:40.400
उदाहरण के लिए, वे पैरेंट एलिमेंट पर
रोल इक्वल टू मेनू प्रदान करते हैं,

00:20:40.400 --> 00:20:43.650
लेकिन रोल इक्वल टू मेनू आइटम रेडियो
परिभाषित करना भूल जाते हैं

00:20:43.650 --> 00:20:47.950
या वंशज एलिमेंट पर
मेनू आइटम चेक-बॉक्स।

00:20:47.950 --> 00:20:52.640
इसी तरह, वे चाइल्ड एलिमेंट पर
रोल इक्वल टू टैब प्रदान करते हैं,

00:20:52.640 --> 00:20:56.040
लेकिन पैरेंट एलिमेंट पर रोल इक्वल
टू टैब लिस्ट परिभाषित करना भूल जाते हैं।

00:20:57.690 --> 00:21:00.100
यह अभी भी संभव है
कि स्क्रीन रीडर

00:21:00.100 --> 00:21:05.230
और ब्राउज़र संयोजन जानकारी को समझ सकें,
लेकिन अन्य नहीं कर सकते,

00:21:05.230 --> 00:21:07.100
इसलिए यह अविश्वसनीय समाधान बनाता है।

00:21:08.500 --> 00:21:12.300
उचित संबंध परिभाषित नहीं करना
उपयोगकर्ता को आंशिक संदर्भ के साथ छोड़ देता है।

00:21:13.610 --> 00:21:17.040
तो सवाल आता है, आप इन संबंधों की
जांच कैसे कर सकते हैं?

00:21:17.040 --> 00:21:21.870
तो पैरेंट चाइल्ड संबंधों से संबंधित
समस्याओं को खोजने के लिए,

00:21:21.870 --> 00:21:24.490
आप या तो कोड की मैन्युअल रूप से
जांच कर सकते हैं

00:21:24.490 --> 00:21:27.320
या आप कोडिंग करते समय
एक्सेसिबिलिटी लिंटर्स का उपयोग कर सकते हैं,

00:21:27.320 --> 00:21:31.760
या आप स्वचालित परीक्षण उपकरणों का
उपयोग कर सकते हैं जैसे axe dev tool, आदि।

00:21:35.010 --> 00:21:38.660
इसी तरह, कुछ भूमिकाएं हैं
जिनमें निश्चित ARIA विशेषताएं हैं।

00:21:40.730 --> 00:21:43.990
कुछ ऐसी भूमिकाएं हैं जिनके लिए
ARIA विशेषताओं का

00:21:43.990 --> 00:21:44.770
संबद्ध होना आवश्यक है।

00:21:44.770 --> 00:21:47.490
उदाहरण के लिए, रोल इक्वल टू
हेडिंग को उचित ARIA

00:21:47.490 --> 00:21:49.600
स्तर के साथ संबद्ध होना चाहिए, रोल इक्वल

00:21:49.601 --> 00:21:54.210
टू चेकबॉक्स को विशेषता
ARIA चेक के साथ संबद्ध होना चाहिए।

00:21:54.210 --> 00:21:57.690
रोल इक्वल टू स्लाइडर को
ARIA वैल्यू नाउ के साथ संबद्ध होना चाहिए।

00:21:57.690 --> 00:22:01.250
उन विशेषताओं के बिना, वे
स्क्रीन रीडर उपयोगकर्ताओं को

00:22:01.250 --> 00:22:02.760
उचित शब्दार्थ व्यक्त करने में असफल होंगे।

00:22:04.010 --> 00:22:06.440
लेकिन लेखक अक्सर
इसे व्यक्त करना भूल जाते हैं।

00:22:07.640 --> 00:22:10.400
मान लीजिए आप div एलिमेंट पर
रोल इक्वल टू हेडिंग का उपयोग कर रहे हैं,

00:22:11.930 --> 00:22:15.810
और आपने सही aria-label
विशेषता प्रदान नहीं की है।

00:22:15.810 --> 00:22:18.430
तो स्क्रीन रीडर सटीक लेबल
व्यक्त नहीं कर सकता

00:22:18.430 --> 00:22:20.310
जो एलिमेंट के लिए व्यक्त
किया जाना चाहिए।

00:22:22.070 --> 00:22:25.650
इसलिए भूमिकाओं और विशेषता संबंध की
जांच के लिए हमेशा नवीनतम

00:22:25.650 --> 00:22:27.260
ARIA स्पेसिफिकेशन का संदर्भ लें।

00:22:30.670 --> 00:22:32.930
अन्य गलत उपयोग की जाने वाली
सुविधा ARIA लाइव रीजन है।

00:22:35.760 --> 00:22:39.290
गतिशील सामग्री परिवर्तन,
जो फोकस योग्य नहीं हैं।

00:22:39.290 --> 00:22:42.610
वे फोकस प्राप्त नहीं करते, और
स्क्रीन रीडर उपयोगकर्ताओं के लिए स्पष्ट नहीं हैं।

00:22:44.530 --> 00:22:48.720
उदाहरण के लिए, चेतावनी संदेश,
सफलता संदेश, स्थिति अपडेट

00:22:48.720 --> 00:22:53.720
या आवधिक स्कोर अपडेट, आदि।

00:22:53.720 --> 00:22:57.030
इस रीजन को ARIA लाइव रीजन
के साथ चिह्नित किया जाना चाहिए।

00:22:57.030 --> 00:22:58.777
तो ARIA लाइव रीजन का

00:22:58.778 --> 00:23:01.280
उपयोग करने के लिए विचार करने योग्य
कुछ मुख्य बिंदु हैं रोल इक्वल

00:23:01.280 --> 00:23:04.970
टू अलर्ट का उपयोग समय संवेदनशील
या महत्वपूर्ण जानकारी के लिए किया जाना चाहिए।

00:23:04.970 --> 00:23:07.140
जबकि aria-live इक्वल टू पोलाइट का
उपयोग कम प्राथमिकता

00:23:07.140 --> 00:23:09.200
संदेशों या अपडेट के लिए
किया जाना चाहिए।

00:23:11.410 --> 00:23:14.130
कभी-कभी लेखक गलती से
रोल इक्वल टू अलर्ट

00:23:14.130 --> 00:23:17.230
या aria-live इक्वल टू असर्टिव का
उपयोग कम प्राथमिकता संदेश पर करते हैं;

00:23:17.230 --> 00:23:18.230
यह गलत उपयोग है।

00:23:20.060 --> 00:23:23.820
हमने पहले से ही aria-live इक्वल
टू पोलाइट के एक गलत उपयोग को देखा है

00:23:23.820 --> 00:23:26.052
हमारे ऑटो रोटेटिंग कैरोसेल
उदाहरण में,

00:23:26.053 --> 00:23:27.940
बॉब के अनुभव के मामले में।

00:23:29.980 --> 00:23:34.990
तो ऑटो रोटेटिंग कैरोसेल के लिए,
aria-live इक्वल टू ऑफ का उपयोग

00:23:34.990 --> 00:23:36.370
घोषणाओं को दबाने के लिए किया जाना चाहिए।

00:23:38.940 --> 00:23:43.460
यदि आप चाहते हैं कि ARIA लाइव रीजन
का पूरा रीजन

00:23:43.460 --> 00:23:47.340
स्क्रीन रीडर द्वारा पढ़ा जाए, तो आपको
ARIA atomic इक्वल

00:23:47.340 --> 00:23:48.550
टू ट्रू का उपयोग aria-live के साथ करना चाहिए।

00:23:49.880 --> 00:23:52.800
क्योंकि aria-atomic का
डिफ़ॉल्ट मान false है।

00:23:54.860 --> 00:24:00.440
कभी-कभी लेखक ARIA लाइव रीजन
को सामग्री अपडेट पर ही जोड़ते हैं।

00:24:00.440 --> 00:24:01.430
यह काम नहीं करता।

00:24:01.430 --> 00:24:01.890
क्यों?

00:24:01.890 --> 00:24:04.190
क्योंकि aria-live तब काम में आता है

00:24:04.190 --> 00:24:08.780
जब सामग्री वास्तव में बदलती है,
प्रारंभिक लोड पर नहीं।

00:24:09.980 --> 00:24:14.080
इसलिए aria-live वाले एलिमेंट को
पेज लोड पर DOM संरचना में

00:24:14.080 --> 00:24:17.930
मौजूद होना चाहिए ताकि स्क्रीन रीडर
इसे पकड़ सके और परिवर्तनों की

00:24:17.930 --> 00:24:18.930
निगरानी कर सके।

00:24:22.420 --> 00:24:24.150
अब भूमिकाओं पर आते हैं।

00:24:25.180 --> 00:24:26.930
ARIA भूमिकाएं कुछ अपेक्षाएं सेट करती हैं।

00:24:26.930 --> 00:24:28.390
इसलिए भूमिका चुनना बहुत महत्वपूर्ण है।

00:24:30.280 --> 00:24:32.666
भूमिकाएं मेनू बार और मेनू
विकल्पों की सूची

00:24:32.667 --> 00:24:34.150
प्रदान करने के लिए उपयुक्त हैं।

00:24:34.150 --> 00:24:38.120
जो डेस्कटॉप एप्लिकेशन में
मेनू के समान हैं।

00:24:38.120 --> 00:24:42.130
उदाहरण के लिए, कार्यों या फ़ंक्शन्स
की सूची प्रदान करने के लिए, जैसे add,

00:24:42.130 --> 00:24:43.380
edit, save, आदि।

00:24:45.080 --> 00:24:47.950
यदि आप रोल इक्वल टू मेनू बार
की मदद से साइट नेवीगेशन बनाते हैं,

00:24:47.950 --> 00:24:50.290
तो स्क्रीन रीडर उपयोगकर्ता
अपेक्षा करेगा

00:24:50.290 --> 00:24:55.390
कि आपको एरो कीज़ की मदद से
मेनू और सबमेनू को नेविगेट

00:24:55.390 --> 00:24:56.940
करने में सक्षम होना चाहिए।

00:24:58.070 --> 00:25:02.210
लेकिन जब ऐसा नहीं होता, तो वे
भ्रमित और दिशाहीन महसूस करते हैं।

00:25:03.490 --> 00:25:06.460
तो विशिष्ट साइट नेवीगेशन के लिए
विस्तार योग्य समूह के साथ

00:25:06.460 --> 00:25:09.280
लिंक्स के,
डिस्क्लोज़र पैटर्न का उपयोग किया जाना चाहिए।

00:25:11.760 --> 00:25:14.940
इसी तरह, भूमिका और प्रस्तुति के बीच अंतर
की भी अक्सर गलत व्याख्या की जाती है।

00:25:16.410 --> 00:25:18.770
आम धारणा के विपरीत, प्रस्तुति के

00:25:18.770 --> 00:25:22.510
बराबर भूमिका सामग्री को
स्क्रीन रीडर

00:25:22.510 --> 00:25:23.520
या सहायक तकनीकों से छुपाता नहीं है।

00:25:24.950 --> 00:25:29.030
यह केवल अंतर्निहित ARIA
शब्दार्थ को एक्सेसिबिलिटी ट्री के

00:25:29.030 --> 00:25:30.160
संपर्क में आने से रोकता है।

00:25:32.170 --> 00:25:34.560
element की सामग्री अभी भी
सहायक तकनीकों के लिए

00:25:34.560 --> 00:25:36.490
उपलब्ध रहती है।

00:25:36.490 --> 00:25:38.650
तो roles कभी-कभी एक cloak की तरह काम करती है।

00:25:38.650 --> 00:25:39.720
इसलिए उन्हें बुद्धिमानी से चुनें।

00:25:47.230 --> 00:25:50.530
अब आइए कुछ ARIA विशेषता s के
गलत उपयोग पर चर्चा करते हैं।

00:25:55.350 --> 00:25:58.160
लेखक कुछ ARIA विशेषता s
को गलत समझते हैं।

00:25:58.160 --> 00:26:01.460
वे selected, pressed और checked की गई
स्थिति के बीच अंतर खोजने में

00:26:01.460 --> 00:26:02.680
विफल रहते हैं।

00:26:06.560 --> 00:26:11.390
कभी-कभी वे ARIA select का उपयोग
toggle buttons को simulate करने के लिए

00:26:11.390 --> 00:26:13.540
या यह इंडिकेट करने के लिए करते हैं
कि एक check-box checked है।

00:26:16.040 --> 00:26:18.560
लेकिन toggle buttons के लिए,
aria-press का उपयोग किया जाना चाहिए।

00:26:19.650 --> 00:26:21.770
और check-boxes या radio buttons के लिए,

00:26:21.770 --> 00:26:23.590
aria-check सही विशेषता  है।

00:26:24.770 --> 00:26:29.068
aria-selected का उपयोग listbox के अंदर
selected option को इंडिकेट करने के लिए

00:26:29.069 --> 00:26:31.680
या tab list में tab के लिए किया जाना चाहिए।

00:26:33.850 --> 00:26:36.120
दूसरी गलत उपयोग की जाने वाली
सुविधा aria-expanded है।

00:26:38.950 --> 00:26:42.150
aria-expanded का उपयोग लिंक या बटन पर
किया जाना चाहिए

00:26:42.150 --> 00:26:45.320
जो सामग्री को विस्तृत या संकुचित
करने का कारण बनते हैं।

00:26:47.150 --> 00:26:49.618
लेकिन अक्सर क्या होता है
कि लेखक इसका उपयोग

00:26:49.619 --> 00:26:50.800
सामग्री पर ही करते हैं।

00:26:50.800 --> 00:26:52.880
वह aria-expanded का
गलत उपयोग है।

00:26:53.970 --> 00:26:57.810
और आश्चर्यजनक रूप से कभी-कभी
लेखक aria-expanded का उपयोग

00:26:57.810 --> 00:27:00.000
menu hierarchy के अंतिम स्तर पर
करते हैं।

00:27:02.100 --> 00:27:05.660
तो यह उपयोगकर्ता को
गलत अर्थ देता है।

00:27:05.660 --> 00:27:10.050
स्क्रीन रीडर उपयोगकर्ता सोचते हैं
कि menu hierarchy का अंतिम स्तर

00:27:10.050 --> 00:27:12.350
का item expand किया जा सकता है।

00:27:12.350 --> 00:27:13.710
लेकिन वास्तव में यह नहीं किया जा सकता।

00:27:15.220 --> 00:27:17.060
तो यह उपयोगकर्ताओं को भ्रमित करता है।

00:27:19.250 --> 00:27:22.260
तो हमेशा अपने विशेषता  को सावधानी से चुनें।

00:27:25.220 --> 00:27:28.590
अब हमने ARIA के बारे में कई
सैद्धांतिक अवधारणाओं का पता लगाया है,

00:27:28.590 --> 00:27:32.870
लेकिन सच्ची accessibility सिद्धांत
और दिशा-निर्देशों से कहीं आगे जाती है।

00:27:32.870 --> 00:27:34.400
Accessibility का अनुमान नहीं किया जा सकता।

00:27:35.670 --> 00:27:38.760
क्या आपको हमारे सत्र की शुरुआत का
खराब रैंप याद है?

00:27:39.990 --> 00:27:43.970
यदि वास्तुकार ने व्हीलचेयर उपयोगकर्ताओं
के साथ रैंप का परीक्षण किया होता

00:27:43.970 --> 00:27:45.440
तो यह अपने उद्देश्य को बेहतर तरीके से पूरा करता।

00:27:47.070 --> 00:27:50.480
देखने में सब कुछ
ठीक और सही लग सकता है,

00:27:50.480 --> 00:27:53.630
लेकिन वास्तविक चुनौतियां तभी सामने आती हैं
जब आप उनका परीक्षण करते हैं

00:27:53.630 --> 00:27:57.890
वास्तविक उपयोगकर्ताओं, वास्तविक उपकरणों
और सहायक प्रौद्योगिकियों के साथ।

00:27:59.330 --> 00:28:03.140
यह यहाँ उल्लेख करने योग्य है कि
स्वचालन परीक्षण सभी accessibility संबंधी मुद्दों

00:28:03.140 --> 00:28:04.440
को कवर नहीं करता।

00:28:06.350 --> 00:28:09.960
आइए मैनुअल और स्क्रीन रीडर परीक्षण
के महत्व को समझते हैं

00:28:09.960 --> 00:28:13.200
एक व्यक्तिगत अनुभव के
एक उदाहरण की मदद से।

00:28:17.230 --> 00:28:21.840
तो मैं सुलभ टैबलेट बनाने के लिए
एक लोकप्रिय उदाहरण का अनुसरण कर रहा था ।

00:28:21.840 --> 00:28:25.600
मैंने कोड को copy किया और
ब्राउज़र में परीक्षण किया।

00:28:27.050 --> 00:28:31.000
टैब सूची में
तीन टैब हैं, HTML, CSS और JavaScript।

00:28:32.210 --> 00:28:34.830
सभी तीन टैब ठीक से
काम कर रहे थे

00:28:34.830 --> 00:28:36.170
तब तक जब तक मैंने स्क्रीन रीडर शुरू नहीं किया।

00:28:38.590 --> 00:28:41.590
आइए इस वीडियो को देखते हैं
यह जानने के लिए कि क्या गलत हुआ

00:28:41.590 --> 00:28:49.590
जब मैंने स्क्रीन रीडर शुरू किया।

00:28:54.030 --> 00:28:59.440
[स्क्रीन रीडर वॉयस]

00:29:06.610 --> 00:29:14.610
तो स्क्रीन रीडर के साथ भी,
सब कुछ ठीक से काम कर रहा था।

00:29:17.740 --> 00:29:20.700
लेकिन जब हमने टैब 2 और टैब 3
पर स्विच किया,

00:29:20.700 --> 00:29:24.020
स्क्रीन रीडर टैब पैनल 2
की सामग्री को नहीं पढ़ रहा था

00:29:24.020 --> 00:29:25.740
और टैब पैनल 3 की।

00:29:26.950 --> 00:29:34.950
जब मैंने कोड देखा, मुझे एहसास हुआ
कि लेखक ने मूल्य को अपडेट किया था

00:29:36.380 --> 00:29:41.240
टैब पैनल 2 और टैब पैनल 3 पर
native hidden विशेषता  की।

00:29:41.240 --> 00:29:44.100
लेकिन वह ARIA विशेषता  की मूल्य
को अपडेट करना भूल गया

00:29:44.100 --> 00:29:48.170
जो कहती है टैब पैनल 2 पर
aria-hidden बराबर true लिखा है

00:29:48.170 --> 00:29:49.170
और टैब पैनल 3 पर।

00:29:50.320 --> 00:29:55.780
तो टैब पैनल पर aria-hidden के
गलत संचालन के कारण, सामग्री

00:29:55.780 --> 00:29:58.643
टैब पैनल 2 और टैब पैनल 3 की
स्क्रीन रीडर उपयोगकर्ताओं के लिए

00:29:58.644 --> 00:29:59.990
अनुपलब्ध रह जाती है।

00:30:01.210 --> 00:30:04.340
यह उदाहरण मैन्युअल परीक्षण के
महत्व पर जोर देता है।

00:30:05.880 --> 00:30:12.190
अपने कोड के अंदर ARIA के सही कार्यान्वयन
की जाँच करने के लिए

00:30:12.190 --> 00:30:14.890
स्क्रीन रीडर के साथ अपने कोड की जाँच
करना अनिवार्य है।

00:30:16.690 --> 00:30:20.250
यहाँ ARIA
hidden का प्रयोग दोहरावपूर्ण है।

00:30:20.250 --> 00:30:23.610
छिपी हुई विशेषता कारण यह अनावश्यक है
की वैल्यू पहले से ही

00:30:23.610 --> 00:30:27.870
टैब पैनल 2 और टैब पैनल 3 की स्थिति
का ख्याल रख रही थी।

00:30:29.310 --> 00:30:32.830
तो यह भी दोहराता है कि ARIA का उपयोग न करें,
जब तक कि आपको करना न पड़े।

00:30:34.680 --> 00:30:38.800
अब हमने कुछ विशेषता के बारे में
महत्वपूर्ण मूल अवधारणाएँ को कवर किया है।

00:30:40.020 --> 00:30:42.700
आइए कीबोर्ड उपयोगिता के बारे में
जानने के लिए आगे बढ़ते हैं।

00:30:44.590 --> 00:30:47.650
तो ARIA का उद्देश्य वेब डेवलपर्स
की मदद करना है

00:30:47.650 --> 00:30:50.140
समृद्ध वेब अनुभव बनाने में।

00:30:50.140 --> 00:30:54.440
जो मूल सॉफ्टवेयर अनुप्रयोग
की तरह उपयोग योग्य हो।

00:30:54.440 --> 00:30:57.250
तो मूल सॉफ्टवेयर अनुप्रयोगों में,
उपयोगकर्ता टैब

00:30:57.250 --> 00:31:00.760
जटिल उपयोगकर्ता इंटरफ़ेस या विजेट
तक करता है

00:31:00.760 --> 00:31:03.920
और फिर उस विजेट के अंदर नेविगेट
करने के लिए तीर कुंजियों का उपयोग करता है।

00:31:06.040 --> 00:31:10.170
तो जब डेवलपर्स समृद्ध इंटरनेट अनुप्रयोग
बनाने के लिए ARIA का उपयोग करते हैं,

00:31:10.170 --> 00:31:13.940
उन्हें प्राथमिक कीबोर्ड नेविगेशन
कन्वेंशन का पालन करना चाहिए।

00:31:15.160 --> 00:31:17.380
जो सभी प्लेटफॉर्म में कॉमन हैं।

00:31:18.410 --> 00:31:21.980
तो समग्र विजेट के लिए,
टैब को विजेट पर फोकस मूव करना चाहिए

00:31:21.980 --> 00:31:25.090
और मुख्य रूप से तीर कुंजी
का उपयोग किया जाना चाहिए

00:31:25.090 --> 00:31:29.790
इन विज़ेट के अंदर मूव करने के लिए शामिल करें
एकाधिक फोकस करने योग्य आइटम,

00:31:29.790 --> 00:31:32.090
जैसे सूची बक्से, ट्री,
मेनू ग्रिड, आदि।

00:31:34.750 --> 00:31:38.605
प्रयोज्यता सम्मेलन का
पालन नहीं करने से

00:31:38.606 --> 00:31:41.670
उपयोगकर्ताओं को भ्रम होगा

00:31:41.670 --> 00:31:44.310
और यह प्रयोज्यता को
बहुत कम कर देगा।

00:31:46.750 --> 00:31:51.310
आइए समग्र विजेट के अंदर
फोकस के अनुचित प्रबंधन पर जाते हैं

00:31:51.310 --> 00:31:52.770
ARIA सक्रिय वंशज के साथ।

00:31:55.080 --> 00:31:58.920
तो समग्र विजेट के अंदर focus
को प्रबंधन करने के दो तरीके हैं।

00:32:00.040 --> 00:32:03.440
पहला रोविंग टैबिंडेक्स है,
और दूसरा

00:32:03.440 --> 00:32:07.290
कंटेनर तत्व पर ARIA सक्रिय
वंशज का उपयोग करना है।

00:32:09.060 --> 00:32:12.620
प्रत्येक तकनीक हमें विजेट के अंदर
तीर कुंजी के साथ नेविगेट करने

00:32:12.620 --> 00:32:13.620
की क्षमता देती है।

00:32:15.600 --> 00:32:17.230
हम दूसरे तरीके के बारे में बात करेंगे।

00:32:18.390 --> 00:32:21.500
तो कंटेनर तत्व पर
ARIA सक्रिय वंशज

00:32:21.500 --> 00:32:26.190
स्क्रीन रीडर को बताता है कि विजेट के अंदर
कौन सा आइटम वर्तमान में सक्रिय है।

00:32:27.750 --> 00:32:30.200
यह स्क्रीन रीडर उपयोगकर्ताओं के लिए
एक स्पॉटलाइट की तरह काम करता है।

00:32:31.300 --> 00:32:33.870
तो जब ARIA सक्रिय वंशज
की मूल्य बदली जाती है,

00:32:33.870 --> 00:32:36.540
स्क्रीन रीडर को फोकस change events
मिलते हैं,

00:32:36.540 --> 00:32:38.960
जैसे कि फोकस वास्तव में move हो गया हो।

00:32:41.190 --> 00:32:44.330
लेखक कंटेनर तत्व पर
प्रतिक्रियाशील वंशज प्रदान करते हैं,

00:32:44.330 --> 00:32:47.640
लेकिन वे इसे गतिशील
अपडेट करना भूल जाते हैं

00:32:47.640 --> 00:32:53.470
जब उपयोगकर्ता ऊपर या नीचे तीर कुंजियाँ
जैसी नेविगेशन कुंजियाँ दबाता है।

00:32:54.620 --> 00:32:57.310
तो यहाँ जैसा कि हम अपने कॉम्बो बॉक्स
के उदाहरण में देख सकते हैं,

00:32:57.310 --> 00:32:59.277
पसंदीदा खाद्य पदार्थ चुनने के लिए,

00:32:59.278 --> 00:33:02.070
वर्तमान में सक्रिय
आइटम दृश्यमान है

00:33:02.070 --> 00:33:04.240
बर्गर के रूप में, यह विकल्प तीन है।

00:33:05.790 --> 00:33:07.610
लेकिन ARIA सक्रिय वंशज
की मूल्य

00:33:07.610 --> 00:33:13.290
कंटेनर तत्व पर कह रही है
कि यह एक है, वह है पिज्जा।

00:33:13.290 --> 00:33:14.600
तो यह अपडेट नहीं हुई है।

00:33:16.000 --> 00:33:19.270
तो यदि लेखक इसे गतिशील रूप से
अपडेट करना भूल जाता है,

00:33:19.270 --> 00:33:22.690
उपयोगकर्ता को वर्तमान सक्रिय आइटम
चुनने में संघर्ष करना पड़ेगा

00:33:22.690 --> 00:33:26.310
और वे नहीं जान पाएंगे
कि कौन सा आइटम सेलेक्ट करना है,

00:33:26.310 --> 00:33:28.760
क्योंकि उन्हें पूरी जानकारी
नहीं मिलेगी

00:33:28.760 --> 00:33:32.230
जैसा कि स्क्रीन रीडर उस
जानकारी को नहीं पढ़ेगा।

00:33:33.510 --> 00:33:36.310
तो जब भी आप फोकस मैनेजमेंट के लिए
इस विधि को चुनते हैं,

00:33:36.310 --> 00:33:40.690
कंटेनर तत्व पर यह ARIA सक्रिय वंशज,
इसका उपयोग सावधानी से करें।

00:33:44.620 --> 00:33:47.920
अब हम ARIA का सबसे अच्छा उपयोग
करने के लिए क्या कर सकते हैं?

00:33:47.920 --> 00:33:48.920
आइए संक्षेप करते हैं।

00:33:50.610 --> 00:33:53.870
पहले और सबसे महत्वपूर्ण,
ARIA का उपयोग तब तक न करें जब तक आपको करना न पड़े।

00:33:55.930 --> 00:34:00.330
नवीनतम ARIA विशिष्टता के साथ
खुद को अपस्किल करें जो फिलहाल 1.2 है।

00:34:01.640 --> 00:34:05.000
और ARIA का सही उपयोग करना सीखने के लिए
ARIA संलेखन अभ्यास मार्गदर्शिका का उपयोग करें।

00:34:06.320 --> 00:34:08.270
एक्सेसिबिलिटी लिंटर्स का उपयोग करें।

00:34:08.270 --> 00:34:11.271
एक्सेसिबिलिटी लिंटर्स
वे प्लग-इन हैं

00:34:11.272 --> 00:34:14.580
जो रियल टाइम में बग्स की रिपोर्ट करते हैं
जब आप कोड लिखते हैं।

00:34:16.210 --> 00:34:20.590
स्वचालित एक्सेसिबिलिटी
चेकर्स का उपयोग करें जैसे एक्स डेव टूल, वेव,

00:34:20.590 --> 00:34:22.920
इत्यादि, जब आप ब्राउज़र में
अपना कोड चलाते हैं।

00:34:26.620 --> 00:34:30.570
हमेशा अपने कोड को
कीबोर्ड स्क्रीन रीडर्स जैसे NVDA,

00:34:30.570 --> 00:34:33.770
JAWS, टॉक-बैक,
वॉयसओवर और स्पीच इनपुट सॉफ्टवेयर के साथ टेस्ट करें।

00:34:36.190 --> 00:34:39.640
थीम्स, प्लग-इन्स,
कंपोनेंट्स, लाइब्रेरीज, फ्रेमवर्क्स,

00:34:39.640 --> 00:34:40.640
इत्यादि चुनते समय।

00:34:41.480 --> 00:34:45.500
हमेशा ध्यान रखें कि आप उनकी एक्सेसिबिलिटी सपोर्ट
की जांच करें

00:34:45.500 --> 00:34:46.500
उन्हें उपयोग करने से पहले।

00:34:47.890 --> 00:34:52.420
अपने कोड में ARIA के उपयोग को डॉक्यूमेंट करें
ताकि दूसरों के लिए

00:34:52.420 --> 00:34:53.960
इसे समझना और
बेहतर तरीके से बनाए रखना आसान हो।

00:34:56.070 --> 00:34:58.880
एक्सेसिबिलिटी सुनिश्चित करने का
सबसे अच्छा तरीका

00:34:58.880 --> 00:35:02.020
हमेशा परीक्षण के दौरान सहायक प्रौद्योगिकी उपयोगकर्ताओं
को शामिल करना है।

00:35:04.970 --> 00:35:11.780
जब हम सक्रिय दृष्टिकोण के साथ
बेहतर ARIA प्रथाओं का पालन करते हैं,

00:35:11.780 --> 00:35:16.200
हम न केवल अपनी वेबसाइटों को अधिक
सुलभ बनाते हैं, बल्कि हम बहुत सारे

00:35:16.200 --> 00:35:17.200
संसाधनों भी बचाते हैं।

00:35:19.300 --> 00:35:25.990
दूसरी ओर, जब हम
खराब ARIA का उपयोग बिना समझे करते हैं,

00:35:25.990 --> 00:35:31.160
और बिना पूरी तरह से टेस्ट किए,
और यदि हम जल्दबाजी में अप्राप्य कोड

00:35:31.160 --> 00:35:33.600
भेजते हैं,
तो हम सुलभता ऋण जमा करते हैं।

00:35:35.220 --> 00:35:40.990
क्योंकि बाद के चरणों में पहुंच को ठीक करना
समय, प्रयास,

00:35:40.990 --> 00:35:41.990
और वित्तीय लागत लगा सकता है।

00:35:44.930 --> 00:35:52.930
यदि आप ओपन सोर्स
घटकों, फ़्रेमों, प्लग-इनों,

00:35:53.150 --> 00:35:56.680
सामग्री प्रबंधन प्रणाली,
या शिक्षण प्रबंधन प्रणाली,

00:35:56.680 --> 00:36:03.190
संलेखन उपकरण, इत्यादि को एकीकृत कर रहे हैं, तो बस
कल्पना करें कि आप कितना अंतर ला सकते हैं

00:36:03.190 --> 00:36:08.250
लंबे समय में लागत,
समय, और प्रयास को तेजी से बचाने के लिए,

00:36:08.250 --> 00:36:10.400
यदि अभिगम्यता को
पहले दिन से ही विचार किया जाए।

00:36:12.000 --> 00:36:14.840
तो आइए एक्सेसिबिलिटी को एक
प्राथमिकता बनाएं, बाद में विचार नहीं।

00:36:14.840 --> 00:36:19.230
और इस कर्ज को
नवीनतम स्प्रिंट पर पास न करें।

00:36:21.660 --> 00:36:25.930
और अंत में मैं यह
कहना चाहूंगी, ARIA बनाया गया है

00:36:25.930 --> 00:36:28.180
सहायक प्रौद्योगिकी उपयोगकर्ता की मदद के लिए।

00:36:28.180 --> 00:36:31.440
इसलिए ARIA को
मात्र कोड सजावट की तरह व्यवहार नहीं किया जाना चाहिए,

00:36:31.440 --> 00:36:35.310
बल्कि विकलांग लोगों को सशक्त बनाने के लिए
एक शक्तिशाली उपकरण के रूप में।

00:36:37.450 --> 00:36:41.720
ARIA की पूरी क्षमता का उपयोग करने के लिए,
ARIA का विवेकपूर्ण उपयोग करें

00:36:41.720 --> 00:36:44.130
और केवल जब आवश्यक हो।

00:36:44.130 --> 00:36:47.420
क्योंकि ARIA का गलत उपयोग
अच्छे से अधिक नुकसान करता है।

00:36:50.080 --> 00:36:52.540
अभिगम्यता एक
साझा जिम्मेदारी है।

00:36:52.540 --> 00:36:54.150
यह किसी एक व्यक्ति का काम नहीं है।

00:36:56.740 --> 00:37:00.410
तो आइये अपने प्रयासों को मिलाकर
दुनिया को सभी के लिए अधिक समावेशी

00:37:00.410 --> 00:37:01.500
और सुलभ बनाएं।

00:37:02.760 --> 00:37:03.810
क्योंकि वेब सभी के लिए है।

00:37:05.300 --> 00:37:06.300
धन्यवाद।

00:37:08.410 --> 00:37:09.990
इस सत्र में मेरे साथ
जुड़ने के लिए धन्यवाद।

00:37:12.780 --> 00:37:15.420
और यदि आपके कोई प्रश्न हैं,
तो आप मुझसे चैट के माध्यम से पूछ सकते हैं।

00:37:16.530 --> 00:37:19.240
या आप बाद में मेरे मेल
या सोशल मीडिया कनेक्शन के माध्यम से

00:37:19.240 --> 00:37:20.790
मुझसे कनेक्ट कर सकते हैं।

00:37:22.540 --> 00:37:23.490
सभी का धन्यवाद।

00:37:26.967 --> 00:37:29.950
 रौनक: रश्मि जी, अद्भुत सत्र
के लिए धन्यवाद।

00:37:29.950 --> 00:37:34.410
यह मेरे लिए बहुत जानकारीपूर्ण था
और डेवलपर होने के नाते भी।

00:37:37.010 --> 00:37:41.960
हमारे पास कुछ प्रश्न हैं और उनमें से अधिकतर
स्लाइड पाठ के लिए पूछ रहे हैं।

00:37:41.960 --> 00:37:45.330
तो हां, आप इसे पोस्ट कर सकती हैं
जब आप इसे तैयार कर लें।

00:37:45.330 --> 00:37:48.520
लेकिन आइए कुछ
अन्य प्रश्न देखते हैं।

00:37:48.520 --> 00:37:53.650
तो वीडियो से एक प्रश्न कहता है,
क्या आपको लगता है कि यह कथन,

00:37:53.650 --> 00:37:58.430
ARIA का उपयोग करने का नियम
ARIA का उपयोग न करना है, आज भी सच है?

00:38:01.829 --> 00:38:04.430
 रश्मि: क्षमा करें,
मैंने आपको ठीक नहीं सुना।

00:38:04.430 --> 00:38:08.120
 रौनक: आप प्रश्नोत्तर अनुभाग में देखिए,
आप वहां भी पढ़ सकेंगी।

00:38:08.120 --> 00:38:14.050
क्या आपको लगता है कि ARIA का उपयोग करने
का नियम ARIA का उपयोग न करना है,

00:38:14.050 --> 00:38:15.040
आज भी सच है?

00:38:17.333 --> 00:38:19.940
 रश्मि: हां,
यह वास्तव सन्दर्भ पर निर्भर करता है,

00:38:19.940 --> 00:38:23.110
यदि आपके पास
गतिशील घटक नहीं हैं

00:38:23.110 --> 00:38:25.530
या आपके पास कुछ
इंटरैक्टिव नियंत्रण नहीं हैं,

00:38:25.530 --> 00:38:28.760
तो बेशक आप
इसे ARIA के बिना कर सकते हैं।

00:38:28.760 --> 00:38:31.870
यदि आपके पृष्ठों पर
सीमित सामग्री है।

00:38:33.230 --> 00:38:36.840
लेकिन यदि आपके पास समृद्ध इंटरफेस हैं
और इंटरैक्टिव नियंत्रण हैं

00:38:36.840 --> 00:38:39.690
और गतिशील सामग्री है, तो निश्चित
आपको ARIA के लिए जाना होगा।

00:38:40.600 --> 00:38:41.070
 रौनक: ठीक है।

00:38:41.070 --> 00:38:43.940
 रश्मि: लेकिन डिज़ाइन
समय के दौरान, हम यह भी जाँच कर सकते हैं

00:38:43.940 --> 00:38:47.420
कि हमें कौन से घटकों का उपयोग करने चाहिए, ताकि
हम न्यूनतम ARIA का उपयोग कर सकें।

00:38:51.433 --> 00:38:53.300
 रौनक: धन्यवाद, रश्मि जी।

00:38:53.300 --> 00:38:54.300
एक और प्रश्न।

00:38:56.250 --> 00:39:00.620
क्या ARIA का उपयोग ठीक है?
यदि ऑल्ट पहले से उपलब्ध है?

00:39:00.620 --> 00:39:03.550
क्या वे साथ-साथ चल सकते हैं
या यह अति प्रयोग है?

00:39:12.718 --> 00:39:15.469
 रश्मि: तो,
यदि यह उद्देश्य पूरा कर रहा है,

00:39:15.470 --> 00:39:18.060
यदि इसमें अतिरिक्त
विवरण नहीं है, तो यह ठीक है

00:39:18.060 --> 00:39:19.740
केवल वैकल्पिक पाठ देना।

00:39:19.740 --> 00:39:23.790
यदि छवि में कुछ अतिरिक्त
सामग्री है जिसे आपको वर्णन करना है,

00:39:23.790 --> 00:39:28.420
तो आप aria-describedby
विशेषता  का उपयोग विवरण देने के साथ कर सकते हैं।

00:39:31.270 --> 00:39:32.233
 रौनक: धन्यवाद।

00:39:35.170 --> 00:39:38.170
रजत का एक प्रश्न है,
नमस्ते, रश्मि जी,

00:39:38.170 --> 00:39:41.360
क्या एंड्रॉइड आधारित ऐप्स के लिए
समान सामग्री उपलब्ध है?

00:39:43.267 --> 00:39:47.090
 रश्मि: तो यह मूल रूप
HTML को सपोर्ट करने के लिए है।

00:39:47.090 --> 00:39:50.010
यह मूल ऐप्स के लिए नहीं है।

00:39:50.010 --> 00:39:53.630
तो यह HTML के साथ आधारित
वेब पेजों को समर्थन करने के लिए है।

00:39:55.900 --> 00:39:56.890
 रौनक: धन्यवाद।

00:39:56.890 --> 00:40:00.780
आइए निष्कर्ष की ओर
चलते हैं।

00:40:00.780 --> 00:40:04.300
आइए अंतिम
प्रश्न लेते हैं, रश्मि जी।

00:40:04.300 --> 00:40:07.170
क्या कोई ARIA विशेषता  है
जिसका आप बिल्कुल उपयोग नहीं करेंगी

00:40:07.170 --> 00:40:08.710
खराब समर्थन के कारण?

00:40:12.333 --> 00:40:16.600
 रश्मि: मुझे लगता है कि वर्तमान
ARIA ग्राफ को अप्रचलित कर दिया गया है।

00:40:16.600 --> 00:40:21.600
तो ARIA एक और विशेषता 
की तलाश कर रहा है

00:40:21.600 --> 00:40:23.720
उस चीज़ को और बेहतर बनाने के लिए।

00:40:26.870 --> 00:40:31.280
 रौनक: रश्मि जी के साथ इस सत्र में
भाग करने के लिए सभी का धन्यवाद।

00:40:31.280 --> 00:40:33.440
आप चैट में
बातचीत जारी कर सकते हैं

00:40:33.440 --> 00:40:40.250
या सोशल मीडिया पर
#WPA11yday और #WPAD2023 का उपयोग करके।

00:40:42.000 --> 00:40:45.307
हम इसकी भी सराहना करेंगे यदि आप

00:40:45.308 --> 00:40:50.000
2023.wpaccessibility.day/creditbit
पर जाएं।

00:40:50.400 --> 00:40:54.420
मैं चैट में भी लिंक भेज दूँगा
[अश्रव्य 40:53]

00:40:54.420 --> 00:40:57.480
प्रस्तुति हमारे वक्ताओं पर
और आप

00:40:57.480 --> 00:40:59.420
टी-शर्ट जीतने के लिए प्रवेश कर सकते हैं
जब आप वहां हों।

00:41:00.450 --> 00:41:02.861
अगले सेशन के लिए बने रहें,

00:41:02.862 --> 00:41:08.633
जो लाइटनिंग वार्ता
द्वारा प्रायोजित होगी

00:41:08.633 --> 00:41:10.850
और आप [अश्रव्य 41:10]

00:41:10.850 --> 00:41:15.520
आभासी उपहार
प्राप्त करने के लिए हमारे प्रायोजक
मंच पर जाएँ

00:41:15.520 --> 00:41:18.660
और शानदार पुरस्कार जीतने का
मौका पाएं

00:41:18.660 --> 00:41:21.240
ब्रेक के बाद यहीं पर मिलते हैं।

00:41:21.240 --> 00:41:21.560
धन्यवाद।

00:41:22.267 --> 00:41:27.000
 एम्बर: वर्डप्रेस एक्सेसिबिलिटी डे 2023 प्रायोजकों का
धन्यवाद।

00:41:27.000 --> 00:41:29.860
प्लैटिनम प्रायोजक -
Equalize Digital.

00:41:29.860 --> 00:41:32.610
Equalize Digital का
एक्सेसिबिलिटी चेकर प्लगइन

00:41:32.610 --> 00:41:35.360
एक स्वचालित
एक्सेसिबिलिटी स्कैनिंग टूल है

00:41:35.360 --> 00:41:38.510
जो वर्डप्रेस वेबसाइटों को
सुलभ बनने और रहने में मदद करता है।

00:41:39.810 --> 00:41:42.670
प्लैटिनम प्रायोजक - Gravity Forms.

00:41:42.670 --> 00:41:46.280
Gravity Forms वह प्रोफेशनल
फॉर्म बिल्डर है जिसकी आपको जरूरत है

00:41:46.280 --> 00:41:51.000
सुन्दर,
शक्तिशाली और सुलभ फॉर्म बनाने के लिए।

00:41:51.000 --> 00:41:58.000
गोल्ड प्रायोजक - 20i, Deque,
Empire Caption Solutions, Pressable,

00:41:58.000 --> 00:41:59.080
और WP Engine.

00:42:00.650 --> 00:42:07.520
सिल्वर प्रायोजक - Code Geek, Drake
Cooper, GoDaddy, LoneRock Point,

00:42:07.520 --> 00:42:12.740
NerdPress, Overnight website by
Kinetic Iris, Rihola Networks,

00:42:14.030 --> 00:42:17.030
A11Y Collective, और The Blogsmith.

00:42:18.900 --> 00:42:24.250
कांस्य प्रायोजक - ExcessaCart,
GreenGeeks Web Hosting,

00:42:24.250 --> 00:42:32.250
Hall Analysis SEO Consulting,
HDC, ITX, Ivy Cat, Medabots,

00:42:36.070 --> 00:42:40.975
Pixel Chefs, Simply Schedule
Appointments, SiteGround,

00:42:40.976 --> 00:42:46.170
Termageddon, Underrepresented
in Tech, Weglot, और Yoast.